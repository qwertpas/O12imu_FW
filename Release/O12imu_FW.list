
O12imu_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000221c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080022dc  080022dc  000122dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800230c  0800230c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002314  08002314  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800231c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08002328  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000150  08002328  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010878  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002319  00000000  00000000  000308ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  00032c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d1  00000000  00000000  000334f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef83  00000000  00000000  00033dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000380c  00000000  00000000  00042d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00001a88  00000000  00000000  00046558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00006475  00000000  00000000  00047fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0004e455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022c4 	.word	0x080022c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022c4 	.word	0x080022c4

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	0008      	movs	r0, r1
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f834 	bl	80002e4 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_lmul>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	46ce      	mov	lr, r9
 800028c:	4699      	mov	r9, r3
 800028e:	0c03      	lsrs	r3, r0, #16
 8000290:	469c      	mov	ip, r3
 8000292:	0413      	lsls	r3, r2, #16
 8000294:	4647      	mov	r7, r8
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0404      	lsls	r4, r0, #16
 80002a0:	0c24      	lsrs	r4, r4, #16
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	0c10      	lsrs	r0, r2, #16
 80002a8:	434b      	muls	r3, r1
 80002aa:	4365      	muls	r5, r4
 80002ac:	4341      	muls	r1, r0
 80002ae:	4360      	muls	r0, r4
 80002b0:	0c2c      	lsrs	r4, r5, #16
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	1820      	adds	r0, r4, r0
 80002b6:	468c      	mov	ip, r1
 80002b8:	4283      	cmp	r3, r0
 80002ba:	d903      	bls.n	80002c4 <__aeabi_lmul+0x3c>
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	025b      	lsls	r3, r3, #9
 80002c0:	4698      	mov	r8, r3
 80002c2:	44c4      	add	ip, r8
 80002c4:	4649      	mov	r1, r9
 80002c6:	4379      	muls	r1, r7
 80002c8:	4356      	muls	r6, r2
 80002ca:	0c03      	lsrs	r3, r0, #16
 80002cc:	042d      	lsls	r5, r5, #16
 80002ce:	0c2d      	lsrs	r5, r5, #16
 80002d0:	1989      	adds	r1, r1, r6
 80002d2:	4463      	add	r3, ip
 80002d4:	0400      	lsls	r0, r0, #16
 80002d6:	1940      	adds	r0, r0, r5
 80002d8:	18c9      	adds	r1, r1, r3
 80002da:	bcc0      	pop	{r6, r7}
 80002dc:	46b9      	mov	r9, r7
 80002de:	46b0      	mov	r8, r6
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__udivmoddi4>:
 80002e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e6:	4657      	mov	r7, sl
 80002e8:	464e      	mov	r6, r9
 80002ea:	4645      	mov	r5, r8
 80002ec:	46de      	mov	lr, fp
 80002ee:	b5e0      	push	{r5, r6, r7, lr}
 80002f0:	0004      	movs	r4, r0
 80002f2:	000d      	movs	r5, r1
 80002f4:	4692      	mov	sl, r2
 80002f6:	4699      	mov	r9, r3
 80002f8:	b083      	sub	sp, #12
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d830      	bhi.n	8000360 <__udivmoddi4+0x7c>
 80002fe:	d02d      	beq.n	800035c <__udivmoddi4+0x78>
 8000300:	4649      	mov	r1, r9
 8000302:	4650      	mov	r0, sl
 8000304:	f000 f8d8 	bl	80004b8 <__clzdi2>
 8000308:	0029      	movs	r1, r5
 800030a:	0006      	movs	r6, r0
 800030c:	0020      	movs	r0, r4
 800030e:	f000 f8d3 	bl	80004b8 <__clzdi2>
 8000312:	1a33      	subs	r3, r6, r0
 8000314:	4698      	mov	r8, r3
 8000316:	3b20      	subs	r3, #32
 8000318:	d434      	bmi.n	8000384 <__udivmoddi4+0xa0>
 800031a:	469b      	mov	fp, r3
 800031c:	4653      	mov	r3, sl
 800031e:	465a      	mov	r2, fp
 8000320:	4093      	lsls	r3, r2
 8000322:	4642      	mov	r2, r8
 8000324:	001f      	movs	r7, r3
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	001e      	movs	r6, r3
 800032c:	42af      	cmp	r7, r5
 800032e:	d83b      	bhi.n	80003a8 <__udivmoddi4+0xc4>
 8000330:	42af      	cmp	r7, r5
 8000332:	d100      	bne.n	8000336 <__udivmoddi4+0x52>
 8000334:	e079      	b.n	800042a <__udivmoddi4+0x146>
 8000336:	465b      	mov	r3, fp
 8000338:	1ba4      	subs	r4, r4, r6
 800033a:	41bd      	sbcs	r5, r7
 800033c:	2b00      	cmp	r3, #0
 800033e:	da00      	bge.n	8000342 <__udivmoddi4+0x5e>
 8000340:	e076      	b.n	8000430 <__udivmoddi4+0x14c>
 8000342:	2200      	movs	r2, #0
 8000344:	2300      	movs	r3, #0
 8000346:	9200      	str	r2, [sp, #0]
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	2301      	movs	r3, #1
 800034c:	465a      	mov	r2, fp
 800034e:	4093      	lsls	r3, r2
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	4642      	mov	r2, r8
 8000356:	4093      	lsls	r3, r2
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	e029      	b.n	80003b0 <__udivmoddi4+0xcc>
 800035c:	4282      	cmp	r2, r0
 800035e:	d9cf      	bls.n	8000300 <__udivmoddi4+0x1c>
 8000360:	2200      	movs	r2, #0
 8000362:	2300      	movs	r3, #0
 8000364:	9200      	str	r2, [sp, #0]
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <__udivmoddi4+0x8e>
 800036e:	601c      	str	r4, [r3, #0]
 8000370:	605d      	str	r5, [r3, #4]
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	b003      	add	sp, #12
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	46bb      	mov	fp, r7
 800037c:	46b2      	mov	sl, r6
 800037e:	46a9      	mov	r9, r5
 8000380:	46a0      	mov	r8, r4
 8000382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000384:	4642      	mov	r2, r8
 8000386:	469b      	mov	fp, r3
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	4652      	mov	r2, sl
 800038e:	40da      	lsrs	r2, r3
 8000390:	4641      	mov	r1, r8
 8000392:	0013      	movs	r3, r2
 8000394:	464a      	mov	r2, r9
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	4642      	mov	r2, r8
 800039c:	431f      	orrs	r7, r3
 800039e:	4653      	mov	r3, sl
 80003a0:	4093      	lsls	r3, r2
 80003a2:	001e      	movs	r6, r3
 80003a4:	42af      	cmp	r7, r5
 80003a6:	d9c3      	bls.n	8000330 <__udivmoddi4+0x4c>
 80003a8:	2200      	movs	r2, #0
 80003aa:	2300      	movs	r3, #0
 80003ac:	9200      	str	r2, [sp, #0]
 80003ae:	9301      	str	r3, [sp, #4]
 80003b0:	4643      	mov	r3, r8
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0d8      	beq.n	8000368 <__udivmoddi4+0x84>
 80003b6:	07fb      	lsls	r3, r7, #31
 80003b8:	0872      	lsrs	r2, r6, #1
 80003ba:	431a      	orrs	r2, r3
 80003bc:	4646      	mov	r6, r8
 80003be:	087b      	lsrs	r3, r7, #1
 80003c0:	e00e      	b.n	80003e0 <__udivmoddi4+0xfc>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d101      	bne.n	80003ca <__udivmoddi4+0xe6>
 80003c6:	42a2      	cmp	r2, r4
 80003c8:	d80c      	bhi.n	80003e4 <__udivmoddi4+0x100>
 80003ca:	1aa4      	subs	r4, r4, r2
 80003cc:	419d      	sbcs	r5, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2100      	movs	r1, #0
 80003d6:	3e01      	subs	r6, #1
 80003d8:	1824      	adds	r4, r4, r0
 80003da:	414d      	adcs	r5, r1
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d006      	beq.n	80003ee <__udivmoddi4+0x10a>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d9ee      	bls.n	80003c2 <__udivmoddi4+0xde>
 80003e4:	3e01      	subs	r6, #1
 80003e6:	1924      	adds	r4, r4, r4
 80003e8:	416d      	adcs	r5, r5
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d1f8      	bne.n	80003e0 <__udivmoddi4+0xfc>
 80003ee:	9800      	ldr	r0, [sp, #0]
 80003f0:	9901      	ldr	r1, [sp, #4]
 80003f2:	465b      	mov	r3, fp
 80003f4:	1900      	adds	r0, r0, r4
 80003f6:	4169      	adcs	r1, r5
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db24      	blt.n	8000446 <__udivmoddi4+0x162>
 80003fc:	002b      	movs	r3, r5
 80003fe:	465a      	mov	r2, fp
 8000400:	4644      	mov	r4, r8
 8000402:	40d3      	lsrs	r3, r2
 8000404:	002a      	movs	r2, r5
 8000406:	40e2      	lsrs	r2, r4
 8000408:	001c      	movs	r4, r3
 800040a:	465b      	mov	r3, fp
 800040c:	0015      	movs	r5, r2
 800040e:	2b00      	cmp	r3, #0
 8000410:	db2a      	blt.n	8000468 <__udivmoddi4+0x184>
 8000412:	0026      	movs	r6, r4
 8000414:	409e      	lsls	r6, r3
 8000416:	0033      	movs	r3, r6
 8000418:	0026      	movs	r6, r4
 800041a:	4647      	mov	r7, r8
 800041c:	40be      	lsls	r6, r7
 800041e:	0032      	movs	r2, r6
 8000420:	1a80      	subs	r0, r0, r2
 8000422:	4199      	sbcs	r1, r3
 8000424:	9000      	str	r0, [sp, #0]
 8000426:	9101      	str	r1, [sp, #4]
 8000428:	e79e      	b.n	8000368 <__udivmoddi4+0x84>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d8bc      	bhi.n	80003a8 <__udivmoddi4+0xc4>
 800042e:	e782      	b.n	8000336 <__udivmoddi4+0x52>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	2100      	movs	r1, #0
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	2200      	movs	r2, #0
 800043a:	9100      	str	r1, [sp, #0]
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	2201      	movs	r2, #1
 8000440:	40da      	lsrs	r2, r3
 8000442:	9201      	str	r2, [sp, #4]
 8000444:	e785      	b.n	8000352 <__udivmoddi4+0x6e>
 8000446:	4642      	mov	r2, r8
 8000448:	2320      	movs	r3, #32
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	002a      	movs	r2, r5
 800044e:	4646      	mov	r6, r8
 8000450:	409a      	lsls	r2, r3
 8000452:	0023      	movs	r3, r4
 8000454:	40f3      	lsrs	r3, r6
 8000456:	4644      	mov	r4, r8
 8000458:	4313      	orrs	r3, r2
 800045a:	002a      	movs	r2, r5
 800045c:	40e2      	lsrs	r2, r4
 800045e:	001c      	movs	r4, r3
 8000460:	465b      	mov	r3, fp
 8000462:	0015      	movs	r5, r2
 8000464:	2b00      	cmp	r3, #0
 8000466:	dad4      	bge.n	8000412 <__udivmoddi4+0x12e>
 8000468:	4642      	mov	r2, r8
 800046a:	002f      	movs	r7, r5
 800046c:	2320      	movs	r3, #32
 800046e:	0026      	movs	r6, r4
 8000470:	4097      	lsls	r7, r2
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	40de      	lsrs	r6, r3
 8000476:	003b      	movs	r3, r7
 8000478:	4333      	orrs	r3, r6
 800047a:	e7cd      	b.n	8000418 <__udivmoddi4+0x134>

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <__clzdi2>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	2900      	cmp	r1, #0
 80004bc:	d103      	bne.n	80004c6 <__clzdi2+0xe>
 80004be:	f7ff ffdd 	bl	800047c <__clzsi2>
 80004c2:	3020      	adds	r0, #32
 80004c4:	e002      	b.n	80004cc <__clzdi2+0x14>
 80004c6:	0008      	movs	r0, r1
 80004c8:	f7ff ffd8 	bl	800047c <__clzsi2>
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b510      	push	{r4, lr}
 80004d2:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d4:	2220      	movs	r2, #32
 80004d6:	2100      	movs	r1, #0
 80004d8:	a80c      	add	r0, sp, #48	; 0x30
 80004da:	f001 fec6 	bl	800226a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	2214      	movs	r2, #20
 80004e0:	2100      	movs	r1, #0
 80004e2:	4668      	mov	r0, sp
 80004e4:	f001 fec1 	bl	800226a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e8:	2218      	movs	r2, #24
 80004ea:	2100      	movs	r1, #0
 80004ec:	a805      	add	r0, sp, #20
 80004ee:	f001 febc 	bl	800226a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f2:	491d      	ldr	r1, [pc, #116]	; (8000568 <SystemClock_Config+0x98>)
 80004f4:	4b1d      	ldr	r3, [pc, #116]	; (800056c <SystemClock_Config+0x9c>)
 80004f6:	680a      	ldr	r2, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fa:	401a      	ands	r2, r3
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	4313      	orrs	r3, r2
 8000502:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	2302      	movs	r3, #2
 8000506:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000508:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050a:	2300      	movs	r3, #0
 800050c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	02db      	lsls	r3, r3, #11
 8000512:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000514:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000516:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000518:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051e:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000520:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f000 fed1 	bl	80012c8 <HAL_RCC_OscConfig>
 8000526:	2800      	cmp	r0, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800052c:	e7fe      	b.n	800052c <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000530:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000534:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800053a:	0021      	movs	r1, r4
 800053c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000540:	f001 f910 	bl	8001764 <HAL_RCC_ClockConfig>
 8000544:	2800      	cmp	r0, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x7c>
 8000548:	b672      	cpsid	i
    while (1) {
 800054a:	e7fe      	b.n	800054a <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800054c:	230a      	movs	r3, #10
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800054e:	9009      	str	r0, [sp, #36]	; 0x24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000550:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000552:	a805      	add	r0, sp, #20
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000554:	3b06      	subs	r3, #6
 8000556:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000558:	f001 f9f2 	bl	8001940 <HAL_RCCEx_PeriphCLKConfig>
 800055c:	2800      	cmp	r0, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x94>
 8000560:	b672      	cpsid	i
    while (1) {
 8000562:	e7fe      	b.n	8000562 <SystemClock_Config+0x92>
}
 8000564:	b018      	add	sp, #96	; 0x60
 8000566:	bd10      	pop	{r4, pc}
 8000568:	40007000 	.word	0x40007000
 800056c:	ffffe7ff 	.word	0xffffe7ff

08000570 <main>:
{
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000574:	f000 f9f0 	bl	8000958 <HAL_Init>
  SystemClock_Config();
 8000578:	f7ff ffaa 	bl	80004d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	2214      	movs	r2, #20
 800057e:	2100      	movs	r1, #0
 8000580:	a807      	add	r0, sp, #28
 8000582:	f001 fe72 	bl	800226a <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	2702      	movs	r7, #2
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 800058c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	4e5a      	ldr	r6, [pc, #360]	; (80006f8 <main+0x188>)
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000590:	485a      	ldr	r0, [pc, #360]	; (80006fc <main+0x18c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000594:	01c9      	lsls	r1, r1, #7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	4313      	orrs	r3, r2
 8000598:	62f3      	str	r3, [r6, #44]	; 0x2c
 800059a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4013      	ands	r3, r2
 80005a0:	9304      	str	r3, [sp, #16]
 80005a2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	432b      	orrs	r3, r5
 80005aa:	62f3      	str	r3, [r6, #44]	; 0x2c
 80005ac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80005ae:	402b      	ands	r3, r5
 80005b0:	9305      	str	r3, [sp, #20]
 80005b2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80005b6:	433b      	orrs	r3, r7
 80005b8:	62f3      	str	r3, [r6, #44]	; 0x2c
 80005ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80005bc:	403b      	ands	r3, r7
 80005be:	9306      	str	r3, [sp, #24]
 80005c0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 80005c2:	f000 fbd3 	bl	8000d6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80005c6:	20a0      	movs	r0, #160	; 0xa0
 80005c8:	2200      	movs	r2, #0
 80005ca:	0029      	movs	r1, r5
 80005cc:	05c0      	lsls	r0, r0, #23
 80005ce:	f000 fbcd 	bl	8000d6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	0039      	movs	r1, r7
 80005d6:	484a      	ldr	r0, [pc, #296]	; (8000700 <main+0x190>)
 80005d8:	f000 fbc8 	bl	8000d6c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = UART_DE_Pin;
 80005dc:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 80005de:	4847      	ldr	r0, [pc, #284]	; (80006fc <main+0x18c>)
  GPIO_InitStruct.Pin = UART_DE_Pin;
 80005e0:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 80005e2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = UART_DE_Pin;
 80005e4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f000 fb10 	bl	8000c10 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	20a0      	movs	r0, #160	; 0xa0
 80005f2:	a907      	add	r1, sp, #28
 80005f4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f6:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f000 fb07 	bl	8000c10 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8000604:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <main+0x194>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	a907      	add	r1, sp, #28
 8000608:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 800060a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f000 fafe 	bl	8000c10 <HAL_GPIO_Init>
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000614:	483a      	ldr	r0, [pc, #232]	; (8000700 <main+0x190>)
 8000616:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000618:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000620:	f000 faf6 	bl	8000c10 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000624:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000626:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000628:	432b      	orrs	r3, r5
 800062a:	6333      	str	r3, [r6, #48]	; 0x30
 800062c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800062e:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000630:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000632:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000634:	9307      	str	r3, [sp, #28]
 8000636:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000638:	f000 f9c6 	bl	80009c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800063c:	200a      	movs	r0, #10
 800063e:	f000 f9ed 	bl	8000a1c <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8000642:	4831      	ldr	r0, [pc, #196]	; (8000708 <main+0x198>)
 8000644:	4b31      	ldr	r3, [pc, #196]	; (800070c <main+0x19c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 8000648:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 1000000;
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <main+0x1a0>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	60c4      	str	r4, [r0, #12]
  huart2.Init.BaudRate = 1000000;
 800064e:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000650:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065a:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	f001 fdd1 	bl	8002204 <HAL_UART_Init>
 8000662:	42a0      	cmp	r0, r4
 8000664:	d001      	beq.n	800066a <main+0xfa>
 8000666:	b672      	cpsid	i
    while (1) {
 8000668:	e7fe      	b.n	8000668 <main+0xf8>
  hi2c1.Instance = I2C1;
 800066a:	4c2a      	ldr	r4, [pc, #168]	; (8000714 <main+0x1a4>)
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <main+0x1a8>)
  hi2c1.Init.OwnAddress1 = 0;
 800066e:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8000670:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <main+0x1ac>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000676:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067a:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067e:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 8000680:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000682:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000684:	f000 fca6 	bl	8000fd4 <HAL_I2C_Init>
 8000688:	1e01      	subs	r1, r0, #0
 800068a:	d001      	beq.n	8000690 <main+0x120>
 800068c:	b672      	cpsid	i
    while (1) {
 800068e:	e7fe      	b.n	800068e <main+0x11e>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000690:	0020      	movs	r0, r4
 8000692:	f000 fd87 	bl	80011a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000696:	1e01      	subs	r1, r0, #0
 8000698:	d001      	beq.n	800069e <main+0x12e>
 800069a:	b672      	cpsid	i
    while (1) {
 800069c:	e7fe      	b.n	800069c <main+0x12c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800069e:	0020      	movs	r0, r4
 80006a0:	f000 fda6 	bl	80011f0 <HAL_I2CEx_ConfigDigitalFilter>
 80006a4:	1e02      	subs	r2, r0, #0
 80006a6:	d001      	beq.n	80006ac <main+0x13c>
 80006a8:	b672      	cpsid	i
    while (1) {
 80006aa:	e7fe      	b.n	80006aa <main+0x13a>
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, 0);
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	4813      	ldr	r0, [pc, #76]	; (80006fc <main+0x18c>)
 80006b0:	01c9      	lsls	r1, r1, #7
 80006b2:	f000 fb5b 	bl	8000d6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1); //CS high means I2c activated
 80006b6:	0039      	movs	r1, r7
 80006b8:	002a      	movs	r2, r5
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80006ba:	27a0      	movs	r7, #160	; 0xa0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1); //CS high means I2c activated
 80006bc:	4810      	ldr	r0, [pc, #64]	; (8000700 <main+0x190>)
 80006be:	f000 fb55 	bl	8000d6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80006c2:	05ff      	lsls	r7, r7, #23
        HAL_I2C_Master_Transmit(&hi2c1, LSM6DSV_I2C_ADD_L, buf, 1, 10);
 80006c4:	260a      	movs	r6, #10
        uint8_t buf[4] = {0};
 80006c6:	2200      	movs	r2, #0
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80006c8:	0029      	movs	r1, r5
 80006ca:	0038      	movs	r0, r7
        uint8_t buf[4] = {0};
 80006cc:	9203      	str	r2, [sp, #12]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80006ce:	f000 fb4d 	bl	8000d6c <HAL_GPIO_WritePin>
        HAL_I2C_Master_Transmit(&hi2c1, LSM6DSV_I2C_ADD_L, buf, 1, 10);
 80006d2:	002b      	movs	r3, r5
 80006d4:	aa03      	add	r2, sp, #12
 80006d6:	21d5      	movs	r1, #213	; 0xd5
 80006d8:	0020      	movs	r0, r4
 80006da:	9600      	str	r6, [sp, #0]
 80006dc:	f000 fcd0 	bl	8001080 <HAL_I2C_Master_Transmit>
        HAL_Delay(10);
 80006e0:	0030      	movs	r0, r6
 80006e2:	f000 f95f 	bl	80009a4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80006e6:	0038      	movs	r0, r7
 80006e8:	002a      	movs	r2, r5
 80006ea:	0029      	movs	r1, r5
 80006ec:	f000 fb3e 	bl	8000d6c <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80006f0:	0030      	movs	r0, r6
 80006f2:	f000 f957 	bl	80009a4 <HAL_Delay>
    while(1){
 80006f6:	e7e5      	b.n	80006c4 <main+0x154>
 80006f8:	40021000 	.word	0x40021000
 80006fc:	50000800 	.word	0x50000800
 8000700:	50000400 	.word	0x50000400
 8000704:	00000202 	.word	0x00000202
 8000708:	200000c4 	.word	0x200000c4
 800070c:	40004400 	.word	0x40004400
 8000710:	000f4240 	.word	0x000f4240
 8000714:	20000070 	.word	0x20000070
 8000718:	40005400 	.word	0x40005400
 800071c:	00707cbb 	.word	0x00707cbb

08000720 <Error_Handler>:
 8000720:	b672      	cpsid	i
    while (1) {
 8000722:	e7fe      	b.n	8000722 <Error_Handler+0x2>

08000724 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000724:	2201      	movs	r2, #1
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_MspInit+0x18>)
 8000728:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800072a:	430a      	orrs	r2, r1
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000732:	0552      	lsls	r2, r2, #21
 8000734:	430a      	orrs	r2, r1
 8000736:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	4770      	bx	lr
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000742:	0004      	movs	r4, r0
 8000744:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	2214      	movs	r2, #20
 8000748:	2100      	movs	r1, #0
 800074a:	a801      	add	r0, sp, #4
 800074c:	f001 fd8d 	bl	800226a <memset>
  if(hi2c->Instance==I2C1)
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <HAL_I2C_MspInit+0x6c>)
 8000752:	6822      	ldr	r2, [r4, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d126      	bne.n	80007a6 <HAL_I2C_MspInit+0x66>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	2501      	movs	r5, #1
 800075a:	4c15      	ldr	r4, [pc, #84]	; (80007b0 <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	432b      	orrs	r3, r5
 8000764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000766:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	2712      	movs	r7, #18
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	402b      	ands	r3, r5
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000770:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	a901      	add	r1, sp, #4
 8000774:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000776:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C1;
 800077c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f000 fa47 	bl	8000c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000782:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	a901      	add	r1, sp, #4
 800078e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000792:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000796:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f000 fa3a 	bl	8000c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007a0:	039b      	lsls	r3, r3, #14
 80007a2:	4313      	orrs	r3, r2
 80007a4:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007a6:	b007      	add	sp, #28
 80007a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40005400 	.word	0x40005400
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b530      	push	{r4, r5, lr}
 80007b6:	0005      	movs	r5, r0
 80007b8:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	2214      	movs	r2, #20
 80007bc:	2100      	movs	r1, #0
 80007be:	a801      	add	r0, sp, #4
 80007c0:	f001 fd53 	bl	800226a <memset>
  if(huart->Instance==USART2)
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <HAL_UART_MspInit+0x90>)
 80007c6:	682a      	ldr	r2, [r5, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d138      	bne.n	800083e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <HAL_UART_MspInit+0x94>)
 80007d0:	0292      	lsls	r2, r2, #10
 80007d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	481d      	ldr	r0, [pc, #116]	; (800084c <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d6:	430a      	orrs	r2, r1
 80007d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2202      	movs	r2, #2
 80007dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007de:	4311      	orrs	r1, r2
 80007e0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80007e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4013      	ands	r3, r2
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ec:	23c0      	movs	r3, #192	; 0xc0
 80007ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	3bbf      	subs	r3, #191	; 0xbf
 80007f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	189b      	adds	r3, r3, r2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f000 fa09 	bl	8000c10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80007fe:	4c14      	ldr	r4, [pc, #80]	; (8000850 <HAL_UART_MspInit+0x9c>)
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_UART_MspInit+0xa0>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8000804:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8000806:	2304      	movs	r3, #4
 8000808:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800080a:	330c      	adds	r3, #12
 800080c:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080e:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000810:	0020      	movs	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000812:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000814:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000816:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000818:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800081a:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800081c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800081e:	f000 f923 	bl	8000a68 <HAL_DMA_Init>
 8000822:	2800      	cmp	r0, #0
 8000824:	d001      	beq.n	800082a <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8000826:	f7ff ff7b 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	201c      	movs	r0, #28
 800082e:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000830:	672c      	str	r4, [r5, #112]	; 0x70
 8000832:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000834:	f000 f8c8 	bl	80009c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000838:	201c      	movs	r0, #28
 800083a:	f000 f8ef 	bl	8000a1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800083e:	b007      	add	sp, #28
 8000840:	bd30      	pop	{r4, r5, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40004400 	.word	0x40004400
 8000848:	40021000 	.word	0x40021000
 800084c:	50000400 	.word	0x50000400
 8000850:	20000028 	.word	0x20000028
 8000854:	4002001c 	.word	0x4002001c

08000858 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler>

0800085a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler>

0800085c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000862:	f000 f88d 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bd10      	pop	{r4, pc}

08000868 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800086a:	4802      	ldr	r0, [pc, #8]	; (8000874 <DMA1_Channel2_3_IRQHandler+0xc>)
 800086c:	f000 f985 	bl	8000b7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000870:	bd10      	pop	{r4, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000028 	.word	0x20000028

08000878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000878:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800087a:	4802      	ldr	r0, [pc, #8]	; (8000884 <USART2_IRQHandler+0xc>)
 800087c:	f001 f95a 	bl	8001b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000880:	bd10      	pop	{r4, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	200000c4 	.word	0x200000c4

08000888 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	4770      	bx	lr
	...

0800088c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800088e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000890:	f7ff fffa 	bl	8000888 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000894:	4812      	ldr	r0, [pc, #72]	; (80008e0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000896:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000898:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <LoopForever+0xa>)
    CMP R1, R2
 800089c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800089e:	d105      	bne.n	80008ac <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80008a2:	4912      	ldr	r1, [pc, #72]	; (80008ec <LoopForever+0x12>)
    STR R1, [R0]
 80008a4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80008a6:	4812      	ldr	r0, [pc, #72]	; (80008f0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80008a8:	4912      	ldr	r1, [pc, #72]	; (80008f4 <LoopForever+0x1a>)
    STR R1, [R0]
 80008aa:	6001      	str	r1, [r0, #0]

080008ac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <LoopForever+0x1e>)
  ldr r1, =_edata
 80008ae:	4913      	ldr	r1, [pc, #76]	; (80008fc <LoopForever+0x22>)
  ldr r2, =_sidata
 80008b0:	4a13      	ldr	r2, [pc, #76]	; (8000900 <LoopForever+0x26>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80008c4:	4c10      	ldr	r4, [pc, #64]	; (8000908 <LoopForever+0x2e>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 fcd3 	bl	800227c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fe4b 	bl	8000570 <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
   ldr   r0, =_estack
 80008dc:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80008e0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80008e4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80008e8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80008ec:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80008f0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80008f4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000900:	0800231c 	.word	0x0800231c
  ldr r2, =_sbss
 8000904:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000908:	20000150 	.word	0x20000150

0800090c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_COMP_IRQHandler>
	...

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	20fa      	movs	r0, #250	; 0xfa
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_InitTick+0x3c>)
 8000918:	0080      	lsls	r0, r0, #2
 800091a:	7819      	ldrb	r1, [r3, #0]
 800091c:	f7ff fc08 	bl	8000130 <__udivsi3>
 8000920:	4c0b      	ldr	r4, [pc, #44]	; (8000950 <HAL_InitTick+0x40>)
 8000922:	0001      	movs	r1, r0
 8000924:	6820      	ldr	r0, [r4, #0]
 8000926:	f7ff fc03 	bl	8000130 <__udivsi3>
 800092a:	f000 f883 	bl	8000a34 <HAL_SYSTICK_Config>
 800092e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000930:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000932:	2c00      	cmp	r4, #0
 8000934:	d109      	bne.n	800094a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	2d03      	cmp	r5, #3
 8000938:	d807      	bhi.n	800094a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093a:	3802      	subs	r0, #2
 800093c:	0022      	movs	r2, r4
 800093e:	0029      	movs	r1, r5
 8000940:	f000 f842 	bl	80009c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	0020      	movs	r0, r4
 8000946:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_InitTick+0x44>)
 8000948:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	20000004 	.word	0x20000004
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008

08000958 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000958:	2340      	movs	r3, #64	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_Init+0x24>)
{
 800095c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800095e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000960:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000962:	430b      	orrs	r3, r1
 8000964:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000966:	f7ff ffd3 	bl	8000910 <HAL_InitTick>
 800096a:	1e04      	subs	r4, r0, #0
 800096c:	d103      	bne.n	8000976 <HAL_Init+0x1e>
    HAL_MspInit();
 800096e:	f7ff fed9 	bl	8000724 <HAL_MspInit>
}
 8000972:	0020      	movs	r0, r4
 8000974:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000976:	2401      	movs	r4, #1
 8000978:	e7fb      	b.n	8000972 <HAL_Init+0x1a>
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000980:	4a03      	ldr	r2, [pc, #12]	; (8000990 <HAL_IncTick+0x10>)
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <HAL_IncTick+0x14>)
 8000984:	6811      	ldr	r1, [r2, #0]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	185b      	adds	r3, r3, r1
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	4770      	bx	lr
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	2000014c 	.word	0x2000014c
 8000994:	20000004 	.word	0x20000004

08000998 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000998:	4b01      	ldr	r3, [pc, #4]	; (80009a0 <HAL_GetTick+0x8>)
 800099a:	6818      	ldr	r0, [r3, #0]
}
 800099c:	4770      	bx	lr
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	2000014c 	.word	0x2000014c

080009a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009a8:	f7ff fff6 	bl	8000998 <HAL_GetTick>
 80009ac:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ae:	1c63      	adds	r3, r4, #1
 80009b0:	d002      	beq.n	80009b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <HAL_Delay+0x20>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009b8:	f7ff ffee 	bl	8000998 <HAL_GetTick>
 80009bc:	1b40      	subs	r0, r0, r5
 80009be:	42a0      	cmp	r0, r4
 80009c0:	d3fa      	bcc.n	80009b8 <HAL_Delay+0x14>
  {
  }
}
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c8:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ca:	25ff      	movs	r5, #255	; 0xff
 80009cc:	2403      	movs	r4, #3
 80009ce:	002a      	movs	r2, r5
 80009d0:	4004      	ands	r4, r0
 80009d2:	00e4      	lsls	r4, r4, #3
 80009d4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d6:	0189      	lsls	r1, r1, #6
 80009d8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009da:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009dc:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009de:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80009e0:	2800      	cmp	r0, #0
 80009e2:	db0a      	blt.n	80009fa <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	24c0      	movs	r4, #192	; 0xc0
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_NVIC_SetPriority+0x4c>)
 80009e8:	0880      	lsrs	r0, r0, #2
 80009ea:	0080      	lsls	r0, r0, #2
 80009ec:	18c0      	adds	r0, r0, r3
 80009ee:	00a4      	lsls	r4, r4, #2
 80009f0:	5903      	ldr	r3, [r0, r4]
 80009f2:	4013      	ands	r3, r2
 80009f4:	430b      	orrs	r3, r1
 80009f6:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80009f8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fa:	200f      	movs	r0, #15
 80009fc:	4003      	ands	r3, r0
 80009fe:	3b08      	subs	r3, #8
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_NVIC_SetPriority+0x50>)
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	181b      	adds	r3, r3, r0
 8000a08:	69d8      	ldr	r0, [r3, #28]
 8000a0a:	4002      	ands	r2, r0
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	61da      	str	r2, [r3, #28]
 8000a10:	e7f2      	b.n	80009f8 <HAL_NVIC_SetPriority+0x30>
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	db05      	blt.n	8000a2c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a20:	231f      	movs	r3, #31
 8000a22:	4018      	ands	r0, r3
 8000a24:	3b1e      	subs	r3, #30
 8000a26:	4083      	lsls	r3, r0
 8000a28:	4a01      	ldr	r2, [pc, #4]	; (8000a30 <HAL_NVIC_EnableIRQ+0x14>)
 8000a2a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a2c:	4770      	bx	lr
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	1e43      	subs	r3, r0, #1
 8000a38:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d20d      	bcs.n	8000a5c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a40:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a48:	6a03      	ldr	r3, [r0, #32]
 8000a4a:	0609      	lsls	r1, r1, #24
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	430b      	orrs	r3, r1
 8000a52:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a5c:	4770      	bx	lr
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	e000e010 	.word	0xe000e010
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000a6c:	2001      	movs	r0, #1
  if(hdma == NULL)
 8000a6e:	2c00      	cmp	r4, #0
 8000a70:	d035      	beq.n	8000ade <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a72:	6825      	ldr	r5, [r4, #0]
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <HAL_DMA_Init+0x78>)
 8000a76:	2114      	movs	r1, #20
 8000a78:	18e8      	adds	r0, r5, r3
 8000a7a:	f7ff fb59 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a80:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8000a82:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a84:	2302      	movs	r3, #2
 8000a86:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a88:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a8a:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a8c:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a90:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a92:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8000a94:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a96:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8000a98:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a9a:	433b      	orrs	r3, r7
 8000a9c:	6967      	ldr	r7, [r4, #20]
 8000a9e:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa0:	69a7      	ldr	r7, [r4, #24]
 8000aa2:	433b      	orrs	r3, r7
 8000aa4:	69e7      	ldr	r7, [r4, #28]
 8000aa6:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aa8:	6a27      	ldr	r7, [r4, #32]
 8000aaa:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8000aac:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000aae:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	01db      	lsls	r3, r3, #7
 8000ab4:	4299      	cmp	r1, r3
 8000ab6:	d00c      	beq.n	8000ad2 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ab8:	251c      	movs	r5, #28
 8000aba:	4028      	ands	r0, r5
 8000abc:	3d0d      	subs	r5, #13
 8000abe:	4085      	lsls	r5, r0
 8000ac0:	490a      	ldr	r1, [pc, #40]	; (8000aec <HAL_DMA_Init+0x84>)
 8000ac2:	680b      	ldr	r3, [r1, #0]
 8000ac4:	43ab      	bics	r3, r5
 8000ac6:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ac8:	6863      	ldr	r3, [r4, #4]
 8000aca:	680d      	ldr	r5, [r1, #0]
 8000acc:	4083      	lsls	r3, r0
 8000ace:	432b      	orrs	r3, r5
 8000ad0:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ad2:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ad4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ad6:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ad8:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8000ada:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000adc:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8000ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ae0:	bffdfff8 	.word	0xbffdfff8
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	ffff800f 	.word	0xffff800f
 8000aec:	400200a8 	.word	0x400200a8

08000af0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000af0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000af2:	1d84      	adds	r4, r0, #6
 8000af4:	7fe2      	ldrb	r2, [r4, #31]
{
 8000af6:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000af8:	2a02      	cmp	r2, #2
 8000afa:	d006      	beq.n	8000b0a <HAL_DMA_Abort+0x1a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000afc:	2204      	movs	r2, #4
 8000afe:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 8000b00:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000b02:	2200      	movs	r2, #0
 8000b04:	3305      	adds	r3, #5
 8000b06:	77da      	strb	r2, [r3, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8000b08:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b0a:	6802      	ldr	r2, [r0, #0]
 8000b0c:	200e      	movs	r0, #14
 8000b0e:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b10:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b12:	4381      	bics	r1, r0
 8000b14:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000b16:	2101      	movs	r1, #1
 8000b18:	6810      	ldr	r0, [r2, #0]
 8000b1a:	4388      	bics	r0, r1
 8000b1c:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b20:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000b22:	402a      	ands	r2, r5
 8000b24:	000d      	movs	r5, r1
 8000b26:	4095      	lsls	r5, r2
 8000b28:	6045      	str	r5, [r0, #4]
    return status;
 8000b2a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000b2c:	77e1      	strb	r1, [r4, #31]
    return status;
 8000b2e:	e7e8      	b.n	8000b02 <HAL_DMA_Abort+0x12>

08000b30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b30:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b32:	1d84      	adds	r4, r0, #6
 8000b34:	7fe3      	ldrb	r3, [r4, #31]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d004      	beq.n	8000b44 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000b3e:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b44:	210e      	movs	r1, #14
 8000b46:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b48:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	438a      	bics	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000b50:	2201      	movs	r2, #1
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	4391      	bics	r1, r2
 8000b56:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b58:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000b5a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000b5c:	402b      	ands	r3, r5
 8000b5e:	0015      	movs	r5, r2
 8000b60:	409d      	lsls	r5, r3
 8000b62:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000b64:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000b66:	2400      	movs	r4, #0
 8000b68:	1d43      	adds	r3, r0, #5
 8000b6a:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8000b6c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8000b6e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000b70:	42a2      	cmp	r2, r4
 8000b72:	d0e5      	beq.n	8000b40 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000b74:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000b76:	0023      	movs	r3, r4
 8000b78:	e7e2      	b.n	8000b40 <HAL_DMA_Abort_IT+0x10>

08000b7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000b7c:	261c      	movs	r6, #28
 8000b7e:	2704      	movs	r7, #4
 8000b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b82:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000b84:	4032      	ands	r2, r6
 8000b86:	003e      	movs	r6, r7
 8000b88:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b8a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b8c:	6803      	ldr	r3, [r0, #0]
 8000b8e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000b90:	4235      	tst	r5, r6
 8000b92:	d00d      	beq.n	8000bb0 <HAL_DMA_IRQHandler+0x36>
 8000b94:	423c      	tst	r4, r7
 8000b96:	d00b      	beq.n	8000bb0 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	0692      	lsls	r2, r2, #26
 8000b9c:	d402      	bmi.n	8000ba4 <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	43ba      	bics	r2, r7
 8000ba2:	601a      	str	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000ba4:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000ba6:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x66>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000bac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000bae:	e017      	b.n	8000be0 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000bb0:	2702      	movs	r7, #2
 8000bb2:	003e      	movs	r6, r7
 8000bb4:	4096      	lsls	r6, r2
 8000bb6:	4235      	tst	r5, r6
 8000bb8:	d013      	beq.n	8000be2 <HAL_DMA_IRQHandler+0x68>
 8000bba:	423c      	tst	r4, r7
 8000bbc:	d011      	beq.n	8000be2 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	0692      	lsls	r2, r2, #26
 8000bc2:	d406      	bmi.n	8000bd2 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000bc4:	240a      	movs	r4, #10
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	43a2      	bics	r2, r4
 8000bca:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	1d83      	adds	r3, r0, #6
 8000bd0:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bd6:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000bd8:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8000bda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d1e5      	bne.n	8000bac <HAL_DMA_IRQHandler+0x32>
}
 8000be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000be2:	2608      	movs	r6, #8
 8000be4:	0037      	movs	r7, r6
 8000be6:	4097      	lsls	r7, r2
 8000be8:	423d      	tst	r5, r7
 8000bea:	d0f9      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x66>
 8000bec:	4234      	tst	r4, r6
 8000bee:	d0f7      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf0:	250e      	movs	r5, #14
 8000bf2:	681c      	ldr	r4, [r3, #0]
 8000bf4:	43ac      	bics	r4, r5
 8000bf6:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	001c      	movs	r4, r3
 8000bfc:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8000bfe:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c00:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c02:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000c04:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000c06:	2200      	movs	r2, #0
 8000c08:	1d43      	adds	r3, r0, #5
 8000c0a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8000c0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000c0e:	e7e5      	b.n	8000bdc <HAL_DMA_IRQHandler+0x62>

08000c10 <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8000c10:	2300      	movs	r3, #0
{
 8000c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c14:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c16:	680a      	ldr	r2, [r1, #0]
 8000c18:	0014      	movs	r4, r2
 8000c1a:	40dc      	lsrs	r4, r3
 8000c1c:	d101      	bne.n	8000c22 <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8000c1e:	b005      	add	sp, #20
 8000c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c22:	2501      	movs	r5, #1
 8000c24:	0014      	movs	r4, r2
 8000c26:	409d      	lsls	r5, r3
 8000c28:	402c      	ands	r4, r5
 8000c2a:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 8000c2c:	422a      	tst	r2, r5
 8000c2e:	d100      	bne.n	8000c32 <HAL_GPIO_Init+0x22>
 8000c30:	e090      	b.n	8000d54 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c32:	684a      	ldr	r2, [r1, #4]
 8000c34:	005f      	lsls	r7, r3, #1
 8000c36:	4694      	mov	ip, r2
 8000c38:	2203      	movs	r2, #3
 8000c3a:	4664      	mov	r4, ip
 8000c3c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c3e:	2403      	movs	r4, #3
 8000c40:	40bc      	lsls	r4, r7
 8000c42:	43e4      	mvns	r4, r4
 8000c44:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c46:	1e54      	subs	r4, r2, #1
 8000c48:	2c01      	cmp	r4, #1
 8000c4a:	d82e      	bhi.n	8000caa <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000c4c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c4e:	9c01      	ldr	r4, [sp, #4]
 8000c50:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c52:	68cc      	ldr	r4, [r1, #12]
 8000c54:	40bc      	lsls	r4, r7
 8000c56:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000c58:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c5a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5c:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5e:	43ac      	bics	r4, r5
 8000c60:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c62:	4664      	mov	r4, ip
 8000c64:	0924      	lsrs	r4, r4, #4
 8000c66:	4034      	ands	r4, r6
 8000c68:	409c      	lsls	r4, r3
 8000c6a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000c6c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000c6e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c70:	9c01      	ldr	r4, [sp, #4]
 8000c72:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c74:	688c      	ldr	r4, [r1, #8]
 8000c76:	40bc      	lsls	r4, r7
 8000c78:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000c7a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7c:	2a02      	cmp	r2, #2
 8000c7e:	d116      	bne.n	8000cae <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c80:	2507      	movs	r5, #7
 8000c82:	260f      	movs	r6, #15
 8000c84:	401d      	ands	r5, r3
 8000c86:	00ad      	lsls	r5, r5, #2
 8000c88:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8000c8a:	08dc      	lsrs	r4, r3, #3
 8000c8c:	00a4      	lsls	r4, r4, #2
 8000c8e:	1904      	adds	r4, r0, r4
 8000c90:	9402      	str	r4, [sp, #8]
 8000c92:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c94:	9603      	str	r6, [sp, #12]
 8000c96:	0026      	movs	r6, r4
 8000c98:	9c03      	ldr	r4, [sp, #12]
 8000c9a:	43a6      	bics	r6, r4
 8000c9c:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c9e:	690e      	ldr	r6, [r1, #16]
 8000ca0:	40ae      	lsls	r6, r5
 8000ca2:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000ca4:	9c02      	ldr	r4, [sp, #8]
 8000ca6:	6226      	str	r6, [r4, #32]
 8000ca8:	e001      	b.n	8000cae <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000caa:	2a03      	cmp	r2, #3
 8000cac:	d1df      	bne.n	8000c6e <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cae:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000cb0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cb2:	9d01      	ldr	r5, [sp, #4]
 8000cb4:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cb6:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cb8:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 8000cba:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cbc:	4662      	mov	r2, ip
 8000cbe:	02a4      	lsls	r4, r4, #10
 8000cc0:	4222      	tst	r2, r4
 8000cc2:	d047      	beq.n	8000d54 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc4:	2501      	movs	r5, #1
 8000cc6:	4c24      	ldr	r4, [pc, #144]	; (8000d58 <HAL_GPIO_Init+0x148>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cc8:	27a0      	movs	r7, #160	; 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	6b62      	ldr	r2, [r4, #52]	; 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ccc:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd2:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <HAL_GPIO_Init+0x14c>)
 8000cd4:	089c      	lsrs	r4, r3, #2
 8000cd6:	00a4      	lsls	r4, r4, #2
 8000cd8:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000cda:	220f      	movs	r2, #15
 8000cdc:	3502      	adds	r5, #2
 8000cde:	401d      	ands	r5, r3
 8000ce0:	00ad      	lsls	r5, r5, #2
 8000ce2:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce4:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ce6:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ce8:	2200      	movs	r2, #0
 8000cea:	42b8      	cmp	r0, r7
 8000cec:	d008      	beq.n	8000d00 <HAL_GPIO_Init+0xf0>
 8000cee:	4f1c      	ldr	r7, [pc, #112]	; (8000d60 <HAL_GPIO_Init+0x150>)
 8000cf0:	3201      	adds	r2, #1
 8000cf2:	42b8      	cmp	r0, r7
 8000cf4:	d004      	beq.n	8000d00 <HAL_GPIO_Init+0xf0>
 8000cf6:	4f1b      	ldr	r7, [pc, #108]	; (8000d64 <HAL_GPIO_Init+0x154>)
 8000cf8:	3201      	adds	r2, #1
 8000cfa:	42b8      	cmp	r0, r7
 8000cfc:	d000      	beq.n	8000d00 <HAL_GPIO_Init+0xf0>
 8000cfe:	3204      	adds	r2, #4
 8000d00:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d02:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d04:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d06:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000d08:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 8000d0a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000d0c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000d0e:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d10:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000d12:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d14:	02ff      	lsls	r7, r7, #11
 8000d16:	d401      	bmi.n	8000d1c <HAL_GPIO_Init+0x10c>
        temp &= ~((uint32_t)iocurrent);
 8000d18:	0035      	movs	r5, r6
 8000d1a:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d1c:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000d1e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d20:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000d22:	9d00      	ldr	r5, [sp, #0]
 8000d24:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d26:	02bf      	lsls	r7, r7, #10
 8000d28:	d401      	bmi.n	8000d2e <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 8000d2a:	0035      	movs	r5, r6
 8000d2c:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d2e:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000d30:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000d32:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000d34:	9d00      	ldr	r5, [sp, #0]
 8000d36:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d38:	03bf      	lsls	r7, r7, #14
 8000d3a:	d401      	bmi.n	8000d40 <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 8000d3c:	0035      	movs	r5, r6
 8000d3e:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d40:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000d42:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000d44:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000d46:	9e00      	ldr	r6, [sp, #0]
 8000d48:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d4a:	03ff      	lsls	r7, r7, #15
 8000d4c:	d401      	bmi.n	8000d52 <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8000d4e:	4025      	ands	r5, r4
 8000d50:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000d52:	6016      	str	r6, [r2, #0]
    position++;
 8000d54:	3301      	adds	r3, #1
 8000d56:	e75e      	b.n	8000c16 <HAL_GPIO_Init+0x6>
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000
 8000d60:	50000400 	.word	0x50000400
 8000d64:	50000800 	.word	0x50000800
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d70:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d72:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000d74:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000d76:	e7fc      	b.n	8000d72 <HAL_GPIO_WritePin+0x6>

08000d78 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000d78:	6803      	ldr	r3, [r0, #0]
 8000d7a:	699a      	ldr	r2, [r3, #24]
 8000d7c:	0792      	lsls	r2, r2, #30
 8000d7e:	d501      	bpl.n	8000d84 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d84:	2201      	movs	r2, #1
 8000d86:	6999      	ldr	r1, [r3, #24]
 8000d88:	4211      	tst	r1, r2
 8000d8a:	d102      	bne.n	8000d92 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000d8c:	6999      	ldr	r1, [r3, #24]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	619a      	str	r2, [r3, #24]
  }
}
 8000d92:	4770      	bx	lr

08000d94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000d94:	b530      	push	{r4, r5, lr}
 8000d96:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8000d98:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000d9a:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000d9c:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000d9e:	0589      	lsls	r1, r1, #22
 8000da0:	431a      	orrs	r2, r3
 8000da2:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <I2C_TransferConfig+0x28>)
 8000da6:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000da8:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8000daa:	0d64      	lsrs	r4, r4, #21
 8000dac:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000dae:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8000db0:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000db2:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8000db4:	432a      	orrs	r2, r5
 8000db6:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8000db8:	bd30      	pop	{r4, r5, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	03ff63ff 	.word	0x03ff63ff

08000dc0 <I2C_IsErrorOccurred>:
{
 8000dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000dc2:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8000dc4:	6802      	ldr	r2, [r0, #0]
{
 8000dc6:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8000dc8:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000dca:	2310      	movs	r3, #16
 8000dcc:	000f      	movs	r7, r1
{
 8000dce:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000dd0:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8000dd2:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000dd4:	4219      	tst	r1, r3
 8000dd6:	d00e      	beq.n	8000df6 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000dd8:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dda:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8000ddc:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dde:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	699a      	ldr	r2, [r3, #24]
 8000de4:	423a      	tst	r2, r7
 8000de6:	d163      	bne.n	8000eb0 <I2C_IsErrorOccurred+0xf0>
 8000de8:	9a01      	ldr	r2, [sp, #4]
 8000dea:	2a00      	cmp	r2, #0
 8000dec:	d031      	beq.n	8000e52 <I2C_IsErrorOccurred+0x92>
    error_code |= HAL_I2C_ERROR_AF;
 8000dee:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8000df0:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8000df2:	9b00      	ldr	r3, [sp, #0]
 8000df4:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000df6:	2280      	movs	r2, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8000df8:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000dfa:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8000dfc:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000dfe:	4213      	tst	r3, r2
 8000e00:	d002      	beq.n	8000e08 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8000e02:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000e04:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8000e06:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	00d2      	lsls	r2, r2, #3
 8000e0c:	4213      	tst	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8000e10:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8000e12:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8000e14:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000e16:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	0092      	lsls	r2, r2, #2
 8000e1c:	4213      	tst	r3, r2
 8000e1e:	d04c      	beq.n	8000eba <I2C_IsErrorOccurred+0xfa>
    error_code |= HAL_I2C_ERROR_ARLO;
 8000e20:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000e22:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8000e24:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8000e26:	0020      	movs	r0, r4
 8000e28:	f7ff ffa6 	bl	8000d78 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000e2c:	686b      	ldr	r3, [r5, #4]
 8000e2e:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <I2C_IsErrorOccurred+0x100>)
    __HAL_UNLOCK(hi2c);
 8000e30:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8000e32:	4013      	ands	r3, r2
 8000e34:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8000e36:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000e38:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8000e3a:	433b      	orrs	r3, r7
 8000e3c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000e3e:	0023      	movs	r3, r4
 8000e40:	3341      	adds	r3, #65	; 0x41
 8000e42:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e44:	0022      	movs	r2, r4
 8000e46:	2300      	movs	r3, #0
 8000e48:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8000e4a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e4c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8000e4e:	7023      	strb	r3, [r4, #0]
 8000e50:	e035      	b.n	8000ebe <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8000e52:	1c72      	adds	r2, r6, #1
 8000e54:	d0c5      	beq.n	8000de2 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000e56:	f7ff fd9f 	bl	8000998 <HAL_GetTick>
 8000e5a:	1b40      	subs	r0, r0, r5
 8000e5c:	42b0      	cmp	r0, r6
 8000e5e:	d801      	bhi.n	8000e64 <I2C_IsErrorOccurred+0xa4>
 8000e60:	2e00      	cmp	r6, #0
 8000e62:	d1bd      	bne.n	8000de0 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8000e64:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000e66:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8000e68:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000e6a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8000e6c:	7811      	ldrb	r1, [r2, #0]
 8000e6e:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000e70:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8000e72:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	0209      	lsls	r1, r1, #8
 8000e78:	420a      	tst	r2, r1
 8000e7a:	d00c      	beq.n	8000e96 <I2C_IsErrorOccurred+0xd6>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000e80:	4210      	tst	r0, r2
 8000e82:	d108      	bne.n	8000e96 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8000e84:	4661      	mov	r1, ip
 8000e86:	2920      	cmp	r1, #32
 8000e88:	d005      	beq.n	8000e96 <I2C_IsErrorOccurred+0xd6>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000e8a:	6859      	ldr	r1, [r3, #4]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8000e90:	f7ff fd82 	bl	8000998 <HAL_GetTick>
 8000e94:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	423b      	tst	r3, r7
 8000e9c:	d1a0      	bne.n	8000de0 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8000e9e:	f7ff fd7b 	bl	8000998 <HAL_GetTick>
 8000ea2:	1b40      	subs	r0, r0, r5
 8000ea4:	2819      	cmp	r0, #25
 8000ea6:	d9f6      	bls.n	8000e96 <I2C_IsErrorOccurred+0xd6>
              status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8000eaa:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	e797      	b.n	8000de0 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8000eb0:	9a01      	ldr	r2, [sp, #4]
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d19b      	bne.n	8000dee <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000eb6:	61df      	str	r7, [r3, #28]
 8000eb8:	e799      	b.n	8000dee <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d1b3      	bne.n	8000e26 <I2C_IsErrorOccurred+0x66>
}
 8000ebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ec0:	fe00e800 	.word	0xfe00e800

08000ec4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	0004      	movs	r4, r0
 8000ec8:	000d      	movs	r5, r1
 8000eca:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ecc:	2702      	movs	r7, #2
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	423b      	tst	r3, r7
 8000ed4:	d001      	beq.n	8000eda <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
}
 8000ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eda:	0032      	movs	r2, r6
 8000edc:	0029      	movs	r1, r5
 8000ede:	0020      	movs	r0, r4
 8000ee0:	f7ff ff6e 	bl	8000dc0 <I2C_IsErrorOccurred>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d118      	bne.n	8000f1a <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8000ee8:	1c6b      	adds	r3, r5, #1
 8000eea:	d0f0      	beq.n	8000ece <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000eec:	f7ff fd54 	bl	8000998 <HAL_GetTick>
 8000ef0:	1b80      	subs	r0, r0, r6
 8000ef2:	42a8      	cmp	r0, r5
 8000ef4:	d801      	bhi.n	8000efa <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d1e9      	bne.n	8000ece <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	001a      	movs	r2, r3
 8000f00:	403a      	ands	r2, r7
 8000f02:	423b      	tst	r3, r7
 8000f04:	d1e3      	bne.n	8000ece <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f06:	2120      	movs	r1, #32
 8000f08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f0e:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8000f10:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8000f12:	3341      	adds	r3, #65	; 0x41
 8000f14:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f16:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8000f18:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	e7dc      	b.n	8000ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08000f1e <I2C_WaitOnFlagUntilTimeout>:
{
 8000f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f20:	0004      	movs	r4, r0
 8000f22:	000d      	movs	r5, r1
 8000f24:	0017      	movs	r7, r2
 8000f26:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	6993      	ldr	r3, [r2, #24]
 8000f2c:	402b      	ands	r3, r5
 8000f2e:	1b5b      	subs	r3, r3, r5
 8000f30:	4259      	negs	r1, r3
 8000f32:	414b      	adcs	r3, r1
 8000f34:	42bb      	cmp	r3, r7
 8000f36:	d001      	beq.n	8000f3c <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8000f38:	2000      	movs	r0, #0
 8000f3a:	e01f      	b.n	8000f7c <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8000f3c:	1c73      	adds	r3, r6, #1
 8000f3e:	d0f4      	beq.n	8000f2a <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f40:	f7ff fd2a 	bl	8000998 <HAL_GetTick>
 8000f44:	9b06      	ldr	r3, [sp, #24]
 8000f46:	1ac0      	subs	r0, r0, r3
 8000f48:	42b0      	cmp	r0, r6
 8000f4a:	d801      	bhi.n	8000f50 <I2C_WaitOnFlagUntilTimeout+0x32>
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	d1eb      	bne.n	8000f28 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	402b      	ands	r3, r5
 8000f56:	1b5b      	subs	r3, r3, r5
 8000f58:	425a      	negs	r2, r3
 8000f5a:	4153      	adcs	r3, r2
 8000f5c:	42bb      	cmp	r3, r7
 8000f5e:	d1e3      	bne.n	8000f28 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f60:	2220      	movs	r2, #32
 8000f62:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8000f64:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f66:	4313      	orrs	r3, r2
 8000f68:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f6a:	0023      	movs	r3, r4
 8000f6c:	3341      	adds	r3, #65	; 0x41
 8000f6e:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f70:	0022      	movs	r2, r4
 8000f72:	2300      	movs	r3, #0
 8000f74:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8000f76:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f78:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8000f7a:	7023      	strb	r3, [r4, #0]
}
 8000f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f7e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f80:	0004      	movs	r4, r0
 8000f82:	000e      	movs	r6, r1
 8000f84:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f86:	2520      	movs	r5, #32
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	422b      	tst	r3, r5
 8000f8e:	d001      	beq.n	8000f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000f90:	2000      	movs	r0, #0
}
 8000f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f94:	003a      	movs	r2, r7
 8000f96:	0031      	movs	r1, r6
 8000f98:	0020      	movs	r0, r4
 8000f9a:	f7ff ff11 	bl	8000dc0 <I2C_IsErrorOccurred>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d115      	bne.n	8000fce <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fa2:	f7ff fcf9 	bl	8000998 <HAL_GetTick>
 8000fa6:	1bc0      	subs	r0, r0, r7
 8000fa8:	42b0      	cmp	r0, r6
 8000faa:	d801      	bhi.n	8000fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8000fac:	2e00      	cmp	r6, #0
 8000fae:	d1eb      	bne.n	8000f88 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	402a      	ands	r2, r5
 8000fb8:	422b      	tst	r3, r5
 8000fba:	d1e5      	bne.n	8000f88 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fbe:	432b      	orrs	r3, r5
 8000fc0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000fc2:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8000fc4:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8000fc6:	3341      	adds	r3, #65	; 0x41
 8000fc8:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fca:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8000fcc:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
 8000fd0:	e7df      	b.n	8000f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08000fd4 <HAL_I2C_Init>:
{
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d03f      	beq.n	800105e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fde:	0025      	movs	r5, r4
 8000fe0:	3541      	adds	r5, #65	; 0x41
 8000fe2:	782b      	ldrb	r3, [r5, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d105      	bne.n	8000ff6 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000fea:	0023      	movs	r3, r4
 8000fec:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000fee:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8000ff0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8000ff2:	f7ff fba5 	bl	8000740 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff6:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000ff8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ffa:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000ffc:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ffe:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001000:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001002:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001004:	438a      	bics	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001008:	491a      	ldr	r1, [pc, #104]	; (8001074 <HAL_I2C_Init+0xa0>)
 800100a:	6862      	ldr	r2, [r4, #4]
 800100c:	400a      	ands	r2, r1
 800100e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	4919      	ldr	r1, [pc, #100]	; (8001078 <HAL_I2C_Init+0xa4>)
 8001014:	400a      	ands	r2, r1
 8001016:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001018:	2801      	cmp	r0, #1
 800101a:	d121      	bne.n	8001060 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	0212      	lsls	r2, r2, #8
 8001020:	4332      	orrs	r2, r6
 8001022:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001024:	6858      	ldr	r0, [r3, #4]
 8001026:	4a15      	ldr	r2, [pc, #84]	; (800107c <HAL_I2C_Init+0xa8>)
 8001028:	4302      	orrs	r2, r0
 800102a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800102c:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800102e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001030:	400a      	ands	r2, r1
 8001032:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001034:	6961      	ldr	r1, [r4, #20]
 8001036:	6922      	ldr	r2, [r4, #16]
 8001038:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800103a:	69a1      	ldr	r1, [r4, #24]
 800103c:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800103e:	430a      	orrs	r2, r1
 8001040:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001042:	6a21      	ldr	r1, [r4, #32]
 8001044:	69e2      	ldr	r2, [r4, #28]
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800104a:	2201      	movs	r2, #1
 800104c:	6819      	ldr	r1, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001052:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001054:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001056:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001058:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800105a:	3442      	adds	r4, #66	; 0x42
 800105c:	7020      	strb	r0, [r4, #0]
}
 800105e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001060:	2284      	movs	r2, #132	; 0x84
 8001062:	0212      	lsls	r2, r2, #8
 8001064:	4332      	orrs	r2, r6
 8001066:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001068:	2802      	cmp	r0, #2
 800106a:	d1db      	bne.n	8001024 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	e7d7      	b.n	8001024 <HAL_I2C_Init+0x50>
 8001074:	f0ffffff 	.word	0xf0ffffff
 8001078:	ffff7fff 	.word	0xffff7fff
 800107c:	02008000 	.word	0x02008000

08001080 <HAL_I2C_Master_Transmit>:
{
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001082:	b087      	sub	sp, #28
 8001084:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001086:	0003      	movs	r3, r0
 8001088:	3341      	adds	r3, #65	; 0x41
{
 800108a:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800108c:	9303      	str	r3, [sp, #12]
 800108e:	781b      	ldrb	r3, [r3, #0]
{
 8001090:	0004      	movs	r4, r0
 8001092:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001094:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001096:	2b20      	cmp	r3, #32
 8001098:	d114      	bne.n	80010c4 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 800109a:	0023      	movs	r3, r4
 800109c:	3340      	adds	r3, #64	; 0x40
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	2a01      	cmp	r2, #1
 80010a2:	d00f      	beq.n	80010c4 <HAL_I2C_Master_Transmit+0x44>
 80010a4:	2601      	movs	r6, #1
 80010a6:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80010a8:	f7ff fc76 	bl	8000998 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010ac:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80010ae:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010b0:	9000      	str	r0, [sp, #0]
 80010b2:	2319      	movs	r3, #25
 80010b4:	0032      	movs	r2, r6
 80010b6:	0020      	movs	r0, r4
 80010b8:	0209      	lsls	r1, r1, #8
 80010ba:	f7ff ff30 	bl	8000f1e <I2C_WaitOnFlagUntilTimeout>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d002      	beq.n	80010c8 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 80010c2:	2001      	movs	r0, #1
}
 80010c4:	b007      	add	sp, #28
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010c8:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010ca:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010cc:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010ce:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010d0:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010d2:	3b11      	subs	r3, #17
 80010d4:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 80010d6:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80010da:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80010dc:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80010de:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80010e0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_I2C_Master_Transmit+0x11c>)
 80010e6:	2aff      	cmp	r2, #255	; 0xff
 80010e8:	d920      	bls.n	800112c <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010ea:	22ff      	movs	r2, #255	; 0xff
 80010ec:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010f4:	0039      	movs	r1, r7
 80010f6:	0020      	movs	r0, r4
 80010f8:	f7ff fe4c 	bl	8000d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80010fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010fe:	002a      	movs	r2, r5
 8001100:	0020      	movs	r0, r4
 8001102:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8001104:	2b00      	cmp	r3, #0
 8001106:	d119      	bne.n	800113c <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001108:	f7ff ff39 	bl	8000f7e <I2C_WaitOnSTOPFlagUntilTimeout>
 800110c:	2800      	cmp	r0, #0
 800110e:	d1d8      	bne.n	80010c2 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001110:	2120      	movs	r1, #32
 8001112:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001114:	4d22      	ldr	r5, [pc, #136]	; (80011a0 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001116:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	402a      	ands	r2, r5
 800111c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800111e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8001120:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001122:	3341      	adds	r3, #65	; 0x41
 8001124:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001126:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8001128:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800112a:	e7cb      	b.n	80010c4 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800112c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800112e:	b292      	uxth	r2, r2
 8001130:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	049b      	lsls	r3, r3, #18
 800113a:	e7db      	b.n	80010f4 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800113c:	f7ff fec2 	bl	8000ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001140:	2800      	cmp	r0, #0
 8001142:	d1be      	bne.n	80010c2 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001146:	6822      	ldr	r2, [r4, #0]
 8001148:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800114a:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800114c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800114e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001150:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001152:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001154:	3b01      	subs	r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800115a:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800115c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800115e:	b292      	uxth	r2, r2
 8001160:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0ca      	beq.n	80010fc <HAL_I2C_Master_Transmit+0x7c>
 8001166:	2a00      	cmp	r2, #0
 8001168:	d1c8      	bne.n	80010fc <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	0020      	movs	r0, r4
 800116e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001170:	9500      	str	r5, [sp, #0]
 8001172:	f7ff fed4 	bl	8000f1e <I2C_WaitOnFlagUntilTimeout>
 8001176:	2800      	cmp	r0, #0
 8001178:	d1a3      	bne.n	80010c2 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800117a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800117c:	2bff      	cmp	r3, #255	; 0xff
 800117e:	d906      	bls.n	800118e <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001180:	23ff      	movs	r3, #255	; 0xff
 8001182:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	9000      	str	r0, [sp, #0]
 800118a:	045b      	lsls	r3, r3, #17
 800118c:	e7b2      	b.n	80010f4 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800118e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001190:	b292      	uxth	r2, r2
 8001192:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	9000      	str	r0, [sp, #0]
 8001198:	e7cd      	b.n	8001136 <HAL_I2C_Master_Transmit+0xb6>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	80002000 	.word	0x80002000
 80011a0:	fe00e800 	.word	0xfe00e800

080011a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a6:	0004      	movs	r4, r0
 80011a8:	3441      	adds	r4, #65	; 0x41
 80011aa:	7822      	ldrb	r2, [r4, #0]
{
 80011ac:	0003      	movs	r3, r0
 80011ae:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80011b0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b2:	b2d6      	uxtb	r6, r2
 80011b4:	2a20      	cmp	r2, #32
 80011b6:	d118      	bne.n	80011ea <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80011b8:	001d      	movs	r5, r3
 80011ba:	3540      	adds	r5, #64	; 0x40
 80011bc:	782a      	ldrb	r2, [r5, #0]
 80011be:	2a01      	cmp	r2, #1
 80011c0:	d013      	beq.n	80011ea <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80011c2:	2224      	movs	r2, #36	; 0x24
 80011c4:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3a23      	subs	r2, #35	; 0x23
 80011ca:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80011ce:	4391      	bics	r1, r2
 80011d0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 80011d6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011d8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	4339      	orrs	r1, r7
 80011de:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80011e6:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80011e8:	7028      	strb	r0, [r5, #0]
  }
}
 80011ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ec:	ffffefff 	.word	0xffffefff

080011f0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f0:	0002      	movs	r2, r0
{
 80011f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f4:	3241      	adds	r2, #65	; 0x41
 80011f6:	7814      	ldrb	r4, [r2, #0]
{
 80011f8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fa:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80011fc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fe:	2c20      	cmp	r4, #32
 8001200:	d117      	bne.n	8001232 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001202:	001c      	movs	r4, r3
 8001204:	3440      	adds	r4, #64	; 0x40
 8001206:	7826      	ldrb	r6, [r4, #0]
 8001208:	2e01      	cmp	r6, #1
 800120a:	d012      	beq.n	8001232 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800120c:	3022      	adds	r0, #34	; 0x22
 800120e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3823      	subs	r0, #35	; 0x23
 8001214:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001216:	4f07      	ldr	r7, [pc, #28]	; (8001234 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8001218:	4386      	bics	r6, r0
 800121a:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800121c:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800121e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001220:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001222:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8001224:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001226:	6819      	ldr	r1, [r3, #0]
 8001228:	4308      	orrs	r0, r1
 800122a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800122c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800122e:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001230:	7020      	strb	r0, [r4, #0]
  }
}
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001234:	fffff0ff 	.word	0xfffff0ff

08001238 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001238:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x78>)
{
 800123c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800123e:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001240:	4022      	ands	r2, r4
 8001242:	2a08      	cmp	r2, #8
 8001244:	d031      	beq.n	80012aa <HAL_RCC_GetSysClockFreq+0x72>
 8001246:	2a0c      	cmp	r2, #12
 8001248:	d009      	beq.n	800125e <HAL_RCC_GetSysClockFreq+0x26>
 800124a:	2a04      	cmp	r2, #4
 800124c:	d125      	bne.n	800129a <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800124e:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001252:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8001254:	17c0      	asrs	r0, r0, #31
 8001256:	4018      	ands	r0, r3
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_RCC_GetSysClockFreq+0x80>)
 800125a:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800125c:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800125e:	02a2      	lsls	r2, r4, #10
 8001260:	4816      	ldr	r0, [pc, #88]	; (80012bc <HAL_RCC_GetSysClockFreq+0x84>)
 8001262:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001264:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001266:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001268:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800126a:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800126c:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800126e:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001270:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001272:	4211      	tst	r1, r2
 8001274:	d009      	beq.n	800128a <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x88>)
 8001278:	2300      	movs	r3, #0
 800127a:	2100      	movs	r1, #0
 800127c:	f7ff f804 	bl	8000288 <__aeabi_lmul>
 8001280:	0022      	movs	r2, r4
 8001282:	2300      	movs	r3, #0
 8001284:	f7fe ffe0 	bl	8000248 <__aeabi_uldivmod>
 8001288:	e7e8      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2310      	movs	r3, #16
 800128e:	421a      	tst	r2, r3
 8001290:	d001      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001294:	e7f0      	b.n	8001278 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001298:	e7ee      	b.n	8001278 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800129a:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800129c:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800129e:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80012a4:	3301      	adds	r3, #1
 80012a6:	4098      	lsls	r0, r3
      break;
 80012a8:	e7d8      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x88>)
 80012ac:	e7d6      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x24>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	40021000 	.word	0x40021000
 80012b4:	ff48e500 	.word	0xff48e500
 80012b8:	00f42400 	.word	0x00f42400
 80012bc:	080022f4 	.word	0x080022f4
 80012c0:	007a1200 	.word	0x007a1200
 80012c4:	003d0900 	.word	0x003d0900

080012c8 <HAL_RCC_OscConfig>:
{
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	0005      	movs	r5, r0
 80012cc:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d055      	beq.n	800137e <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d2:	230c      	movs	r3, #12
 80012d4:	4cc0      	ldr	r4, [pc, #768]	; (80015d8 <HAL_RCC_OscConfig+0x310>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d8:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012da:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012dc:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	025b      	lsls	r3, r3, #9
 80012e2:	0019      	movs	r1, r3
 80012e4:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e6:	07d2      	lsls	r2, r2, #31
 80012e8:	d43d      	bmi.n	8001366 <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	682b      	ldr	r3, [r5, #0]
 80012ec:	079b      	lsls	r3, r3, #30
 80012ee:	d500      	bpl.n	80012f2 <HAL_RCC_OscConfig+0x2a>
 80012f0:	e086      	b.n	8001400 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f2:	682b      	ldr	r3, [r5, #0]
 80012f4:	06db      	lsls	r3, r3, #27
 80012f6:	d528      	bpl.n	800134a <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f8:	2e00      	cmp	r6, #0
 80012fa:	d000      	beq.n	80012fe <HAL_RCC_OscConfig+0x36>
 80012fc:	e0df      	b.n	80014be <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	059b      	lsls	r3, r3, #22
 8001302:	d502      	bpl.n	800130a <HAL_RCC_OscConfig+0x42>
 8001304:	69ab      	ldr	r3, [r5, #24]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d039      	beq.n	800137e <HAL_RCC_OscConfig+0xb6>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800130a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130c:	6862      	ldr	r2, [r4, #4]
 800130e:	49b3      	ldr	r1, [pc, #716]	; (80015dc <HAL_RCC_OscConfig+0x314>)
 8001310:	6a2b      	ldr	r3, [r5, #32]
 8001312:	400a      	ands	r2, r1
 8001314:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001316:	0b5b      	lsrs	r3, r3, #13
 8001318:	3301      	adds	r3, #1
 800131a:	023f      	lsls	r7, r7, #8
 800131c:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001320:	6861      	ldr	r1, [r4, #4]
 8001322:	69ea      	ldr	r2, [r5, #28]
 8001324:	0209      	lsls	r1, r1, #8
 8001326:	0a09      	lsrs	r1, r1, #8
 8001328:	0612      	lsls	r2, r2, #24
 800132a:	430a      	orrs	r2, r1
 800132c:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800132e:	68e1      	ldr	r1, [r4, #12]
 8001330:	48ab      	ldr	r0, [pc, #684]	; (80015e0 <HAL_RCC_OscConfig+0x318>)
 8001332:	060b      	lsls	r3, r1, #24
 8001334:	0f1b      	lsrs	r3, r3, #28
 8001336:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001338:	4aaa      	ldr	r2, [pc, #680]	; (80015e4 <HAL_RCC_OscConfig+0x31c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800133a:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 800133c:	4baa      	ldr	r3, [pc, #680]	; (80015e8 <HAL_RCC_OscConfig+0x320>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800133e:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f7ff fae5 	bl	8000910 <HAL_InitTick>
        if(status != HAL_OK)
 8001346:	2800      	cmp	r0, #0
 8001348:	d130      	bne.n	80013ac <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	071b      	lsls	r3, r3, #28
 800134e:	d500      	bpl.n	8001352 <HAL_RCC_OscConfig+0x8a>
 8001350:	e0ec      	b.n	800152c <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001352:	682b      	ldr	r3, [r5, #0]
 8001354:	075b      	lsls	r3, r3, #29
 8001356:	d500      	bpl.n	800135a <HAL_RCC_OscConfig+0x92>
 8001358:	e10e      	b.n	8001578 <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800135a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800135c:	2b00      	cmp	r3, #0
 800135e:	d000      	beq.n	8001362 <HAL_RCC_OscConfig+0x9a>
 8001360:	e193      	b.n	800168a <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8001362:	2000      	movs	r0, #0
 8001364:	e022      	b.n	80013ac <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001366:	2e08      	cmp	r6, #8
 8001368:	d003      	beq.n	8001372 <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800136a:	2e0c      	cmp	r6, #12
 800136c:	d109      	bne.n	8001382 <HAL_RCC_OscConfig+0xba>
 800136e:	2f00      	cmp	r7, #0
 8001370:	d007      	beq.n	8001382 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	039b      	lsls	r3, r3, #14
 8001376:	d5b8      	bpl.n	80012ea <HAL_RCC_OscConfig+0x22>
 8001378:	686b      	ldr	r3, [r5, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1b5      	bne.n	80012ea <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 800137e:	2001      	movs	r0, #1
 8001380:	e014      	b.n	80013ac <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	686a      	ldr	r2, [r5, #4]
 8001384:	428a      	cmp	r2, r1
 8001386:	d113      	bne.n	80013b0 <HAL_RCC_OscConfig+0xe8>
 8001388:	6822      	ldr	r2, [r4, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800138e:	f7ff fb03 	bl	8000998 <HAL_GetTick>
 8001392:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	0292      	lsls	r2, r2, #10
 800139a:	4213      	tst	r3, r2
 800139c:	d1a5      	bne.n	80012ea <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139e:	f7ff fafb 	bl	8000998 <HAL_GetTick>
 80013a2:	9b00      	ldr	r3, [sp, #0]
 80013a4:	1ac0      	subs	r0, r0, r3
 80013a6:	2864      	cmp	r0, #100	; 0x64
 80013a8:	d9f4      	bls.n	8001394 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80013aa:	2003      	movs	r0, #3
}
 80013ac:	b005      	add	sp, #20
 80013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b0:	21a0      	movs	r1, #160	; 0xa0
 80013b2:	02c9      	lsls	r1, r1, #11
 80013b4:	428a      	cmp	r2, r1
 80013b6:	d105      	bne.n	80013c4 <HAL_RCC_OscConfig+0xfc>
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	6821      	ldr	r1, [r4, #0]
 80013bc:	02d2      	lsls	r2, r2, #11
 80013be:	430a      	orrs	r2, r1
 80013c0:	6022      	str	r2, [r4, #0]
 80013c2:	e7e1      	b.n	8001388 <HAL_RCC_OscConfig+0xc0>
 80013c4:	6821      	ldr	r1, [r4, #0]
 80013c6:	4889      	ldr	r0, [pc, #548]	; (80015ec <HAL_RCC_OscConfig+0x324>)
 80013c8:	4001      	ands	r1, r0
 80013ca:	6021      	str	r1, [r4, #0]
 80013cc:	6821      	ldr	r1, [r4, #0]
 80013ce:	400b      	ands	r3, r1
 80013d0:	9303      	str	r3, [sp, #12]
 80013d2:	9b03      	ldr	r3, [sp, #12]
 80013d4:	4986      	ldr	r1, [pc, #536]	; (80015f0 <HAL_RCC_OscConfig+0x328>)
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	400b      	ands	r3, r1
 80013da:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d1d6      	bne.n	800138e <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 80013e0:	f7ff fada 	bl	8000998 <HAL_GetTick>
 80013e4:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	0292      	lsls	r2, r2, #10
 80013ec:	4213      	tst	r3, r2
 80013ee:	d100      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12a>
 80013f0:	e77b      	b.n	80012ea <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f2:	f7ff fad1 	bl	8000998 <HAL_GetTick>
 80013f6:	9b00      	ldr	r3, [sp, #0]
 80013f8:	1ac0      	subs	r0, r0, r3
 80013fa:	2864      	cmp	r0, #100	; 0x64
 80013fc:	d9f3      	bls.n	80013e6 <HAL_RCC_OscConfig+0x11e>
 80013fe:	e7d4      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001400:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001402:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001404:	4213      	tst	r3, r2
 8001406:	d003      	beq.n	8001410 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001408:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800140a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800140c:	4311      	orrs	r1, r2
 800140e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001410:	2e04      	cmp	r6, #4
 8001412:	d003      	beq.n	800141c <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001414:	2e0c      	cmp	r6, #12
 8001416:	d124      	bne.n	8001462 <HAL_RCC_OscConfig+0x19a>
 8001418:	2f00      	cmp	r7, #0
 800141a:	d122      	bne.n	8001462 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800141c:	6822      	ldr	r2, [r4, #0]
 800141e:	0752      	lsls	r2, r2, #29
 8001420:	d501      	bpl.n	8001426 <HAL_RCC_OscConfig+0x15e>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0ab      	beq.n	800137e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	6861      	ldr	r1, [r4, #4]
 8001428:	692a      	ldr	r2, [r5, #16]
 800142a:	4872      	ldr	r0, [pc, #456]	; (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800142c:	0212      	lsls	r2, r2, #8
 800142e:	4001      	ands	r1, r0
 8001430:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001432:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001436:	6822      	ldr	r2, [r4, #0]
 8001438:	438a      	bics	r2, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800143e:	f7ff fefb 	bl	8001238 <HAL_RCC_GetSysClockFreq>
 8001442:	68e3      	ldr	r3, [r4, #12]
 8001444:	4a66      	ldr	r2, [pc, #408]	; (80015e0 <HAL_RCC_OscConfig+0x318>)
 8001446:	061b      	lsls	r3, r3, #24
 8001448:	0f1b      	lsrs	r3, r3, #28
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	4965      	ldr	r1, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x31c>)
 800144e:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8001450:	4b65      	ldr	r3, [pc, #404]	; (80015e8 <HAL_RCC_OscConfig+0x320>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001452:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	f7ff fa5b 	bl	8000910 <HAL_InitTick>
      if(status != HAL_OK)
 800145a:	2800      	cmp	r0, #0
 800145c:	d100      	bne.n	8001460 <HAL_RCC_OscConfig+0x198>
 800145e:	e748      	b.n	80012f2 <HAL_RCC_OscConfig+0x2a>
 8001460:	e7a4      	b.n	80013ac <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 8001462:	2b00      	cmp	r3, #0
 8001464:	d019      	beq.n	800149a <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001466:	2109      	movs	r1, #9
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	438a      	bics	r2, r1
 800146c:	4313      	orrs	r3, r2
 800146e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001470:	f7ff fa92 	bl	8000998 <HAL_GetTick>
 8001474:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001476:	2204      	movs	r2, #4
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	4213      	tst	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	6862      	ldr	r2, [r4, #4]
 8001480:	692b      	ldr	r3, [r5, #16]
 8001482:	495c      	ldr	r1, [pc, #368]	; (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	400a      	ands	r2, r1
 8001488:	4313      	orrs	r3, r2
 800148a:	6063      	str	r3, [r4, #4]
 800148c:	e731      	b.n	80012f2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fa83 	bl	8000998 <HAL_GetTick>
 8001492:	1bc0      	subs	r0, r0, r7
 8001494:	2802      	cmp	r0, #2
 8001496:	d9ee      	bls.n	8001476 <HAL_RCC_OscConfig+0x1ae>
 8001498:	e787      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 800149a:	2201      	movs	r2, #1
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	4393      	bics	r3, r2
 80014a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014a2:	f7ff fa79 	bl	8000998 <HAL_GetTick>
 80014a6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014a8:	2204      	movs	r2, #4
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	4213      	tst	r3, r2
 80014ae:	d100      	bne.n	80014b2 <HAL_RCC_OscConfig+0x1ea>
 80014b0:	e71f      	b.n	80012f2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fa71 	bl	8000998 <HAL_GetTick>
 80014b6:	1bc0      	subs	r0, r0, r7
 80014b8:	2802      	cmp	r0, #2
 80014ba:	d9f5      	bls.n	80014a8 <HAL_RCC_OscConfig+0x1e0>
 80014bc:	e775      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014be:	69ab      	ldr	r3, [r5, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4313      	orrs	r3, r2
 80014cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014ce:	f7ff fa63 	bl	8000998 <HAL_GetTick>
 80014d2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	4213      	tst	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014de:	6863      	ldr	r3, [r4, #4]
 80014e0:	4a3e      	ldr	r2, [pc, #248]	; (80015dc <HAL_RCC_OscConfig+0x314>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	6a2a      	ldr	r2, [r5, #32]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ea:	6862      	ldr	r2, [r4, #4]
 80014ec:	69eb      	ldr	r3, [r5, #28]
 80014ee:	0212      	lsls	r2, r2, #8
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	0a12      	lsrs	r2, r2, #8
 80014f4:	4313      	orrs	r3, r2
 80014f6:	6063      	str	r3, [r4, #4]
 80014f8:	e727      	b.n	800134a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fa:	f7ff fa4d 	bl	8000998 <HAL_GetTick>
 80014fe:	1bc0      	subs	r0, r0, r7
 8001500:	2802      	cmp	r0, #2
 8001502:	d9e7      	bls.n	80014d4 <HAL_RCC_OscConfig+0x20c>
 8001504:	e751      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	4a3b      	ldr	r2, [pc, #236]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800150a:	4013      	ands	r3, r2
 800150c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800150e:	f7ff fa43 	bl	8000998 <HAL_GetTick>
 8001512:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	4213      	tst	r3, r2
 800151c:	d100      	bne.n	8001520 <HAL_RCC_OscConfig+0x258>
 800151e:	e714      	b.n	800134a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fa3a 	bl	8000998 <HAL_GetTick>
 8001524:	1bc0      	subs	r0, r0, r7
 8001526:	2802      	cmp	r0, #2
 8001528:	d9f4      	bls.n	8001514 <HAL_RCC_OscConfig+0x24c>
 800152a:	e73e      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800152c:	696a      	ldr	r2, [r5, #20]
 800152e:	2301      	movs	r3, #1
 8001530:	2a00      	cmp	r2, #0
 8001532:	d010      	beq.n	8001556 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 8001534:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001536:	4313      	orrs	r3, r2
 8001538:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800153a:	f7ff fa2d 	bl	8000998 <HAL_GetTick>
 800153e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001540:	2202      	movs	r2, #2
 8001542:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001544:	4213      	tst	r3, r2
 8001546:	d000      	beq.n	800154a <HAL_RCC_OscConfig+0x282>
 8001548:	e703      	b.n	8001352 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154a:	f7ff fa25 	bl	8000998 <HAL_GetTick>
 800154e:	1bc0      	subs	r0, r0, r7
 8001550:	2802      	cmp	r0, #2
 8001552:	d9f5      	bls.n	8001540 <HAL_RCC_OscConfig+0x278>
 8001554:	e729      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 8001556:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001558:	439a      	bics	r2, r3
 800155a:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800155c:	f7ff fa1c 	bl	8000998 <HAL_GetTick>
 8001560:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001562:	2202      	movs	r2, #2
 8001564:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001566:	4213      	tst	r3, r2
 8001568:	d100      	bne.n	800156c <HAL_RCC_OscConfig+0x2a4>
 800156a:	e6f2      	b.n	8001352 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fa14 	bl	8000998 <HAL_GetTick>
 8001570:	1bc0      	subs	r0, r0, r7
 8001572:	2802      	cmp	r0, #2
 8001574:	d9f5      	bls.n	8001562 <HAL_RCC_OscConfig+0x29a>
 8001576:	e718      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001578:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800157a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800157e:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001580:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	421a      	tst	r2, r3
 8001584:	d104      	bne.n	8001590 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001588:	4313      	orrs	r3, r2
 800158a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800158c:	2301      	movs	r3, #1
 800158e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	4f1a      	ldr	r7, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x334>)
 8001594:	0052      	lsls	r2, r2, #1
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	4213      	tst	r3, r2
 800159a:	d008      	beq.n	80015ae <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	68ab      	ldr	r3, [r5, #8]
 80015a0:	0052      	lsls	r2, r2, #1
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12c      	bne.n	8001600 <HAL_RCC_OscConfig+0x338>
 80015a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80015a8:	4313      	orrs	r3, r2
 80015aa:	6523      	str	r3, [r4, #80]	; 0x50
 80015ac:	e04d      	b.n	800164a <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	0052      	lsls	r2, r2, #1
 80015b4:	4313      	orrs	r3, r2
 80015b6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80015b8:	f7ff f9ee 	bl	8000998 <HAL_GetTick>
 80015bc:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	0052      	lsls	r2, r2, #1
 80015c4:	4213      	tst	r3, r2
 80015c6:	d1e9      	bne.n	800159c <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c8:	f7ff f9e6 	bl	8000998 <HAL_GetTick>
 80015cc:	9b01      	ldr	r3, [sp, #4]
 80015ce:	1ac0      	subs	r0, r0, r3
 80015d0:	2864      	cmp	r0, #100	; 0x64
 80015d2:	d9f4      	bls.n	80015be <HAL_RCC_OscConfig+0x2f6>
 80015d4:	e6e9      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40021000 	.word	0x40021000
 80015dc:	ffff1fff 	.word	0xffff1fff
 80015e0:	080022dc 	.word	0x080022dc
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000008 	.word	0x20000008
 80015ec:	fffeffff 	.word	0xfffeffff
 80015f0:	fffbffff 	.word	0xfffbffff
 80015f4:	ffffe0ff 	.word	0xffffe0ff
 80015f8:	fffffeff 	.word	0xfffffeff
 80015fc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	2b00      	cmp	r3, #0
 8001602:	d116      	bne.n	8001632 <HAL_RCC_OscConfig+0x36a>
 8001604:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001606:	4a51      	ldr	r2, [pc, #324]	; (800174c <HAL_RCC_OscConfig+0x484>)
 8001608:	4013      	ands	r3, r2
 800160a:	6523      	str	r3, [r4, #80]	; 0x50
 800160c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800160e:	4a50      	ldr	r2, [pc, #320]	; (8001750 <HAL_RCC_OscConfig+0x488>)
 8001610:	4013      	ands	r3, r2
 8001612:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001614:	f7ff f9c0 	bl	8000998 <HAL_GetTick>
 8001618:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4213      	tst	r3, r2
 8001622:	d01a      	beq.n	800165a <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff f9b8 	bl	8000998 <HAL_GetTick>
 8001628:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <HAL_RCC_OscConfig+0x48c>)
 800162a:	1bc0      	subs	r0, r0, r7
 800162c:	4298      	cmp	r0, r3
 800162e:	d9f4      	bls.n	800161a <HAL_RCC_OscConfig+0x352>
 8001630:	e6bb      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001632:	21a0      	movs	r1, #160	; 0xa0
 8001634:	00c9      	lsls	r1, r1, #3
 8001636:	428b      	cmp	r3, r1
 8001638:	d118      	bne.n	800166c <HAL_RCC_OscConfig+0x3a4>
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	430b      	orrs	r3, r1
 8001642:	6523      	str	r3, [r4, #80]	; 0x50
 8001644:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001646:	431a      	orrs	r2, r3
 8001648:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800164a:	f7ff f9a5 	bl	8000998 <HAL_GetTick>
 800164e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	4213      	tst	r3, r2
 8001658:	d010      	beq.n	800167c <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 800165a:	9b00      	ldr	r3, [sp, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d000      	beq.n	8001662 <HAL_RCC_OscConfig+0x39a>
 8001660:	e67b      	b.n	800135a <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001662:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001664:	4a3c      	ldr	r2, [pc, #240]	; (8001758 <HAL_RCC_OscConfig+0x490>)
 8001666:	4013      	ands	r3, r2
 8001668:	63a3      	str	r3, [r4, #56]	; 0x38
 800166a:	e676      	b.n	800135a <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800166e:	4a37      	ldr	r2, [pc, #220]	; (800174c <HAL_RCC_OscConfig+0x484>)
 8001670:	4013      	ands	r3, r2
 8001672:	6523      	str	r3, [r4, #80]	; 0x50
 8001674:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001676:	4a36      	ldr	r2, [pc, #216]	; (8001750 <HAL_RCC_OscConfig+0x488>)
 8001678:	4013      	ands	r3, r2
 800167a:	e796      	b.n	80015aa <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff f98c 	bl	8000998 <HAL_GetTick>
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_RCC_OscConfig+0x48c>)
 8001682:	1bc0      	subs	r0, r0, r7
 8001684:	4298      	cmp	r0, r3
 8001686:	d9e3      	bls.n	8001650 <HAL_RCC_OscConfig+0x388>
 8001688:	e68f      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168a:	2e0c      	cmp	r6, #12
 800168c:	d043      	beq.n	8001716 <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168e:	4a33      	ldr	r2, [pc, #204]	; (800175c <HAL_RCC_OscConfig+0x494>)
 8001690:	2b02      	cmp	r3, #2
 8001692:	d12e      	bne.n	80016f2 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8001694:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001696:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001698:	4013      	ands	r3, r2
 800169a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800169c:	f7ff f97c 	bl	8000998 <HAL_GetTick>
 80016a0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016a2:	04bf      	lsls	r7, r7, #18
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	423b      	tst	r3, r7
 80016a8:	d11d      	bne.n	80016e6 <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016aa:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80016ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80016ae:	68e2      	ldr	r2, [r4, #12]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	492b      	ldr	r1, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016b4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b6:	400a      	ands	r2, r1
 80016b8:	4313      	orrs	r3, r2
 80016ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016bc:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016be:	4313      	orrs	r3, r2
 80016c0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	6822      	ldr	r2, [r4, #0]
 80016c6:	045b      	lsls	r3, r3, #17
 80016c8:	4313      	orrs	r3, r2
 80016ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016cc:	f7ff f964 	bl	8000998 <HAL_GetTick>
 80016d0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	4233      	tst	r3, r6
 80016d6:	d000      	beq.n	80016da <HAL_RCC_OscConfig+0x412>
 80016d8:	e643      	b.n	8001362 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff f95d 	bl	8000998 <HAL_GetTick>
 80016de:	1b40      	subs	r0, r0, r5
 80016e0:	2802      	cmp	r0, #2
 80016e2:	d9f6      	bls.n	80016d2 <HAL_RCC_OscConfig+0x40a>
 80016e4:	e661      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff f957 	bl	8000998 <HAL_GetTick>
 80016ea:	1b80      	subs	r0, r0, r6
 80016ec:	2802      	cmp	r0, #2
 80016ee:	d9d9      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3dc>
 80016f0:	e65b      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 80016f2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016f4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4013      	ands	r3, r2
 80016f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016fa:	f7ff f94d 	bl	8000998 <HAL_GetTick>
 80016fe:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001700:	04b6      	lsls	r6, r6, #18
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	4233      	tst	r3, r6
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x442>
 8001708:	e62b      	b.n	8001362 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff f945 	bl	8000998 <HAL_GetTick>
 800170e:	1b40      	subs	r0, r0, r5
 8001710:	2802      	cmp	r0, #2
 8001712:	d9f6      	bls.n	8001702 <HAL_RCC_OscConfig+0x43a>
 8001714:	e649      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
        return HAL_ERROR;
 8001716:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001718:	2b01      	cmp	r3, #1
 800171a:	d100      	bne.n	800171e <HAL_RCC_OscConfig+0x456>
 800171c:	e646      	b.n	80013ac <HAL_RCC_OscConfig+0xe4>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001720:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001724:	0252      	lsls	r2, r2, #9
 8001726:	401a      	ands	r2, r3
 8001728:	428a      	cmp	r2, r1
 800172a:	d000      	beq.n	800172e <HAL_RCC_OscConfig+0x466>
 800172c:	e627      	b.n	800137e <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800172e:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001730:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001732:	0392      	lsls	r2, r2, #14
 8001734:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	428a      	cmp	r2, r1
 8001738:	d000      	beq.n	800173c <HAL_RCC_OscConfig+0x474>
 800173a:	e620      	b.n	800137e <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800173c:	22c0      	movs	r2, #192	; 0xc0
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001742:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <HAL_RCC_OscConfig+0x482>
 8001748:	e60b      	b.n	8001362 <HAL_RCC_OscConfig+0x9a>
 800174a:	e618      	b.n	800137e <HAL_RCC_OscConfig+0xb6>
 800174c:	fffffeff 	.word	0xfffffeff
 8001750:	fffffbff 	.word	0xfffffbff
 8001754:	00001388 	.word	0x00001388
 8001758:	efffffff 	.word	0xefffffff
 800175c:	feffffff 	.word	0xfeffffff
 8001760:	ff02ffff 	.word	0xff02ffff

08001764 <HAL_RCC_ClockConfig>:
{
 8001764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001766:	1e04      	subs	r4, r0, #0
 8001768:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800176c:	2001      	movs	r0, #1
}
 800176e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	2501      	movs	r5, #1
 8001772:	4e5b      	ldr	r6, [pc, #364]	; (80018e0 <HAL_RCC_ClockConfig+0x17c>)
 8001774:	9a01      	ldr	r2, [sp, #4]
 8001776:	6833      	ldr	r3, [r6, #0]
 8001778:	402b      	ands	r3, r5
 800177a:	4293      	cmp	r3, r2
 800177c:	d331      	bcc.n	80017e2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177e:	6822      	ldr	r2, [r4, #0]
 8001780:	0793      	lsls	r3, r2, #30
 8001782:	d443      	bmi.n	800180c <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001784:	07d2      	lsls	r2, r2, #31
 8001786:	d449      	bmi.n	800181c <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001788:	2501      	movs	r5, #1
 800178a:	6833      	ldr	r3, [r6, #0]
 800178c:	9a01      	ldr	r2, [sp, #4]
 800178e:	402b      	ands	r3, r5
 8001790:	4293      	cmp	r3, r2
 8001792:	d909      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001794:	6833      	ldr	r3, [r6, #0]
 8001796:	43ab      	bics	r3, r5
 8001798:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800179a:	f7ff f8fd 	bl	8000998 <HAL_GetTick>
 800179e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a0:	6833      	ldr	r3, [r6, #0]
 80017a2:	422b      	tst	r3, r5
 80017a4:	d000      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x44>
 80017a6:	e08c      	b.n	80018c2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	6822      	ldr	r2, [r4, #0]
 80017aa:	4d4e      	ldr	r5, [pc, #312]	; (80018e4 <HAL_RCC_ClockConfig+0x180>)
 80017ac:	0753      	lsls	r3, r2, #29
 80017ae:	d500      	bpl.n	80017b2 <HAL_RCC_ClockConfig+0x4e>
 80017b0:	e08f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b2:	0712      	lsls	r2, r2, #28
 80017b4:	d506      	bpl.n	80017c4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b6:	68ea      	ldr	r2, [r5, #12]
 80017b8:	6923      	ldr	r3, [r4, #16]
 80017ba:	494b      	ldr	r1, [pc, #300]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	400a      	ands	r2, r1
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c4:	f7ff fd38 	bl	8001238 <HAL_RCC_GetSysClockFreq>
 80017c8:	68eb      	ldr	r3, [r5, #12]
 80017ca:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	0f1b      	lsrs	r3, r3, #28
 80017d0:	5cd3      	ldrb	r3, [r2, r3]
 80017d2:	4947      	ldr	r1, [pc, #284]	; (80018f0 <HAL_RCC_ClockConfig+0x18c>)
 80017d4:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d8:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	f7ff f898 	bl	8000910 <HAL_InitTick>
  if(status != HAL_OK)
 80017e0:	e7c5      	b.n	800176e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	6833      	ldr	r3, [r6, #0]
 80017e4:	9a01      	ldr	r2, [sp, #4]
 80017e6:	43ab      	bics	r3, r5
 80017e8:	4313      	orrs	r3, r2
 80017ea:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80017ec:	f7ff f8d4 	bl	8000998 <HAL_GetTick>
 80017f0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	6833      	ldr	r3, [r6, #0]
 80017f4:	9a01      	ldr	r2, [sp, #4]
 80017f6:	402b      	ands	r3, r5
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d0c0      	beq.n	800177e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fc:	f7ff f8cc 	bl	8000998 <HAL_GetTick>
 8001800:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <HAL_RCC_ClockConfig+0x194>)
 8001802:	1bc0      	subs	r0, r0, r7
 8001804:	4298      	cmp	r0, r3
 8001806:	d9f4      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8001808:	2003      	movs	r0, #3
 800180a:	e7b0      	b.n	800176e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	20f0      	movs	r0, #240	; 0xf0
 800180e:	4935      	ldr	r1, [pc, #212]	; (80018e4 <HAL_RCC_ClockConfig+0x180>)
 8001810:	68cb      	ldr	r3, [r1, #12]
 8001812:	4383      	bics	r3, r0
 8001814:	68a0      	ldr	r0, [r4, #8]
 8001816:	4303      	orrs	r3, r0
 8001818:	60cb      	str	r3, [r1, #12]
 800181a:	e7b3      	b.n	8001784 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181c:	4d31      	ldr	r5, [pc, #196]	; (80018e4 <HAL_RCC_ClockConfig+0x180>)
 800181e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001820:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	2a02      	cmp	r2, #2
 8001824:	d118      	bne.n	8001858 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001826:	039b      	lsls	r3, r3, #14
 8001828:	d5a0      	bpl.n	800176c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	2103      	movs	r1, #3
 800182c:	68eb      	ldr	r3, [r5, #12]
 800182e:	438b      	bics	r3, r1
 8001830:	4313      	orrs	r3, r2
 8001832:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001834:	f7ff f8b0 	bl	8000998 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001838:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800183a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183c:	2b02      	cmp	r3, #2
 800183e:	d118      	bne.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001840:	220c      	movs	r2, #12
 8001842:	68eb      	ldr	r3, [r5, #12]
 8001844:	4013      	ands	r3, r2
 8001846:	2b08      	cmp	r3, #8
 8001848:	d09e      	beq.n	8001788 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184a:	f7ff f8a5 	bl	8000998 <HAL_GetTick>
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_ClockConfig+0x194>)
 8001850:	1bc0      	subs	r0, r0, r7
 8001852:	4298      	cmp	r0, r3
 8001854:	d9f4      	bls.n	8001840 <HAL_RCC_ClockConfig+0xdc>
 8001856:	e7d7      	b.n	8001808 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001858:	2a03      	cmp	r2, #3
 800185a:	d102      	bne.n	8001862 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	d4e4      	bmi.n	800182a <HAL_RCC_ClockConfig+0xc6>
 8001860:	e784      	b.n	800176c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001862:	2a01      	cmp	r2, #1
 8001864:	d102      	bne.n	800186c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001866:	075b      	lsls	r3, r3, #29
 8001868:	d4df      	bmi.n	800182a <HAL_RCC_ClockConfig+0xc6>
 800186a:	e77f      	b.n	800176c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800186c:	059b      	lsls	r3, r3, #22
 800186e:	d4dc      	bmi.n	800182a <HAL_RCC_ClockConfig+0xc6>
 8001870:	e77c      	b.n	800176c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001872:	2b03      	cmp	r3, #3
 8001874:	d10b      	bne.n	800188e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001876:	220c      	movs	r2, #12
 8001878:	68eb      	ldr	r3, [r5, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	4293      	cmp	r3, r2
 800187e:	d083      	beq.n	8001788 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7ff f88a 	bl	8000998 <HAL_GetTick>
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_RCC_ClockConfig+0x194>)
 8001886:	1bc0      	subs	r0, r0, r7
 8001888:	4298      	cmp	r0, r3
 800188a:	d9f4      	bls.n	8001876 <HAL_RCC_ClockConfig+0x112>
 800188c:	e7bc      	b.n	8001808 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800188e:	2b01      	cmp	r3, #1
 8001890:	d011      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001892:	220c      	movs	r2, #12
 8001894:	68eb      	ldr	r3, [r5, #12]
 8001896:	4213      	tst	r3, r2
 8001898:	d100      	bne.n	800189c <HAL_RCC_ClockConfig+0x138>
 800189a:	e775      	b.n	8001788 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff f87c 	bl	8000998 <HAL_GetTick>
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_RCC_ClockConfig+0x194>)
 80018a2:	1bc0      	subs	r0, r0, r7
 80018a4:	4298      	cmp	r0, r3
 80018a6:	d9f4      	bls.n	8001892 <HAL_RCC_ClockConfig+0x12e>
 80018a8:	e7ae      	b.n	8001808 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018aa:	f7ff f875 	bl	8000998 <HAL_GetTick>
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_ClockConfig+0x194>)
 80018b0:	1bc0      	subs	r0, r0, r7
 80018b2:	4298      	cmp	r0, r3
 80018b4:	d8a8      	bhi.n	8001808 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b6:	220c      	movs	r2, #12
 80018b8:	68eb      	ldr	r3, [r5, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d1f4      	bne.n	80018aa <HAL_RCC_ClockConfig+0x146>
 80018c0:	e762      	b.n	8001788 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c2:	f7ff f869 	bl	8000998 <HAL_GetTick>
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_ClockConfig+0x194>)
 80018c8:	1bc0      	subs	r0, r0, r7
 80018ca:	4298      	cmp	r0, r3
 80018cc:	d800      	bhi.n	80018d0 <HAL_RCC_ClockConfig+0x16c>
 80018ce:	e767      	b.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
 80018d0:	e79a      	b.n	8001808 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d2:	68eb      	ldr	r3, [r5, #12]
 80018d4:	4909      	ldr	r1, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x198>)
 80018d6:	400b      	ands	r3, r1
 80018d8:	68e1      	ldr	r1, [r4, #12]
 80018da:	430b      	orrs	r3, r1
 80018dc:	60eb      	str	r3, [r5, #12]
 80018de:	e768      	b.n	80017b2 <HAL_RCC_ClockConfig+0x4e>
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	ffffc7ff 	.word	0xffffc7ff
 80018ec:	080022dc 	.word	0x080022dc
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000008 	.word	0x20000008
 80018f8:	00001388 	.word	0x00001388
 80018fc:	fffff8ff 	.word	0xfffff8ff

08001900 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4905      	ldr	r1, [pc, #20]	; (800191c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001908:	055b      	lsls	r3, r3, #21
 800190a:	0f5b      	lsrs	r3, r3, #29
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	6810      	ldr	r0, [r2, #0]
 8001910:	40d8      	lsrs	r0, r3
}
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000
 8001918:	20000000 	.word	0x20000000
 800191c:	080022ec 	.word	0x080022ec

08001920 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	4905      	ldr	r1, [pc, #20]	; (800193c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001928:	049b      	lsls	r3, r3, #18
 800192a:	0f5b      	lsrs	r3, r3, #29
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	6810      	ldr	r0, [r2, #0]
 8001930:	40d8      	lsrs	r0, r3
}
 8001932:	4770      	bx	lr
 8001934:	40021000 	.word	0x40021000
 8001938:	20000000 	.word	0x20000000
 800193c:	080022ec 	.word	0x080022ec

08001940 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001940:	6803      	ldr	r3, [r0, #0]
{
 8001942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001944:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001946:	069b      	lsls	r3, r3, #26
 8001948:	d52b      	bpl.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 800194c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4c51      	ldr	r4, [pc, #324]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001950:	055b      	lsls	r3, r3, #21
 8001952:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8001954:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001956:	421a      	tst	r2, r3
 8001958:	d104      	bne.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800195c:	4313      	orrs	r3, r2
 800195e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001960:	2301      	movs	r3, #1
 8001962:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	2780      	movs	r7, #128	; 0x80
 8001966:	4e4c      	ldr	r6, [pc, #304]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001968:	007f      	lsls	r7, r7, #1
 800196a:	6833      	ldr	r3, [r6, #0]
 800196c:	423b      	tst	r3, r7
 800196e:	d03f      	beq.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001970:	20c0      	movs	r0, #192	; 0xc0
 8001972:	22c0      	movs	r2, #192	; 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001974:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001976:	686b      	ldr	r3, [r5, #4]
 8001978:	0380      	lsls	r0, r0, #14
 800197a:	4059      	eors	r1, r3
 800197c:	0292      	lsls	r2, r2, #10
 800197e:	4201      	tst	r1, r0
 8001980:	d147      	bne.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001982:	6d20      	ldr	r0, [r4, #80]	; 0x50

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001984:	6829      	ldr	r1, [r5, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001986:	0006      	movs	r6, r0
 8001988:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800198a:	4210      	tst	r0, r2
 800198c:	d14a      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800198e:	682b      	ldr	r3, [r5, #0]
 8001990:	069b      	lsls	r3, r3, #26
 8001992:	d45b      	bmi.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d103      	bne.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800199c:	4a3f      	ldr	r2, [pc, #252]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800199e:	4013      	ands	r3, r2
 80019a0:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	079a      	lsls	r2, r3, #30
 80019a6:	d506      	bpl.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019a8:	200c      	movs	r0, #12
 80019aa:	493a      	ldr	r1, [pc, #232]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80019ac:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80019ae:	4382      	bics	r2, r0
 80019b0:	68a8      	ldr	r0, [r5, #8]
 80019b2:	4302      	orrs	r2, r0
 80019b4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80019b6:	075a      	lsls	r2, r3, #29
 80019b8:	d506      	bpl.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80019ba:	4936      	ldr	r1, [pc, #216]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80019bc:	4838      	ldr	r0, [pc, #224]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019be:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80019c0:	4002      	ands	r2, r0
 80019c2:	68e8      	ldr	r0, [r5, #12]
 80019c4:	4302      	orrs	r2, r0
 80019c6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019c8:	071a      	lsls	r2, r3, #28
 80019ca:	d506      	bpl.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019cc:	4931      	ldr	r1, [pc, #196]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80019ce:	4835      	ldr	r0, [pc, #212]	; (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019d0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80019d2:	4002      	ands	r2, r0
 80019d4:	6928      	ldr	r0, [r5, #16]
 80019d6:	4302      	orrs	r2, r0
 80019d8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80019da:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	d517      	bpl.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80019e0:	4a2c      	ldr	r2, [pc, #176]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80019e2:	4931      	ldr	r1, [pc, #196]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80019e6:	400b      	ands	r3, r1
 80019e8:	6969      	ldr	r1, [r5, #20]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	e00f      	b.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f0:	6833      	ldr	r3, [r6, #0]
 80019f2:	433b      	orrs	r3, r7
 80019f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80019f6:	f7fe ffcf 	bl	8000998 <HAL_GetTick>
 80019fa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	6833      	ldr	r3, [r6, #0]
 80019fe:	423b      	tst	r3, r7
 8001a00:	d1b6      	bne.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7fe ffc9 	bl	8000998 <HAL_GetTick>
 8001a06:	9b01      	ldr	r3, [sp, #4]
 8001a08:	1ac0      	subs	r0, r0, r3
 8001a0a:	2864      	cmp	r0, #100	; 0x64
 8001a0c:	d9f6      	bls.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8001a0e:	2003      	movs	r0, #3
}
 8001a10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001a12:	0019      	movs	r1, r3
 8001a14:	4011      	ands	r1, r2
 8001a16:	4291      	cmp	r1, r2
 8001a18:	d1b3      	bne.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001a1a:	6821      	ldr	r1, [r4, #0]
          return HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001a1e:	0389      	lsls	r1, r1, #14
 8001a20:	d5af      	bpl.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8001a22:	e7f5      	b.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001a24:	4013      	ands	r3, r2
 8001a26:	42b3      	cmp	r3, r6
 8001a28:	d0b1      	beq.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a2a:	0689      	lsls	r1, r1, #26
 8001a2c:	d5b2      	bpl.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a2e:	2180      	movs	r1, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001a30:	6d23      	ldr	r3, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a32:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001a34:	0309      	lsls	r1, r1, #12
 8001a36:	4301      	orrs	r1, r0
 8001a38:	6521      	str	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3e:	481c      	ldr	r0, [pc, #112]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x170>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001a40:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a42:	4001      	ands	r1, r0
 8001a44:	6521      	str	r1, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001a46:	6522      	str	r2, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001a48:	05db      	lsls	r3, r3, #23
 8001a4a:	d412      	bmi.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a4c:	6869      	ldr	r1, [r5, #4]
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	000a      	movs	r2, r1
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	401a      	ands	r2, r3
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d107      	bne.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	4815      	ldr	r0, [pc, #84]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8001a5e:	4003      	ands	r3, r0
 8001a60:	20c0      	movs	r0, #192	; 0xc0
 8001a62:	0380      	lsls	r0, r0, #14
 8001a64:	4001      	ands	r1, r0
 8001a66:	430b      	orrs	r3, r1
 8001a68:	6023      	str	r3, [r4, #0]
 8001a6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	6522      	str	r2, [r4, #80]	; 0x50
 8001a70:	e790      	b.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8001a72:	f7fe ff91 	bl	8000998 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a76:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001a78:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a7a:	00bf      	lsls	r7, r7, #2
 8001a7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a7e:	423b      	tst	r3, r7
 8001a80:	d000      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8001a82:	e784      	b.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7fe ff88 	bl	8000998 <HAL_GetTick>
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001a8a:	1b80      	subs	r0, r0, r6
 8001a8c:	4298      	cmp	r0, r3
 8001a8e:	d9f5      	bls.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001a90:	e7bd      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	efffffff 	.word	0xefffffff
 8001aa0:	fffff3ff 	.word	0xfffff3ff
 8001aa4:	ffffcfff 	.word	0xffffcfff
 8001aa8:	fff3ffff 	.word	0xfff3ffff
 8001aac:	fffcffff 	.word	0xfffcffff
 8001ab0:	fff7ffff 	.word	0xfff7ffff
 8001ab4:	ffcfffff 	.word	0xffcfffff
 8001ab8:	00001388 	.word	0x00001388

08001abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001abc:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001abe:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ac8:	6801      	ldr	r1, [r0, #0]
 8001aca:	4d12      	ldr	r5, [pc, #72]	; (8001b14 <UART_EndRxTransfer+0x58>)
 8001acc:	680b      	ldr	r3, [r1, #0]
 8001ace:	402b      	ands	r3, r5
 8001ad0:	600b      	str	r3, [r1, #0]
 8001ad2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ad6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ada:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ade:	6801      	ldr	r1, [r0, #0]
 8001ae0:	688b      	ldr	r3, [r1, #8]
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
 8001ae6:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001aea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d10a      	bne.n	8001b06 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001af0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001af4:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001af8:	2410      	movs	r4, #16
 8001afa:	6802      	ldr	r2, [r0, #0]
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	43a3      	bics	r3, r4
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b06:	2220      	movs	r2, #32
 8001b08:	1d03      	adds	r3, r0, #4
 8001b0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001b10:	6683      	str	r3, [r0, #104]	; 0x68
}
 8001b12:	bd30      	pop	{r4, r5, pc}
 8001b14:	fffffedf 	.word	0xfffffedf

08001b18 <HAL_UART_TxCpltCallback>:
 8001b18:	4770      	bx	lr

08001b1a <HAL_UART_ErrorCallback>:
 8001b1a:	4770      	bx	lr

08001b1c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001b1c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	0002      	movs	r2, r0
{
 8001b22:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001b24:	325a      	adds	r2, #90	; 0x5a
 8001b26:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001b28:	3a08      	subs	r2, #8
 8001b2a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001b2c:	f7ff fff5 	bl	8001b1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001b30:	bd10      	pop	{r4, pc}

08001b32 <HAL_UARTEx_RxEventCallback>:
}
 8001b32:	4770      	bx	lr

08001b34 <HAL_UART_IRQHandler>:
{
 8001b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b36:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b38:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001b3a:	4bab      	ldr	r3, [pc, #684]	; (8001de8 <HAL_UART_IRQHandler+0x2b4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b3c:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b3e:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b40:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 8001b42:	4219      	tst	r1, r3
 8001b44:	d10b      	bne.n	8001b5e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b46:	2320      	movs	r3, #32
 8001b48:	4219      	tst	r1, r3
 8001b4a:	d100      	bne.n	8001b4e <HAL_UART_IRQHandler+0x1a>
 8001b4c:	e080      	b.n	8001c50 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b4e:	421e      	tst	r6, r3
 8001b50:	d100      	bne.n	8001b54 <HAL_UART_IRQHandler+0x20>
 8001b52:	e07d      	b.n	8001c50 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8001b54:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      huart->TxISR(huart);
 8001b56:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d16f      	bne.n	8001c3c <HAL_UART_IRQHandler+0x108>
 8001b5c:	e06f      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001b5e:	2301      	movs	r3, #1
 8001b60:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001b62:	4aa2      	ldr	r2, [pc, #648]	; (8001dec <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001b64:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001b66:	4032      	ands	r2, r6
 8001b68:	433a      	orrs	r2, r7
 8001b6a:	d100      	bne.n	8001b6e <HAL_UART_IRQHandler+0x3a>
 8001b6c:	e070      	b.n	8001c50 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001b6e:	0025      	movs	r5, r4
 8001b70:	3508      	adds	r5, #8
 8001b72:	4219      	tst	r1, r3
 8001b74:	d005      	beq.n	8001b82 <HAL_UART_IRQHandler+0x4e>
 8001b76:	05f2      	lsls	r2, r6, #23
 8001b78:	d503      	bpl.n	8001b82 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001b7a:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b7c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b82:	2302      	movs	r3, #2
 8001b84:	4219      	tst	r1, r3
 8001b86:	d006      	beq.n	8001b96 <HAL_UART_IRQHandler+0x62>
 8001b88:	2f00      	cmp	r7, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001b8c:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b8e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001b90:	18db      	adds	r3, r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b96:	2304      	movs	r3, #4
 8001b98:	4219      	tst	r1, r3
 8001b9a:	d006      	beq.n	8001baa <HAL_UART_IRQHandler+0x76>
 8001b9c:	2f00      	cmp	r7, #0
 8001b9e:	d004      	beq.n	8001baa <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001ba0:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ba2:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001ba4:	3b02      	subs	r3, #2
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001baa:	2308      	movs	r3, #8
 8001bac:	4219      	tst	r1, r3
 8001bae:	d007      	beq.n	8001bc0 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	4032      	ands	r2, r6
 8001bb4:	433a      	orrs	r2, r7
 8001bb6:	d003      	beq.n	8001bc0 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001bb8:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bba:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4219      	tst	r1, r3
 8001bc6:	d006      	beq.n	8001bd6 <HAL_UART_IRQHandler+0xa2>
 8001bc8:	0172      	lsls	r2, r6, #5
 8001bca:	d504      	bpl.n	8001bd6 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bcc:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bd6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d030      	beq.n	8001c3e <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001bdc:	2320      	movs	r3, #32
 8001bde:	4219      	tst	r1, r3
 8001be0:	d006      	beq.n	8001bf0 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001be2:	421e      	tst	r6, r3
 8001be4:	d004      	beq.n	8001bf0 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8001be6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8001bec:	0020      	movs	r0, r4
 8001bee:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001bf0:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8001bf2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001bf4:	2740      	movs	r7, #64	; 0x40
 8001bf6:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001bf8:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001bfa:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001bfc:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8001bfe:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c00:	431e      	orrs	r6, r3
 8001c02:	d021      	beq.n	8001c48 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8001c04:	f7ff ff5a 	bl	8001abc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	423b      	tst	r3, r7
 8001c0e:	d017      	beq.n	8001c40 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c10:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c14:	2301      	movs	r3, #1
 8001c16:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c1a:	6822      	ldr	r2, [r4, #0]
 8001c1c:	6893      	ldr	r3, [r2, #8]
 8001c1e:	43bb      	bics	r3, r7
 8001c20:	6093      	str	r3, [r2, #8]
 8001c22:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8001c26:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d009      	beq.n	8001c40 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c2c:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <HAL_UART_IRQHandler+0x2bc>)
 8001c2e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c30:	f7fe ff7e 	bl	8000b30 <HAL_DMA_Abort_IT>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c38:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001c3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c3c:	4798      	blx	r3
}
 8001c3e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001c40:	0020      	movs	r0, r4
 8001c42:	f7ff ff6a 	bl	8001b1a <HAL_UART_ErrorCallback>
 8001c46:	e7fa      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8001c48:	f7ff ff67 	bl	8001b1a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4c:	67ee      	str	r6, [r5, #124]	; 0x7c
 8001c4e:	e7f6      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c50:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d000      	beq.n	8001c58 <HAL_UART_IRQHandler+0x124>
 8001c56:	e09a      	b.n	8001d8e <HAL_UART_IRQHandler+0x25a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001c58:	2210      	movs	r2, #16
 8001c5a:	4211      	tst	r1, r2
 8001c5c:	d100      	bne.n	8001c60 <HAL_UART_IRQHandler+0x12c>
 8001c5e:	e096      	b.n	8001d8e <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001c60:	4216      	tst	r6, r2
 8001c62:	d100      	bne.n	8001c66 <HAL_UART_IRQHandler+0x132>
 8001c64:	e093      	b.n	8001d8e <HAL_UART_IRQHandler+0x25a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001c66:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c68:	6881      	ldr	r1, [r0, #8]
 8001c6a:	2640      	movs	r6, #64	; 0x40
 8001c6c:	000f      	movs	r7, r1
 8001c6e:	4037      	ands	r7, r6
 8001c70:	4231      	tst	r1, r6
 8001c72:	d053      	beq.n	8001d1c <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001c74:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001c76:	6808      	ldr	r0, [r1, #0]
 8001c78:	6841      	ldr	r1, [r0, #4]
 8001c7a:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8001c7c:	2900      	cmp	r1, #0
 8001c7e:	d0de      	beq.n	8001c3e <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001c80:	0025      	movs	r5, r4
 8001c82:	3558      	adds	r5, #88	; 0x58
 8001c84:	882d      	ldrh	r5, [r5, #0]
 8001c86:	428d      	cmp	r5, r1
 8001c88:	d9d9      	bls.n	8001c3e <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 8001c8a:	0025      	movs	r5, r4
 8001c8c:	355a      	adds	r5, #90	; 0x5a
 8001c8e:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001c90:	6801      	ldr	r1, [r0, #0]
 8001c92:	2020      	movs	r0, #32
 8001c94:	000d      	movs	r5, r1
 8001c96:	4005      	ands	r5, r0
 8001c98:	9501      	str	r5, [sp, #4]
 8001c9a:	4201      	tst	r1, r0
 8001c9c:	d130      	bne.n	8001d00 <HAL_UART_IRQHandler+0x1cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c9e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ca2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ca6:	6825      	ldr	r5, [r4, #0]
 8001ca8:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_UART_IRQHandler+0x2c0>)
 8001caa:	6829      	ldr	r1, [r5, #0]
 8001cac:	4011      	ands	r1, r2
 8001cae:	6029      	str	r1, [r5, #0]
 8001cb0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cb4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cbc:	6825      	ldr	r5, [r4, #0]
 8001cbe:	68a9      	ldr	r1, [r5, #8]
 8001cc0:	4399      	bics	r1, r3
 8001cc2:	60a9      	str	r1, [r5, #8]
 8001cc4:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cc8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ccc:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cd0:	0021      	movs	r1, r4
 8001cd2:	c980      	ldmia	r1!, {r7}
 8001cd4:	68bd      	ldr	r5, [r7, #8]
 8001cd6:	43b5      	bics	r5, r6
 8001cd8:	60bd      	str	r5, [r7, #8]
 8001cda:	f38c 8810 	msr	PRIMASK, ip
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cde:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8001ce0:	67c8      	str	r0, [r1, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ce2:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cec:	2210      	movs	r2, #16
 8001cee:	6821      	ldr	r1, [r4, #0]
 8001cf0:	680b      	ldr	r3, [r1, #0]
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
 8001cf6:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001cfa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001cfc:	f7fe fef8 	bl	8000af0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d00:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d02:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d04:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d06:	0023      	movs	r3, r4
 8001d08:	3258      	adds	r2, #88	; 0x58
 8001d0a:	335a      	adds	r3, #90	; 0x5a
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	8811      	ldrh	r1, [r2, #0]
 8001d10:	1ac9      	subs	r1, r1, r3
 8001d12:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001d14:	0020      	movs	r0, r4
 8001d16:	f7ff ff0c 	bl	8001b32 <HAL_UARTEx_RxEventCallback>
 8001d1a:	e790      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d1c:	0025      	movs	r5, r4
 8001d1e:	0021      	movs	r1, r4
 8001d20:	355a      	adds	r5, #90	; 0x5a
 8001d22:	8828      	ldrh	r0, [r5, #0]
      if ((huart->RxXferCount > 0U)
 8001d24:	882d      	ldrh	r5, [r5, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d26:	3158      	adds	r1, #88	; 0x58
 8001d28:	8809      	ldrh	r1, [r1, #0]
 8001d2a:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8001d2c:	2d00      	cmp	r5, #0
 8001d2e:	d100      	bne.n	8001d32 <HAL_UART_IRQHandler+0x1fe>
 8001d30:	e785      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d32:	1a09      	subs	r1, r1, r0
 8001d34:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8001d36:	2900      	cmp	r1, #0
 8001d38:	d100      	bne.n	8001d3c <HAL_UART_IRQHandler+0x208>
 8001d3a:	e780      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d3c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d40:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d44:	6825      	ldr	r5, [r4, #0]
 8001d46:	4a2c      	ldr	r2, [pc, #176]	; (8001df8 <HAL_UART_IRQHandler+0x2c4>)
 8001d48:	6828      	ldr	r0, [r5, #0]
 8001d4a:	4010      	ands	r0, r2
 8001d4c:	6028      	str	r0, [r5, #0]
 8001d4e:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d52:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d56:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	c840      	ldmia	r0!, {r6}
 8001d5e:	68b5      	ldr	r5, [r6, #8]
 8001d60:	439d      	bics	r5, r3
 8001d62:	60b5      	str	r5, [r6, #8]
 8001d64:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8001d68:	2520      	movs	r5, #32
 8001d6a:	67c5      	str	r5, [r0, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d6c:	6627      	str	r7, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8001d6e:	66a7      	str	r7, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d70:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d74:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d78:	6820      	ldr	r0, [r4, #0]
 8001d7a:	3232      	adds	r2, #50	; 0x32
 8001d7c:	6803      	ldr	r3, [r0, #0]
 8001d7e:	32ff      	adds	r2, #255	; 0xff
 8001d80:	4393      	bics	r3, r2
 8001d82:	6003      	str	r3, [r0, #0]
 8001d84:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	6663      	str	r3, [r4, #100]	; 0x64
 8001d8c:	e7c2      	b.n	8001d14 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	035b      	lsls	r3, r3, #13
 8001d92:	4219      	tst	r1, r3
 8001d94:	d006      	beq.n	8001da4 <HAL_UART_IRQHandler+0x270>
 8001d96:	026d      	lsls	r5, r5, #9
 8001d98:	d504      	bpl.n	8001da4 <HAL_UART_IRQHandler+0x270>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001d9a:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001d9c:	0020      	movs	r0, r4
 8001d9e:	f000 fa63 	bl	8002268 <HAL_UARTEx_WakeupCallback>
    return;
 8001da2:	e74c      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	4219      	tst	r1, r3
 8001da8:	d003      	beq.n	8001db2 <HAL_UART_IRQHandler+0x27e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001daa:	421e      	tst	r6, r3
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_IRQHandler+0x27e>
    if (huart->TxISR != NULL)
 8001dae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001db0:	e6d1      	b.n	8001b56 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001db2:	2240      	movs	r2, #64	; 0x40
 8001db4:	4211      	tst	r1, r2
 8001db6:	d100      	bne.n	8001dba <HAL_UART_IRQHandler+0x286>
 8001db8:	e741      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
 8001dba:	4216      	tst	r6, r2
 8001dbc:	d100      	bne.n	8001dc0 <HAL_UART_IRQHandler+0x28c>
 8001dbe:	e73e      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dc0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001dca:	6821      	ldr	r1, [r4, #0]
 8001dcc:	680b      	ldr	r3, [r1, #0]
 8001dce:	4393      	bics	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
 8001dd2:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001dda:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001ddc:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8001dde:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8001de0:	f7ff fe9a 	bl	8001b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001de4:	e72b      	b.n	8001c3e <HAL_UART_IRQHandler+0x10a>
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	0000080f 	.word	0x0000080f
 8001dec:	04000120 	.word	0x04000120
 8001df0:	08001b1d 	.word	0x08001b1d
 8001df4:	fffffeff 	.word	0xfffffeff
 8001df8:	fffffedf 	.word	0xfffffedf

08001dfc <UART_SetConfig>:
{
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e00:	6925      	ldr	r5, [r4, #16]
 8001e02:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e04:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e06:	4329      	orrs	r1, r5
 8001e08:	6965      	ldr	r5, [r4, #20]
 8001e0a:	69c3      	ldr	r3, [r0, #28]
 8001e0c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e0e:	6810      	ldr	r0, [r2, #0]
 8001e10:	4d69      	ldr	r5, [pc, #420]	; (8001fb8 <UART_SetConfig+0x1bc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e12:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e14:	4028      	ands	r0, r5
 8001e16:	4301      	orrs	r1, r0
 8001e18:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e1a:	6851      	ldr	r1, [r2, #4]
 8001e1c:	4867      	ldr	r0, [pc, #412]	; (8001fbc <UART_SetConfig+0x1c0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e1e:	4d68      	ldr	r5, [pc, #416]	; (8001fc0 <UART_SetConfig+0x1c4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e20:	4001      	ands	r1, r0
 8001e22:	68e0      	ldr	r0, [r4, #12]
 8001e24:	4301      	orrs	r1, r0
 8001e26:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e28:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e2a:	42aa      	cmp	r2, r5
 8001e2c:	d001      	beq.n	8001e32 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8001e2e:	6a21      	ldr	r1, [r4, #32]
 8001e30:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e32:	6891      	ldr	r1, [r2, #8]
 8001e34:	4e63      	ldr	r6, [pc, #396]	; (8001fc4 <UART_SetConfig+0x1c8>)
 8001e36:	4031      	ands	r1, r6
 8001e38:	4301      	orrs	r1, r0
 8001e3a:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e3c:	4962      	ldr	r1, [pc, #392]	; (8001fc8 <UART_SetConfig+0x1cc>)
 8001e3e:	428a      	cmp	r2, r1
 8001e40:	d113      	bne.n	8001e6a <UART_SetConfig+0x6e>
 8001e42:	250c      	movs	r5, #12
 8001e44:	4a61      	ldr	r2, [pc, #388]	; (8001fcc <UART_SetConfig+0x1d0>)
 8001e46:	4862      	ldr	r0, [pc, #392]	; (8001fd0 <UART_SetConfig+0x1d4>)
 8001e48:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001e4a:	4029      	ands	r1, r5
 8001e4c:	5c40      	ldrb	r0, [r0, r1]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	0209      	lsls	r1, r1, #8
 8001e52:	428b      	cmp	r3, r1
 8001e54:	d000      	beq.n	8001e58 <UART_SetConfig+0x5c>
 8001e56:	e07e      	b.n	8001f56 <UART_SetConfig+0x15a>
    switch (clocksource)
 8001e58:	2808      	cmp	r0, #8
 8001e5a:	d819      	bhi.n	8001e90 <UART_SetConfig+0x94>
 8001e5c:	f7fe f95e 	bl	800011c <__gnu_thumb1_case_uqi>
 8001e60:	18595651 	.word	0x18595651
 8001e64:	18181878 	.word	0x18181878
 8001e68:	63          	.byte	0x63
 8001e69:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e6a:	42aa      	cmp	r2, r5
 8001e6c:	d000      	beq.n	8001e70 <UART_SetConfig+0x74>
 8001e6e:	e09c      	b.n	8001faa <UART_SetConfig+0x1ae>
 8001e70:	21c0      	movs	r1, #192	; 0xc0
 8001e72:	2080      	movs	r0, #128	; 0x80
 8001e74:	4a55      	ldr	r2, [pc, #340]	; (8001fcc <UART_SetConfig+0x1d0>)
 8001e76:	0109      	lsls	r1, r1, #4
 8001e78:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001e7a:	0100      	lsls	r0, r0, #4
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	4283      	cmp	r3, r0
 8001e80:	d016      	beq.n	8001eb0 <UART_SetConfig+0xb4>
 8001e82:	d807      	bhi.n	8001e94 <UART_SetConfig+0x98>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <UART_SetConfig+0xa2>
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	00d2      	lsls	r2, r2, #3
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d035      	beq.n	8001efc <UART_SetConfig+0x100>
    switch (clocksource)
 8001e90:	2001      	movs	r0, #1
 8001e92:	e009      	b.n	8001ea8 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e94:	428b      	cmp	r3, r1
 8001e96:	d1fb      	bne.n	8001e90 <UART_SetConfig+0x94>
 8001e98:	2080      	movs	r0, #128	; 0x80
 8001e9a:	0200      	lsls	r0, r0, #8
 8001e9c:	e012      	b.n	8001ec4 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e9e:	f7ff fd2f 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d10e      	bne.n	8001ec4 <UART_SetConfig+0xc8>
 8001ea6:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8001eac:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8001eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001eb0:	2310      	movs	r3, #16
 8001eb2:	6810      	ldr	r0, [r2, #0]
 8001eb4:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001eb6:	4243      	negs	r3, r0
 8001eb8:	4158      	adcs	r0, r3
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <UART_SetConfig+0x1d8>)
 8001ebc:	4240      	negs	r0, r0
 8001ebe:	4018      	ands	r0, r3
 8001ec0:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <UART_SetConfig+0x1dc>)
 8001ec2:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	6863      	ldr	r3, [r4, #4]
 8001ec8:	435a      	muls	r2, r3
 8001eca:	4282      	cmp	r2, r0
 8001ecc:	d8e0      	bhi.n	8001e90 <UART_SetConfig+0x94>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001ece:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001ed0:	4282      	cmp	r2, r0
 8001ed2:	d3dd      	bcc.n	8001e90 <UART_SetConfig+0x94>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001ed4:	2700      	movs	r7, #0
 8001ed6:	0e02      	lsrs	r2, r0, #24
 8001ed8:	0201      	lsls	r1, r0, #8
 8001eda:	085e      	lsrs	r6, r3, #1
 8001edc:	1989      	adds	r1, r1, r6
 8001ede:	417a      	adcs	r2, r7
 8001ee0:	0008      	movs	r0, r1
 8001ee2:	0011      	movs	r1, r2
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	003b      	movs	r3, r7
 8001ee8:	f7fe f9ae 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001eec:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <UART_SetConfig+0x1e0>)
 8001eee:	18c2      	adds	r2, r0, r3
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <UART_SetConfig+0x1e4>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d8cc      	bhi.n	8001e90 <UART_SetConfig+0x94>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	60d8      	str	r0, [r3, #12]
 8001efa:	e7d4      	b.n	8001ea6 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8001efc:	f7ff f99c 	bl	8001238 <HAL_RCC_GetSysClockFreq>
        break;
 8001f00:	e7cf      	b.n	8001ea2 <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f02:	f7ff fcfd 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8001f06:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8001f08:	d0cd      	beq.n	8001ea6 <UART_SetConfig+0xaa>
 8001f0a:	e00c      	b.n	8001f26 <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f0c:	f7ff fd08 	bl	8001920 <HAL_RCC_GetPCLK2Freq>
 8001f10:	e7f9      	b.n	8001f06 <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f12:	6813      	ldr	r3, [r2, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	4013      	ands	r3, r2
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001f18:	425a      	negs	r2, r3
 8001f1a:	4153      	adcs	r3, r2
 8001f1c:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <UART_SetConfig+0x1d8>)
 8001f1e:	425b      	negs	r3, r3
 8001f20:	4013      	ands	r3, r2
 8001f22:	4a2d      	ldr	r2, [pc, #180]	; (8001fd8 <UART_SetConfig+0x1dc>)
 8001f24:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f26:	6861      	ldr	r1, [r4, #4]
 8001f28:	0058      	lsls	r0, r3, #1
 8001f2a:	084b      	lsrs	r3, r1, #1
 8001f2c:	18c0      	adds	r0, r0, r3
 8001f2e:	f7fe f8ff 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f32:	0002      	movs	r2, r0
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <UART_SetConfig+0x1e8>)
 8001f36:	3a10      	subs	r2, #16
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d8a9      	bhi.n	8001e90 <UART_SetConfig+0x94>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f40:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f42:	439a      	bics	r2, r3
 8001f44:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f46:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	4303      	orrs	r3, r0
 8001f4c:	60d3      	str	r3, [r2, #12]
 8001f4e:	e7aa      	b.n	8001ea6 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8001f50:	f7ff f972 	bl	8001238 <HAL_RCC_GetSysClockFreq>
 8001f54:	e7d7      	b.n	8001f06 <UART_SetConfig+0x10a>
    switch (clocksource)
 8001f56:	2808      	cmp	r0, #8
 8001f58:	d89a      	bhi.n	8001e90 <UART_SetConfig+0x94>
 8001f5a:	f7fe f8d5 	bl	8000108 <__gnu_thumb1_case_sqi>
 8001f5e:	0a05      	.short	0x0a05
 8001f60:	9920990d 	.word	0x9920990d
 8001f64:	9999      	.short	0x9999
 8001f66:	23          	.byte	0x23
 8001f67:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f68:	f7ff fcca 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d09a      	beq.n	8001ea6 <UART_SetConfig+0xaa>
 8001f70:	e00c      	b.n	8001f8c <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f72:	f7ff fcd5 	bl	8001920 <HAL_RCC_GetPCLK2Freq>
        break;
 8001f76:	e7f9      	b.n	8001f6c <UART_SetConfig+0x170>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f78:	2310      	movs	r3, #16
 8001f7a:	6810      	ldr	r0, [r2, #0]
 8001f7c:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001f7e:	4243      	negs	r3, r0
 8001f80:	4158      	adcs	r0, r3
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <UART_SetConfig+0x1d8>)
 8001f84:	4240      	negs	r0, r0
 8001f86:	4018      	ands	r0, r3
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <UART_SetConfig+0x1dc>)
 8001f8a:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f8c:	6861      	ldr	r1, [r4, #4]
 8001f8e:	084b      	lsrs	r3, r1, #1
 8001f90:	1818      	adds	r0, r3, r0
 8001f92:	f7fe f8cd 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f96:	0002      	movs	r2, r0
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <UART_SetConfig+0x1e8>)
 8001f9a:	3a10      	subs	r2, #16
 8001f9c:	e7a9      	b.n	8001ef2 <UART_SetConfig+0xf6>
        pclk = HAL_RCC_GetSysClockFreq();
 8001f9e:	f7ff f94b 	bl	8001238 <HAL_RCC_GetSysClockFreq>
        break;
 8001fa2:	e7e3      	b.n	8001f6c <UART_SetConfig+0x170>
    switch (clocksource)
 8001fa4:	2080      	movs	r0, #128	; 0x80
 8001fa6:	0200      	lsls	r0, r0, #8
 8001fa8:	e7f0      	b.n	8001f8c <UART_SetConfig+0x190>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	2001      	movs	r0, #1
 8001fae:	0212      	lsls	r2, r2, #8
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d100      	bne.n	8001fb6 <UART_SetConfig+0x1ba>
 8001fb4:	e778      	b.n	8001ea8 <UART_SetConfig+0xac>
 8001fb6:	e76b      	b.n	8001e90 <UART_SetConfig+0x94>
 8001fb8:	efff69f3 	.word	0xefff69f3
 8001fbc:	ffffcfff 	.word	0xffffcfff
 8001fc0:	40004800 	.word	0x40004800
 8001fc4:	fffff4ff 	.word	0xfffff4ff
 8001fc8:	40004400 	.word	0x40004400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	080022fd 	.word	0x080022fd
 8001fd4:	00b71b00 	.word	0x00b71b00
 8001fd8:	003d0900 	.word	0x003d0900
 8001fdc:	fffffd00 	.word	0xfffffd00
 8001fe0:	000ffcff 	.word	0x000ffcff
 8001fe4:	0000ffef 	.word	0x0000ffef

08001fe8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001fea:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fec:	07da      	lsls	r2, r3, #31
 8001fee:	d506      	bpl.n	8001ffe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ff0:	6801      	ldr	r1, [r0, #0]
 8001ff2:	4c28      	ldr	r4, [pc, #160]	; (8002094 <UART_AdvFeatureConfig+0xac>)
 8001ff4:	684a      	ldr	r2, [r1, #4]
 8001ff6:	4022      	ands	r2, r4
 8001ff8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ffa:	4322      	orrs	r2, r4
 8001ffc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ffe:	079a      	lsls	r2, r3, #30
 8002000:	d506      	bpl.n	8002010 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002002:	6801      	ldr	r1, [r0, #0]
 8002004:	4c24      	ldr	r4, [pc, #144]	; (8002098 <UART_AdvFeatureConfig+0xb0>)
 8002006:	684a      	ldr	r2, [r1, #4]
 8002008:	4022      	ands	r2, r4
 800200a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800200c:	4322      	orrs	r2, r4
 800200e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002010:	075a      	lsls	r2, r3, #29
 8002012:	d506      	bpl.n	8002022 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002014:	6801      	ldr	r1, [r0, #0]
 8002016:	4c21      	ldr	r4, [pc, #132]	; (800209c <UART_AdvFeatureConfig+0xb4>)
 8002018:	684a      	ldr	r2, [r1, #4]
 800201a:	4022      	ands	r2, r4
 800201c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800201e:	4322      	orrs	r2, r4
 8002020:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002022:	071a      	lsls	r2, r3, #28
 8002024:	d506      	bpl.n	8002034 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002026:	6801      	ldr	r1, [r0, #0]
 8002028:	4c1d      	ldr	r4, [pc, #116]	; (80020a0 <UART_AdvFeatureConfig+0xb8>)
 800202a:	684a      	ldr	r2, [r1, #4]
 800202c:	4022      	ands	r2, r4
 800202e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002030:	4322      	orrs	r2, r4
 8002032:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002034:	06da      	lsls	r2, r3, #27
 8002036:	d506      	bpl.n	8002046 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002038:	6801      	ldr	r1, [r0, #0]
 800203a:	4c1a      	ldr	r4, [pc, #104]	; (80020a4 <UART_AdvFeatureConfig+0xbc>)
 800203c:	688a      	ldr	r2, [r1, #8]
 800203e:	4022      	ands	r2, r4
 8002040:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002042:	4322      	orrs	r2, r4
 8002044:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002046:	069a      	lsls	r2, r3, #26
 8002048:	d506      	bpl.n	8002058 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800204a:	6801      	ldr	r1, [r0, #0]
 800204c:	4c16      	ldr	r4, [pc, #88]	; (80020a8 <UART_AdvFeatureConfig+0xc0>)
 800204e:	688a      	ldr	r2, [r1, #8]
 8002050:	4022      	ands	r2, r4
 8002052:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002054:	4322      	orrs	r2, r4
 8002056:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002058:	065a      	lsls	r2, r3, #25
 800205a:	d510      	bpl.n	800207e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800205c:	6801      	ldr	r1, [r0, #0]
 800205e:	4d13      	ldr	r5, [pc, #76]	; (80020ac <UART_AdvFeatureConfig+0xc4>)
 8002060:	684a      	ldr	r2, [r1, #4]
 8002062:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002064:	402a      	ands	r2, r5
 8002066:	4322      	orrs	r2, r4
 8002068:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	0352      	lsls	r2, r2, #13
 800206e:	4294      	cmp	r4, r2
 8002070:	d105      	bne.n	800207e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002072:	684a      	ldr	r2, [r1, #4]
 8002074:	4c0e      	ldr	r4, [pc, #56]	; (80020b0 <UART_AdvFeatureConfig+0xc8>)
 8002076:	4022      	ands	r2, r4
 8002078:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800207a:	4322      	orrs	r2, r4
 800207c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800207e:	061b      	lsls	r3, r3, #24
 8002080:	d506      	bpl.n	8002090 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002082:	6802      	ldr	r2, [r0, #0]
 8002084:	490b      	ldr	r1, [pc, #44]	; (80020b4 <UART_AdvFeatureConfig+0xcc>)
 8002086:	6853      	ldr	r3, [r2, #4]
 8002088:	400b      	ands	r3, r1
 800208a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800208c:	430b      	orrs	r3, r1
 800208e:	6053      	str	r3, [r2, #4]
}
 8002090:	bd30      	pop	{r4, r5, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	fffdffff 	.word	0xfffdffff
 8002098:	fffeffff 	.word	0xfffeffff
 800209c:	fffbffff 	.word	0xfffbffff
 80020a0:	ffff7fff 	.word	0xffff7fff
 80020a4:	ffffefff 	.word	0xffffefff
 80020a8:	ffffdfff 	.word	0xffffdfff
 80020ac:	ffefffff 	.word	0xffefffff
 80020b0:	ff9fffff 	.word	0xff9fffff
 80020b4:	fff7ffff 	.word	0xfff7ffff

080020b8 <UART_WaitOnFlagUntilTimeout>:
{
 80020b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020ba:	0004      	movs	r4, r0
 80020bc:	000d      	movs	r5, r1
 80020be:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020c0:	2608      	movs	r6, #8
{
 80020c2:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c4:	6822      	ldr	r2, [r4, #0]
 80020c6:	69d3      	ldr	r3, [r2, #28]
 80020c8:	402b      	ands	r3, r5
 80020ca:	1b5b      	subs	r3, r3, r5
 80020cc:	4259      	negs	r1, r3
 80020ce:	414b      	adcs	r3, r1
 80020d0:	42bb      	cmp	r3, r7
 80020d2:	d001      	beq.n	80020d8 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 80020d4:	2000      	movs	r0, #0
 80020d6:	e021      	b.n	800211c <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80020d8:	9b08      	ldr	r3, [sp, #32]
 80020da:	3301      	adds	r3, #1
 80020dc:	d0f3      	beq.n	80020c6 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020de:	f7fe fc5b 	bl	8000998 <HAL_GetTick>
 80020e2:	9b00      	ldr	r3, [sp, #0]
 80020e4:	1ac0      	subs	r0, r0, r3
 80020e6:	9b08      	ldr	r3, [sp, #32]
 80020e8:	4298      	cmp	r0, r3
 80020ea:	d828      	bhi.n	800213e <UART_WaitOnFlagUntilTimeout+0x86>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d026      	beq.n	800213e <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80020f0:	2104      	movs	r1, #4
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	420a      	tst	r2, r1
 80020f8:	d0e4      	beq.n	80020c4 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	0011      	movs	r1, r2
 80020fe:	4031      	ands	r1, r6
 8002100:	9101      	str	r1, [sp, #4]
 8002102:	4232      	tst	r2, r6
 8002104:	d00b      	beq.n	800211e <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8002106:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002108:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 800210a:	f7ff fcd7 	bl	8001abc <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800210e:	0023      	movs	r3, r4
 8002110:	3308      	adds	r3, #8
 8002112:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8002114:	2300      	movs	r3, #0
           return HAL_ERROR;
 8002116:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8002118:	3478      	adds	r4, #120	; 0x78
 800211a:	7023      	strb	r3, [r4, #0]
}
 800211c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	69d9      	ldr	r1, [r3, #28]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	4211      	tst	r1, r2
 8002126:	d0cd      	beq.n	80020c4 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002128:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800212a:	0020      	movs	r0, r4
 800212c:	f7ff fcc6 	bl	8001abc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002130:	0023      	movs	r3, r4
 8002132:	2220      	movs	r2, #32
 8002134:	3308      	adds	r3, #8
 8002136:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002138:	9b01      	ldr	r3, [sp, #4]
 800213a:	3478      	adds	r4, #120	; 0x78
 800213c:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800213e:	2003      	movs	r0, #3
 8002140:	e7ec      	b.n	800211c <UART_WaitOnFlagUntilTimeout+0x64>
	...

08002144 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002144:	0003      	movs	r3, r0
{
 8002146:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002148:	2500      	movs	r5, #0
{
 800214a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214c:	3308      	adds	r3, #8
 800214e:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002150:	f7fe fc22 	bl	8000998 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002154:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002156:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	071b      	lsls	r3, r3, #28
 800215c:	d51d      	bpl.n	800219a <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <UART_CheckIdleState+0xb8>)
 8002162:	002a      	movs	r2, r5
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	0389      	lsls	r1, r1, #14
 8002168:	0003      	movs	r3, r0
 800216a:	0020      	movs	r0, r4
 800216c:	f7ff ffa4 	bl	80020b8 <UART_WaitOnFlagUntilTimeout>
 8002170:	42a8      	cmp	r0, r5
 8002172:	d012      	beq.n	800219a <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002174:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002178:	2301      	movs	r3, #1
 800217a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800217e:	2080      	movs	r0, #128	; 0x80
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	6813      	ldr	r3, [r2, #0]
 8002184:	4383      	bics	r3, r0
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800218c:	2320      	movs	r3, #32
 800218e:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8002190:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002192:	2300      	movs	r3, #0
 8002194:	3478      	adds	r4, #120	; 0x78
 8002196:	7023      	strb	r3, [r4, #0]
}
 8002198:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800219a:	0025      	movs	r5, r4
 800219c:	cd08      	ldmia	r5!, {r3}
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	075b      	lsls	r3, r3, #29
 80021a2:	d523      	bpl.n	80021ec <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <UART_CheckIdleState+0xb8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	0020      	movs	r0, r4
 80021ae:	0033      	movs	r3, r6
 80021b0:	03c9      	lsls	r1, r1, #15
 80021b2:	f7ff ff81 	bl	80020b8 <UART_WaitOnFlagUntilTimeout>
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d018      	beq.n	80021ec <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021be:	2201      	movs	r2, #1
 80021c0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021c4:	6821      	ldr	r1, [r4, #0]
 80021c6:	4e0e      	ldr	r6, [pc, #56]	; (8002200 <UART_CheckIdleState+0xbc>)
 80021c8:	680b      	ldr	r3, [r1, #0]
 80021ca:	4033      	ands	r3, r6
 80021cc:	600b      	str	r3, [r1, #0]
 80021ce:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021da:	6821      	ldr	r1, [r4, #0]
 80021dc:	688b      	ldr	r3, [r1, #8]
 80021de:	4393      	bics	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
 80021e2:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80021e6:	2320      	movs	r3, #32
 80021e8:	67eb      	str	r3, [r5, #124]	; 0x7c
 80021ea:	e7d1      	b.n	8002190 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 80021ec:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ee:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80021f0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80021f2:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021f4:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021f6:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 80021f8:	e7cb      	b.n	8002192 <UART_CheckIdleState+0x4e>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	01ffffff 	.word	0x01ffffff
 8002200:	fffffedf 	.word	0xfffffedf

08002204 <HAL_UART_Init>:
{
 8002204:	b510      	push	{r4, lr}
 8002206:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002208:	d101      	bne.n	800220e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800220a:	2001      	movs	r0, #1
}
 800220c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800220e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002214:	0002      	movs	r2, r0
 8002216:	3278      	adds	r2, #120	; 0x78
 8002218:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800221a:	f7fe facb 	bl	80007b4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800221e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002220:	2101      	movs	r1, #1
 8002222:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002224:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002226:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002228:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800222a:	438b      	bics	r3, r1
 800222c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800222e:	f7ff fde5 	bl	8001dfc <UART_SetConfig>
 8002232:	2801      	cmp	r0, #1
 8002234:	d0e9      	beq.n	800220a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800223c:	0020      	movs	r0, r4
 800223e:	f7ff fed3 	bl	8001fe8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	4907      	ldr	r1, [pc, #28]	; (8002264 <HAL_UART_Init+0x60>)
 8002246:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002248:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800224a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800224e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	438a      	bics	r2, r1
 8002254:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002256:	2201      	movs	r2, #1
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800225e:	f7ff ff71 	bl	8002144 <UART_CheckIdleState>
 8002262:	e7d3      	b.n	800220c <HAL_UART_Init+0x8>
 8002264:	ffffb7ff 	.word	0xffffb7ff

08002268 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002268:	4770      	bx	lr

0800226a <memset>:
 800226a:	0003      	movs	r3, r0
 800226c:	1882      	adds	r2, r0, r2
 800226e:	4293      	cmp	r3, r2
 8002270:	d100      	bne.n	8002274 <memset+0xa>
 8002272:	4770      	bx	lr
 8002274:	7019      	strb	r1, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	e7f9      	b.n	800226e <memset+0x4>
	...

0800227c <__libc_init_array>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2600      	movs	r6, #0
 8002280:	4c0c      	ldr	r4, [pc, #48]	; (80022b4 <__libc_init_array+0x38>)
 8002282:	4d0d      	ldr	r5, [pc, #52]	; (80022b8 <__libc_init_array+0x3c>)
 8002284:	1b64      	subs	r4, r4, r5
 8002286:	10a4      	asrs	r4, r4, #2
 8002288:	42a6      	cmp	r6, r4
 800228a:	d109      	bne.n	80022a0 <__libc_init_array+0x24>
 800228c:	2600      	movs	r6, #0
 800228e:	f000 f819 	bl	80022c4 <_init>
 8002292:	4c0a      	ldr	r4, [pc, #40]	; (80022bc <__libc_init_array+0x40>)
 8002294:	4d0a      	ldr	r5, [pc, #40]	; (80022c0 <__libc_init_array+0x44>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	42a6      	cmp	r6, r4
 800229c:	d105      	bne.n	80022aa <__libc_init_array+0x2e>
 800229e:	bd70      	pop	{r4, r5, r6, pc}
 80022a0:	00b3      	lsls	r3, r6, #2
 80022a2:	58eb      	ldr	r3, [r5, r3]
 80022a4:	4798      	blx	r3
 80022a6:	3601      	adds	r6, #1
 80022a8:	e7ee      	b.n	8002288 <__libc_init_array+0xc>
 80022aa:	00b3      	lsls	r3, r6, #2
 80022ac:	58eb      	ldr	r3, [r5, r3]
 80022ae:	4798      	blx	r3
 80022b0:	3601      	adds	r6, #1
 80022b2:	e7f2      	b.n	800229a <__libc_init_array+0x1e>
 80022b4:	08002314 	.word	0x08002314
 80022b8:	08002314 	.word	0x08002314
 80022bc:	08002318 	.word	0x08002318
 80022c0:	08002314 	.word	0x08002314

080022c4 <_init>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr

080022d0 <_fini>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr
