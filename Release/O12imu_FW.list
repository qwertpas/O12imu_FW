
O12imu_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080037b4  080037b4  000137b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e4  080037e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037ec  080037ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08003800  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000174  08003800  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eaad  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002601  00000000  00000000  0003eb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000aa57  00000000  00000000  00041125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001150  00000000  00000000  0004bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fa2  00000000  00000000  0004ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013630  00000000  00000000  0004dc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000859e  00000000  00000000  000612a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003afc  00000000  00000000  00069840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0006d33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800379c 	.word	0x0800379c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800379c 	.word	0x0800379c

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	0008      	movs	r0, r1
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f834 	bl	80002e4 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_lmul>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	46ce      	mov	lr, r9
 800028c:	4699      	mov	r9, r3
 800028e:	0c03      	lsrs	r3, r0, #16
 8000290:	469c      	mov	ip, r3
 8000292:	0413      	lsls	r3, r2, #16
 8000294:	4647      	mov	r7, r8
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0404      	lsls	r4, r0, #16
 80002a0:	0c24      	lsrs	r4, r4, #16
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	0c10      	lsrs	r0, r2, #16
 80002a8:	434b      	muls	r3, r1
 80002aa:	4365      	muls	r5, r4
 80002ac:	4341      	muls	r1, r0
 80002ae:	4360      	muls	r0, r4
 80002b0:	0c2c      	lsrs	r4, r5, #16
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	1820      	adds	r0, r4, r0
 80002b6:	468c      	mov	ip, r1
 80002b8:	4283      	cmp	r3, r0
 80002ba:	d903      	bls.n	80002c4 <__aeabi_lmul+0x3c>
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	025b      	lsls	r3, r3, #9
 80002c0:	4698      	mov	r8, r3
 80002c2:	44c4      	add	ip, r8
 80002c4:	4649      	mov	r1, r9
 80002c6:	4379      	muls	r1, r7
 80002c8:	4356      	muls	r6, r2
 80002ca:	0c03      	lsrs	r3, r0, #16
 80002cc:	042d      	lsls	r5, r5, #16
 80002ce:	0c2d      	lsrs	r5, r5, #16
 80002d0:	1989      	adds	r1, r1, r6
 80002d2:	4463      	add	r3, ip
 80002d4:	0400      	lsls	r0, r0, #16
 80002d6:	1940      	adds	r0, r0, r5
 80002d8:	18c9      	adds	r1, r1, r3
 80002da:	bcc0      	pop	{r6, r7}
 80002dc:	46b9      	mov	r9, r7
 80002de:	46b0      	mov	r8, r6
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__udivmoddi4>:
 80002e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e6:	4657      	mov	r7, sl
 80002e8:	464e      	mov	r6, r9
 80002ea:	4645      	mov	r5, r8
 80002ec:	46de      	mov	lr, fp
 80002ee:	b5e0      	push	{r5, r6, r7, lr}
 80002f0:	0004      	movs	r4, r0
 80002f2:	000d      	movs	r5, r1
 80002f4:	4692      	mov	sl, r2
 80002f6:	4699      	mov	r9, r3
 80002f8:	b083      	sub	sp, #12
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d830      	bhi.n	8000360 <__udivmoddi4+0x7c>
 80002fe:	d02d      	beq.n	800035c <__udivmoddi4+0x78>
 8000300:	4649      	mov	r1, r9
 8000302:	4650      	mov	r0, sl
 8000304:	f000 f8d8 	bl	80004b8 <__clzdi2>
 8000308:	0029      	movs	r1, r5
 800030a:	0006      	movs	r6, r0
 800030c:	0020      	movs	r0, r4
 800030e:	f000 f8d3 	bl	80004b8 <__clzdi2>
 8000312:	1a33      	subs	r3, r6, r0
 8000314:	4698      	mov	r8, r3
 8000316:	3b20      	subs	r3, #32
 8000318:	d434      	bmi.n	8000384 <__udivmoddi4+0xa0>
 800031a:	469b      	mov	fp, r3
 800031c:	4653      	mov	r3, sl
 800031e:	465a      	mov	r2, fp
 8000320:	4093      	lsls	r3, r2
 8000322:	4642      	mov	r2, r8
 8000324:	001f      	movs	r7, r3
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	001e      	movs	r6, r3
 800032c:	42af      	cmp	r7, r5
 800032e:	d83b      	bhi.n	80003a8 <__udivmoddi4+0xc4>
 8000330:	42af      	cmp	r7, r5
 8000332:	d100      	bne.n	8000336 <__udivmoddi4+0x52>
 8000334:	e079      	b.n	800042a <__udivmoddi4+0x146>
 8000336:	465b      	mov	r3, fp
 8000338:	1ba4      	subs	r4, r4, r6
 800033a:	41bd      	sbcs	r5, r7
 800033c:	2b00      	cmp	r3, #0
 800033e:	da00      	bge.n	8000342 <__udivmoddi4+0x5e>
 8000340:	e076      	b.n	8000430 <__udivmoddi4+0x14c>
 8000342:	2200      	movs	r2, #0
 8000344:	2300      	movs	r3, #0
 8000346:	9200      	str	r2, [sp, #0]
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	2301      	movs	r3, #1
 800034c:	465a      	mov	r2, fp
 800034e:	4093      	lsls	r3, r2
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	4642      	mov	r2, r8
 8000356:	4093      	lsls	r3, r2
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	e029      	b.n	80003b0 <__udivmoddi4+0xcc>
 800035c:	4282      	cmp	r2, r0
 800035e:	d9cf      	bls.n	8000300 <__udivmoddi4+0x1c>
 8000360:	2200      	movs	r2, #0
 8000362:	2300      	movs	r3, #0
 8000364:	9200      	str	r2, [sp, #0]
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <__udivmoddi4+0x8e>
 800036e:	601c      	str	r4, [r3, #0]
 8000370:	605d      	str	r5, [r3, #4]
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	b003      	add	sp, #12
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	46bb      	mov	fp, r7
 800037c:	46b2      	mov	sl, r6
 800037e:	46a9      	mov	r9, r5
 8000380:	46a0      	mov	r8, r4
 8000382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000384:	4642      	mov	r2, r8
 8000386:	469b      	mov	fp, r3
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	4652      	mov	r2, sl
 800038e:	40da      	lsrs	r2, r3
 8000390:	4641      	mov	r1, r8
 8000392:	0013      	movs	r3, r2
 8000394:	464a      	mov	r2, r9
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	4642      	mov	r2, r8
 800039c:	431f      	orrs	r7, r3
 800039e:	4653      	mov	r3, sl
 80003a0:	4093      	lsls	r3, r2
 80003a2:	001e      	movs	r6, r3
 80003a4:	42af      	cmp	r7, r5
 80003a6:	d9c3      	bls.n	8000330 <__udivmoddi4+0x4c>
 80003a8:	2200      	movs	r2, #0
 80003aa:	2300      	movs	r3, #0
 80003ac:	9200      	str	r2, [sp, #0]
 80003ae:	9301      	str	r3, [sp, #4]
 80003b0:	4643      	mov	r3, r8
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0d8      	beq.n	8000368 <__udivmoddi4+0x84>
 80003b6:	07fb      	lsls	r3, r7, #31
 80003b8:	0872      	lsrs	r2, r6, #1
 80003ba:	431a      	orrs	r2, r3
 80003bc:	4646      	mov	r6, r8
 80003be:	087b      	lsrs	r3, r7, #1
 80003c0:	e00e      	b.n	80003e0 <__udivmoddi4+0xfc>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d101      	bne.n	80003ca <__udivmoddi4+0xe6>
 80003c6:	42a2      	cmp	r2, r4
 80003c8:	d80c      	bhi.n	80003e4 <__udivmoddi4+0x100>
 80003ca:	1aa4      	subs	r4, r4, r2
 80003cc:	419d      	sbcs	r5, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2100      	movs	r1, #0
 80003d6:	3e01      	subs	r6, #1
 80003d8:	1824      	adds	r4, r4, r0
 80003da:	414d      	adcs	r5, r1
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d006      	beq.n	80003ee <__udivmoddi4+0x10a>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d9ee      	bls.n	80003c2 <__udivmoddi4+0xde>
 80003e4:	3e01      	subs	r6, #1
 80003e6:	1924      	adds	r4, r4, r4
 80003e8:	416d      	adcs	r5, r5
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d1f8      	bne.n	80003e0 <__udivmoddi4+0xfc>
 80003ee:	9800      	ldr	r0, [sp, #0]
 80003f0:	9901      	ldr	r1, [sp, #4]
 80003f2:	465b      	mov	r3, fp
 80003f4:	1900      	adds	r0, r0, r4
 80003f6:	4169      	adcs	r1, r5
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db24      	blt.n	8000446 <__udivmoddi4+0x162>
 80003fc:	002b      	movs	r3, r5
 80003fe:	465a      	mov	r2, fp
 8000400:	4644      	mov	r4, r8
 8000402:	40d3      	lsrs	r3, r2
 8000404:	002a      	movs	r2, r5
 8000406:	40e2      	lsrs	r2, r4
 8000408:	001c      	movs	r4, r3
 800040a:	465b      	mov	r3, fp
 800040c:	0015      	movs	r5, r2
 800040e:	2b00      	cmp	r3, #0
 8000410:	db2a      	blt.n	8000468 <__udivmoddi4+0x184>
 8000412:	0026      	movs	r6, r4
 8000414:	409e      	lsls	r6, r3
 8000416:	0033      	movs	r3, r6
 8000418:	0026      	movs	r6, r4
 800041a:	4647      	mov	r7, r8
 800041c:	40be      	lsls	r6, r7
 800041e:	0032      	movs	r2, r6
 8000420:	1a80      	subs	r0, r0, r2
 8000422:	4199      	sbcs	r1, r3
 8000424:	9000      	str	r0, [sp, #0]
 8000426:	9101      	str	r1, [sp, #4]
 8000428:	e79e      	b.n	8000368 <__udivmoddi4+0x84>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d8bc      	bhi.n	80003a8 <__udivmoddi4+0xc4>
 800042e:	e782      	b.n	8000336 <__udivmoddi4+0x52>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	2100      	movs	r1, #0
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	2200      	movs	r2, #0
 800043a:	9100      	str	r1, [sp, #0]
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	2201      	movs	r2, #1
 8000440:	40da      	lsrs	r2, r3
 8000442:	9201      	str	r2, [sp, #4]
 8000444:	e785      	b.n	8000352 <__udivmoddi4+0x6e>
 8000446:	4642      	mov	r2, r8
 8000448:	2320      	movs	r3, #32
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	002a      	movs	r2, r5
 800044e:	4646      	mov	r6, r8
 8000450:	409a      	lsls	r2, r3
 8000452:	0023      	movs	r3, r4
 8000454:	40f3      	lsrs	r3, r6
 8000456:	4644      	mov	r4, r8
 8000458:	4313      	orrs	r3, r2
 800045a:	002a      	movs	r2, r5
 800045c:	40e2      	lsrs	r2, r4
 800045e:	001c      	movs	r4, r3
 8000460:	465b      	mov	r3, fp
 8000462:	0015      	movs	r5, r2
 8000464:	2b00      	cmp	r3, #0
 8000466:	dad4      	bge.n	8000412 <__udivmoddi4+0x12e>
 8000468:	4642      	mov	r2, r8
 800046a:	002f      	movs	r7, r5
 800046c:	2320      	movs	r3, #32
 800046e:	0026      	movs	r6, r4
 8000470:	4097      	lsls	r7, r2
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	40de      	lsrs	r6, r3
 8000476:	003b      	movs	r3, r7
 8000478:	4333      	orrs	r3, r6
 800047a:	e7cd      	b.n	8000418 <__udivmoddi4+0x134>

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <__clzdi2>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	2900      	cmp	r1, #0
 80004bc:	d103      	bne.n	80004c6 <__clzdi2+0xe>
 80004be:	f7ff ffdd 	bl	800047c <__clzsi2>
 80004c2:	3020      	adds	r0, #32
 80004c4:	e002      	b.n	80004cc <__clzdi2+0x14>
 80004c6:	0008      	movs	r0, r1
 80004c8:	f7ff ffd8 	bl	800047c <__clzsi2>
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <lsm6dsv_read_reg>:
  *
  */
int32_t __weak lsm6dsv_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80004d0:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80004d2:	6844      	ldr	r4, [r0, #4]
 80004d4:	68c0      	ldr	r0, [r0, #12]
 80004d6:	47a0      	blx	r4

  return ret;
}
 80004d8:	bd10      	pop	{r4, pc}

080004da <lsm6dsv_write_reg>:
  *
  */
int32_t __weak lsm6dsv_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80004da:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80004dc:	6804      	ldr	r4, [r0, #0]
 80004de:	68c0      	ldr	r0, [r0, #12]
 80004e0:	47a0      	blx	r4

  return ret;
}
 80004e2:	bd10      	pop	{r4, pc}

080004e4 <lsm6dsv_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_reset_set(stmdev_ctx_t *ctx, lsm6dsv_reset_t val)
{
 80004e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  lsm6dsv_func_cfg_access_t func_cfg_access;
  lsm6dsv_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80004e6:	2301      	movs	r3, #1
 80004e8:	aa01      	add	r2, sp, #4
{
 80004ea:	000e      	movs	r6, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80004ec:	2112      	movs	r1, #18
{
 80004ee:	0005      	movs	r5, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80004f0:	f7ff ffee 	bl	80004d0 <lsm6dsv_read_reg>
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80004f4:	2301      	movs	r3, #1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80004f6:	0004      	movs	r4, r0
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80004f8:	466a      	mov	r2, sp
 80004fa:	0019      	movs	r1, r3
 80004fc:	0028      	movs	r0, r5
 80004fe:	f7ff ffe7 	bl	80004d0 <lsm6dsv_read_reg>
 8000502:	1820      	adds	r0, r4, r0
  if (ret != 0) { return ret; }
 8000504:	2800      	cmp	r0, #0
 8000506:	d122      	bne.n	800054e <lsm6dsv_reset_set+0x6a>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8000508:	2701      	movs	r7, #1
  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 800050a:	08b3      	lsrs	r3, r6, #2
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 800050c:	0872      	lsrs	r2, r6, #1
 800050e:	403a      	ands	r2, r7
 8000510:	01db      	lsls	r3, r3, #7
 8000512:	4313      	orrs	r3, r2
 8000514:	466a      	mov	r2, sp
 8000516:	217e      	movs	r1, #126	; 0x7e
 8000518:	7912      	ldrb	r2, [r2, #4]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 800051a:	403e      	ands	r6, r7
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 800051c:	400a      	ands	r2, r1
 800051e:	4313      	orrs	r3, r2
 8000520:	466a      	mov	r2, sp
 8000522:	7113      	strb	r3, [r2, #4]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8000524:	7813      	ldrb	r3, [r2, #0]
 8000526:	2204      	movs	r2, #4
 8000528:	4393      	bics	r3, r2
 800052a:	466a      	mov	r2, sp
 800052c:	00b6      	lsls	r6, r6, #2
 800052e:	4333      	orrs	r3, r6
 8000530:	7013      	strb	r3, [r2, #0]

  ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8000532:	396c      	subs	r1, #108	; 0x6c
 8000534:	003b      	movs	r3, r7
 8000536:	aa01      	add	r2, sp, #4
 8000538:	0028      	movs	r0, r5
 800053a:	f7ff ffce 	bl	80004da <lsm6dsv_write_reg>
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800053e:	003b      	movs	r3, r7
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8000540:	0004      	movs	r4, r0
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8000542:	466a      	mov	r2, sp
 8000544:	0039      	movs	r1, r7
 8000546:	0028      	movs	r0, r5
 8000548:	f7ff ffc7 	bl	80004da <lsm6dsv_write_reg>
 800054c:	1820      	adds	r0, r4, r0

  return ret;
}
 800054e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000550 <lsm6dsv_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_reset_get(stmdev_ctx_t *ctx, lsm6dsv_reset_t *val)
{
 8000550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  lsm6dsv_func_cfg_access_t func_cfg_access;
  lsm6dsv_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8000552:	ae01      	add	r6, sp, #4
 8000554:	2301      	movs	r3, #1
 8000556:	0032      	movs	r2, r6
{
 8000558:	000c      	movs	r4, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 800055a:	2112      	movs	r1, #18
{
 800055c:	0005      	movs	r5, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 800055e:	f7ff ffb7 	bl	80004d0 <lsm6dsv_read_reg>
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8000562:	2301      	movs	r3, #1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8000564:	0007      	movs	r7, r0
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8000566:	466a      	mov	r2, sp
 8000568:	0019      	movs	r1, r3
 800056a:	0028      	movs	r0, r5
 800056c:	f7ff ffb0 	bl	80004d0 <lsm6dsv_read_reg>
 8000570:	1838      	adds	r0, r7, r0
  if (ret != 0) { return ret; }
 8000572:	2800      	cmp	r0, #0
 8000574:	d111      	bne.n	800059a <lsm6dsv_reset_get+0x4a>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8000576:	7832      	ldrb	r2, [r6, #0]
 8000578:	07d3      	lsls	r3, r2, #31
 800057a:	09d2      	lsrs	r2, r2, #7
 800057c:	0052      	lsls	r2, r2, #1
 800057e:	0f5b      	lsrs	r3, r3, #29
 8000580:	189b      	adds	r3, r3, r2
 8000582:	466a      	mov	r2, sp
 8000584:	7812      	ldrb	r2, [r2, #0]
 8000586:	0752      	lsls	r2, r2, #29
 8000588:	0fd2      	lsrs	r2, r2, #31
 800058a:	189b      	adds	r3, r3, r2
 800058c:	2b02      	cmp	r3, #2
 800058e:	d006      	beq.n	800059e <lsm6dsv_reset_get+0x4e>
 8000590:	2b04      	cmp	r3, #4
 8000592:	d004      	beq.n	800059e <lsm6dsv_reset_get+0x4e>
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <lsm6dsv_reset_get+0x4c>
  {
    case LSM6DSV_READY:
      *val = LSM6DSV_READY;
 8000598:	7020      	strb	r0, [r4, #0]
      *val = LSM6DSV_GLOBAL_RST;
      break;
  }

  return ret;
}
 800059a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      *val = LSM6DSV_GLOBAL_RST;
 800059c:	2301      	movs	r3, #1
      *val = LSM6DSV_RESTORE_CTRL_REGS;
 800059e:	7023      	strb	r3, [r4, #0]
      break;
 80005a0:	e7fb      	b.n	800059a <lsm6dsv_reset_get+0x4a>

080005a2 <lsm6dsv_mem_bank_set>:
int32_t lsm6dsv_mem_bank_set(stmdev_ctx_t *ctx, lsm6dsv_mem_bank_t val)
{
  lsm6dsv_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80005a2:	2301      	movs	r3, #1
{
 80005a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005a6:	000d      	movs	r5, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80005a8:	aa01      	add	r2, sp, #4
 80005aa:	0019      	movs	r1, r3
{
 80005ac:	0004      	movs	r4, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80005ae:	f7ff ff8f 	bl	80004d0 <lsm6dsv_read_reg>
  if (ret != 0) { return ret; }
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d111      	bne.n	80005da <lsm6dsv_mem_bank_set+0x38>

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 80005b6:	2101      	movs	r1, #1
 80005b8:	466b      	mov	r3, sp
 80005ba:	086a      	lsrs	r2, r5, #1
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	400a      	ands	r2, r1
 80005c0:	303f      	adds	r0, #63	; 0x3f
 80005c2:	0192      	lsls	r2, r2, #6
 80005c4:	01ed      	lsls	r5, r5, #7
 80005c6:	4003      	ands	r3, r0
 80005c8:	432a      	orrs	r2, r5
 80005ca:	431a      	orrs	r2, r3
 80005cc:	466b      	mov	r3, sp
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80005ce:	0020      	movs	r0, r4
  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 80005d0:	711a      	strb	r2, [r3, #4]
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80005d2:	000b      	movs	r3, r1
 80005d4:	aa01      	add	r2, sp, #4
 80005d6:	f7ff ff80 	bl	80004da <lsm6dsv_write_reg>

  return ret;
}
 80005da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080005dc <lsm6dsv_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80005dc:	b510      	push	{r4, lr}
 80005de:	000a      	movs	r2, r1
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_WHO_AM_I, val, 1);
 80005e0:	2301      	movs	r3, #1
 80005e2:	210f      	movs	r1, #15
 80005e4:	f7ff ff74 	bl	80004d0 <lsm6dsv_read_reg>

  return ret;
}
 80005e8:	bd10      	pop	{r4, pc}

080005ea <lsm6dsv_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsv_data_rate_t val)
{
 80005ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  lsm6dsv_ctrl1_t ctrl1;
  lsm6dsv_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 80005ec:	2301      	movs	r3, #1
{
 80005ee:	000e      	movs	r6, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 80005f0:	466a      	mov	r2, sp
 80005f2:	2110      	movs	r1, #16
{
 80005f4:	0005      	movs	r5, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 80005f6:	f7ff ff6b 	bl	80004d0 <lsm6dsv_read_reg>
  if (ret != 0) { return ret; }
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d127      	bne.n	800064e <lsm6dsv_xl_data_rate_set+0x64>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 80005fe:	466b      	mov	r3, sp
 8000600:	220f      	movs	r2, #15
 8000602:	0031      	movs	r1, r6
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4011      	ands	r1, r2
 8000608:	4393      	bics	r3, r2
 800060a:	466a      	mov	r2, sp
 800060c:	430b      	orrs	r3, r1
 800060e:	7013      	strb	r3, [r2, #0]
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 8000610:	2110      	movs	r1, #16
 8000612:	2301      	movs	r3, #1
 8000614:	0028      	movs	r0, r5
 8000616:	f7ff ff60 	bl	80004da <lsm6dsv_write_reg>
  if (ret != 0) { return ret; }
 800061a:	2800      	cmp	r0, #0
 800061c:	d117      	bne.n	800064e <lsm6dsv_xl_data_rate_set+0x64>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800061e:	0936      	lsrs	r6, r6, #4
  if (sel != 0U)
 8000620:	d015      	beq.n	800064e <lsm6dsv_xl_data_rate_set+0x64>
  {
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8000622:	2301      	movs	r3, #1
 8000624:	2162      	movs	r1, #98	; 0x62
 8000626:	aa01      	add	r2, sp, #4
 8000628:	0028      	movs	r0, r5
 800062a:	f7ff ff51 	bl	80004d0 <lsm6dsv_read_reg>
    haodr.haodr_sel = sel;
 800062e:	466b      	mov	r3, sp
 8000630:	2203      	movs	r2, #3
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	4016      	ands	r6, r2
 8000636:	4393      	bics	r3, r2
 8000638:	466a      	mov	r2, sp
 800063a:	4333      	orrs	r3, r6
 800063c:	7113      	strb	r3, [r2, #4]
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 800063e:	0004      	movs	r4, r0
    ret += lsm6dsv_write_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8000640:	2301      	movs	r3, #1
 8000642:	2162      	movs	r1, #98	; 0x62
 8000644:	0028      	movs	r0, r5
 8000646:	aa01      	add	r2, sp, #4
 8000648:	f7ff ff47 	bl	80004da <lsm6dsv_write_reg>
 800064c:	1820      	adds	r0, r4, r0
  }

  return ret;
}
 800064e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08000650 <lsm6dsv_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsv_data_rate_t val)
{
 8000650:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000652:	000e      	movs	r6, r1
  lsm6dsv_ctrl2_t ctrl2;
  lsm6dsv_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8000654:	2301      	movs	r3, #1
 8000656:	466a      	mov	r2, sp
 8000658:	2111      	movs	r1, #17
{
 800065a:	0005      	movs	r5, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 800065c:	f7ff ff38 	bl	80004d0 <lsm6dsv_read_reg>
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8000660:	466b      	mov	r3, sp
 8000662:	220f      	movs	r2, #15
 8000664:	0031      	movs	r1, r6
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4011      	ands	r1, r2
 800066a:	4393      	bics	r3, r2
 800066c:	466a      	mov	r2, sp
 800066e:	430b      	orrs	r3, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8000670:	0004      	movs	r4, r0
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8000672:	7013      	strb	r3, [r2, #0]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8000674:	2111      	movs	r1, #17
 8000676:	2301      	movs	r3, #1
 8000678:	0028      	movs	r0, r5
 800067a:	f7ff ff2e 	bl	80004da <lsm6dsv_write_reg>
 800067e:	1820      	adds	r0, r4, r0
  if (ret != 0) { return ret; }
 8000680:	2800      	cmp	r0, #0
 8000682:	d117      	bne.n	80006b4 <lsm6dsv_gy_data_rate_set+0x64>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8000684:	0936      	lsrs	r6, r6, #4
  if (sel != 0U)
 8000686:	d015      	beq.n	80006b4 <lsm6dsv_gy_data_rate_set+0x64>
  {
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8000688:	2301      	movs	r3, #1
 800068a:	2162      	movs	r1, #98	; 0x62
 800068c:	aa01      	add	r2, sp, #4
 800068e:	0028      	movs	r0, r5
 8000690:	f7ff ff1e 	bl	80004d0 <lsm6dsv_read_reg>
    haodr.haodr_sel = sel;
 8000694:	4669      	mov	r1, sp
 8000696:	2203      	movs	r2, #3
 8000698:	0033      	movs	r3, r6
 800069a:	790e      	ldrb	r6, [r1, #4]
 800069c:	4013      	ands	r3, r2
 800069e:	4396      	bics	r6, r2
 80006a0:	431e      	orrs	r6, r3
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 80006a2:	0004      	movs	r4, r0
    haodr.haodr_sel = sel;
 80006a4:	710e      	strb	r6, [r1, #4]
    ret += lsm6dsv_write_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 80006a6:	2301      	movs	r3, #1
 80006a8:	2162      	movs	r1, #98	; 0x62
 80006aa:	0028      	movs	r0, r5
 80006ac:	aa01      	add	r2, sp, #4
 80006ae:	f7ff ff14 	bl	80004da <lsm6dsv_write_reg>
 80006b2:	1820      	adds	r0, r4, r0
  }

  return ret;
}
 80006b4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080006b6 <lsm6dsv_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80006b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsv_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80006b8:	2301      	movs	r3, #1
{
 80006ba:	000c      	movs	r4, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80006bc:	aa01      	add	r2, sp, #4
 80006be:	2112      	movs	r1, #18
{
 80006c0:	0005      	movs	r5, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80006c2:	f7ff ff05 	bl	80004d0 <lsm6dsv_read_reg>

  if (ret == 0)
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d10e      	bne.n	80006e8 <lsm6dsv_block_data_update_set+0x32>
  {
    ctrl3.bdu = val;
 80006ca:	2301      	movs	r3, #1
 80006cc:	4669      	mov	r1, sp
 80006ce:	401c      	ands	r4, r3
 80006d0:	01a2      	lsls	r2, r4, #6
 80006d2:	790c      	ldrb	r4, [r1, #4]
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	438c      	bics	r4, r1
 80006d8:	4314      	orrs	r4, r2
 80006da:	466a      	mov	r2, sp
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80006dc:	0028      	movs	r0, r5
    ctrl3.bdu = val;
 80006de:	7114      	strb	r4, [r2, #4]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80006e0:	392e      	subs	r1, #46	; 0x2e
 80006e2:	aa01      	add	r2, sp, #4
 80006e4:	f7ff fef9 	bl	80004da <lsm6dsv_write_reg>
  }

  return ret;
}
 80006e8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080006ea <lsm6dsv_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsv_gy_full_scale_t val)
{
 80006ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsv_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 80006ec:	2301      	movs	r3, #1
{
 80006ee:	000d      	movs	r5, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 80006f0:	aa01      	add	r2, sp, #4
 80006f2:	2115      	movs	r1, #21
{
 80006f4:	0004      	movs	r4, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 80006f6:	f7ff feeb 	bl	80004d0 <lsm6dsv_read_reg>

  if (ret == 0)
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d10c      	bne.n	8000718 <lsm6dsv_gy_full_scale_set+0x2e>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 80006fe:	466a      	mov	r2, sp
 8000700:	230f      	movs	r3, #15
 8000702:	7911      	ldrb	r1, [r2, #4]
 8000704:	401d      	ands	r5, r3
 8000706:	4399      	bics	r1, r3
 8000708:	4329      	orrs	r1, r5
 800070a:	7111      	strb	r1, [r2, #4]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 800070c:	2301      	movs	r3, #1
 800070e:	2115      	movs	r1, #21
 8000710:	0020      	movs	r0, r4
 8000712:	aa01      	add	r2, sp, #4
 8000714:	f7ff fee1 	bl	80004da <lsm6dsv_write_reg>
  }

  return ret;
}
 8000718:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800071a <lsm6dsv_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsv_xl_full_scale_t val)
{
 800071a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsv_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 800071c:	2301      	movs	r3, #1
{
 800071e:	000d      	movs	r5, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8000720:	aa01      	add	r2, sp, #4
 8000722:	2117      	movs	r1, #23
{
 8000724:	0004      	movs	r4, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8000726:	f7ff fed3 	bl	80004d0 <lsm6dsv_read_reg>

  if (ret == 0)
 800072a:	2800      	cmp	r0, #0
 800072c:	d10c      	bne.n	8000748 <lsm6dsv_xl_full_scale_set+0x2e>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 800072e:	466a      	mov	r2, sp
 8000730:	2303      	movs	r3, #3
 8000732:	7911      	ldrb	r1, [r2, #4]
 8000734:	401d      	ands	r5, r3
 8000736:	4399      	bics	r1, r3
 8000738:	4329      	orrs	r1, r5
 800073a:	7111      	strb	r1, [r2, #4]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 800073c:	2301      	movs	r3, #1
 800073e:	2117      	movs	r1, #23
 8000740:	0020      	movs	r0, r4
 8000742:	aa01      	add	r2, sp, #4
 8000744:	f7ff fec9 	bl	80004da <lsm6dsv_write_reg>
  }

  return ret;
}
 8000748:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800074a <lsm6dsv_all_sources_get>:
  * @param  val      Get the status of all the interrupt sources.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_all_sources_get(stmdev_ctx_t *ctx, lsm6dsv_all_sources_t *val)
{
 800074a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074c:	b0a3      	sub	sp, #140	; 0x8c
  lsm6dsv_ui_status_reg_ois_t status_reg_ois;
  lsm6dsv_status_master_t status_shub;
  uint8_t buff[7];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 800074e:	ae1d      	add	r6, sp, #116	; 0x74
 8000750:	2301      	movs	r3, #1
 8000752:	0032      	movs	r2, r6
{
 8000754:	000c      	movs	r4, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8000756:	2150      	movs	r1, #80	; 0x50
{
 8000758:	9001      	str	r0, [sp, #4]
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 800075a:	f7ff feb9 	bl	80004d0 <lsm6dsv_read_reg>
  functions_enable.dis_rst_lir_all_int = PROPERTY_ENABLE;
 800075e:	2208      	movs	r2, #8
 8000760:	7833      	ldrb	r3, [r6, #0]
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8000762:	0005      	movs	r5, r0
  functions_enable.dis_rst_lir_all_int = PROPERTY_ENABLE;
 8000764:	4313      	orrs	r3, r2
 8000766:	7033      	strb	r3, [r6, #0]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8000768:	0032      	movs	r2, r6
 800076a:	2301      	movs	r3, #1
 800076c:	2150      	movs	r1, #80	; 0x50
 800076e:	9801      	ldr	r0, [sp, #4]
 8000770:	f7ff feb3 	bl	80004da <lsm6dsv_write_reg>
 8000774:	182b      	adds	r3, r5, r0
 8000776:	9300      	str	r3, [sp, #0]
  if (ret != 0) { return ret; }
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <lsm6dsv_all_sources_get+0x34>
 800077c:	e19e      	b.n	8000abc <lsm6dsv_all_sources_get+0x372>

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FIFO_STATUS1, (uint8_t *)&buff, 4);
 800077e:	ad20      	add	r5, sp, #128	; 0x80
 8000780:	002a      	movs	r2, r5
 8000782:	211b      	movs	r1, #27
 8000784:	9801      	ldr	r0, [sp, #4]
 8000786:	3304      	adds	r3, #4
 8000788:	f7ff fea2 	bl	80004d0 <lsm6dsv_read_reg>
 800078c:	9000      	str	r0, [sp, #0]
  if (ret != 0) { return ret; }
 800078e:	2800      	cmp	r0, #0
 8000790:	d000      	beq.n	8000794 <lsm6dsv_all_sources_get+0x4a>
 8000792:	e193      	b.n	8000abc <lsm6dsv_all_sources_get+0x372>
    *target = *source;
 8000794:	7869      	ldrb	r1, [r5, #1]
 8000796:	78aa      	ldrb	r2, [r5, #2]

  bytecpy((uint8_t *)&fifo_status2, &buff[1]);
  bytecpy((uint8_t *)&all_int_src, &buff[2]);
  bytecpy((uint8_t *)&status_reg, &buff[3]);

  val->fifo_ovr = fifo_status2.fifo_ovr_ia;
 8000798:	0648      	lsls	r0, r1, #25
 800079a:	0fc0      	lsrs	r0, r0, #31
 800079c:	9000      	str	r0, [sp, #0]
  val->fifo_bdr = fifo_status2.counter_bdr_ia;
 800079e:	06c8      	lsls	r0, r1, #27
 80007a0:	0fc0      	lsrs	r0, r0, #31
    *target = *source;
 80007a2:	78eb      	ldrb	r3, [r5, #3]
  val->fifo_bdr = fifo_status2.counter_bdr_ia;
 80007a4:	9002      	str	r0, [sp, #8]
  val->fifo_full = fifo_status2.fifo_full_ia;
 80007a6:	0688      	lsls	r0, r1, #26
  val->fifo_th = fifo_status2.fifo_wtm_ia;
 80007a8:	09c9      	lsrs	r1, r1, #7
 80007aa:	9104      	str	r1, [sp, #16]

  val->free_fall = all_int_src.ff_ia;
  val->wake_up = all_int_src.wu_ia;
  val->six_d = all_int_src.d6d_ia;
 80007ac:	0911      	lsrs	r1, r2, #4
 80007ae:	468c      	mov	ip, r1

  val->drdy_xl = status_reg.xlda;
  val->drdy_gy = status_reg.gda;
 80007b0:	0799      	lsls	r1, r3, #30
  val->drdy_xl = status_reg.xlda;
 80007b2:	07df      	lsls	r7, r3, #31
  val->drdy_gy = status_reg.gda;
 80007b4:	0fc9      	lsrs	r1, r1, #31
  val->drdy_xl = status_reg.xlda;
 80007b6:	0fff      	lsrs	r7, r7, #31
 80007b8:	0049      	lsls	r1, r1, #1
 80007ba:	4339      	orrs	r1, r7
  val->drdy_temp = status_reg.tda;
 80007bc:	075f      	lsls	r7, r3, #29
 80007be:	0fff      	lsrs	r7, r7, #31
  val->drdy_xl = status_reg.xlda;
 80007c0:	00bf      	lsls	r7, r7, #2
 80007c2:	4339      	orrs	r1, r7
  val->drdy_eis = status_reg.gda_eis;
 80007c4:	06df      	lsls	r7, r3, #27
 80007c6:	0fff      	lsrs	r7, r7, #31
  val->drdy_xl = status_reg.xlda;
 80007c8:	00ff      	lsls	r7, r7, #3
 80007ca:	4339      	orrs	r1, r7
  val->drdy_ois = status_reg.ois_drdy;
 80007cc:	069f      	lsls	r7, r3, #26
 80007ce:	0fff      	lsrs	r7, r7, #31
  val->drdy_xl = status_reg.xlda;
 80007d0:	013f      	lsls	r7, r7, #4
 80007d2:	430f      	orrs	r7, r1
 80007d4:	2120      	movs	r1, #32
  val->timestamp = status_reg.timestamp_endcount;
 80007d6:	09db      	lsrs	r3, r3, #7
  val->drdy_xl = status_reg.xlda;
 80007d8:	019b      	lsls	r3, r3, #6
 80007da:	433b      	orrs	r3, r7
  val->wake_up = all_int_src.wu_ia;
 80007dc:	2701      	movs	r7, #1
  val->fifo_full = fifo_status2.fifo_full_ia;
 80007de:	0fc0      	lsrs	r0, r0, #31
 80007e0:	9003      	str	r0, [sp, #12]
  val->wake_up = all_int_src.wu_ia;
 80007e2:	0850      	lsrs	r0, r2, #1
  val->free_fall = all_int_src.ff_ia;
 80007e4:	07d2      	lsls	r2, r2, #31
  val->drdy_xl = status_reg.xlda;
 80007e6:	0e12      	lsrs	r2, r2, #24
 80007e8:	4313      	orrs	r3, r2
 80007ea:	7822      	ldrb	r2, [r4, #0]
  val->wake_up = all_int_src.wu_ia;
 80007ec:	4038      	ands	r0, r7
  val->drdy_xl = status_reg.xlda;
 80007ee:	400a      	ands	r2, r1
 80007f0:	4313      	orrs	r3, r2
 80007f2:	7023      	strb	r3, [r4, #0]
  val->wake_up = all_int_src.wu_ia;
 80007f4:	7863      	ldrb	r3, [r4, #1]
  val->fifo_bdr = fifo_status2.counter_bdr_ia;
 80007f6:	9902      	ldr	r1, [sp, #8]
  val->wake_up = all_int_src.wu_ia;
 80007f8:	43bb      	bics	r3, r7
 80007fa:	4303      	orrs	r3, r0
  val->six_d = all_int_src.d6d_ia;
 80007fc:	4660      	mov	r0, ip
 80007fe:	4038      	ands	r0, r7
 8000800:	0082      	lsls	r2, r0, #2
 8000802:	2004      	movs	r0, #4
  val->wake_up = all_int_src.wu_ia;
 8000804:	7063      	strb	r3, [r4, #1]
  val->six_d = all_int_src.d6d_ia;
 8000806:	78a3      	ldrb	r3, [r4, #2]
 8000808:	4383      	bics	r3, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	70a3      	strb	r3, [r4, #2]
  val->fifo_bdr = fifo_status2.counter_bdr_ia;
 800080e:	9b03      	ldr	r3, [sp, #12]
 8000810:	008a      	lsls	r2, r1, #2
 8000812:	9900      	ldr	r1, [sp, #0]
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	4313      	orrs	r3, r2
 8000818:	010a      	lsls	r2, r1, #4
 800081a:	9904      	ldr	r1, [sp, #16]
 800081c:	4313      	orrs	r3, r2
 800081e:	014a      	lsls	r2, r1, #5
 8000820:	213c      	movs	r1, #60	; 0x3c
 8000822:	4313      	orrs	r3, r2
 8000824:	79a2      	ldrb	r2, [r4, #6]

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8000826:	9801      	ldr	r0, [sp, #4]
  val->fifo_bdr = fifo_status2.counter_bdr_ia;
 8000828:	438a      	bics	r2, r1
 800082a:	4313      	orrs	r3, r2
 800082c:	71a3      	strb	r3, [r4, #6]
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 800082e:	0032      	movs	r2, r6
 8000830:	003b      	movs	r3, r7
 8000832:	3114      	adds	r1, #20
 8000834:	f7ff fe4c 	bl	80004d0 <lsm6dsv_read_reg>
  functions_enable.dis_rst_lir_all_int = PROPERTY_DISABLE;
 8000838:	2208      	movs	r2, #8
 800083a:	7833      	ldrb	r3, [r6, #0]
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 800083c:	9000      	str	r0, [sp, #0]
  functions_enable.dis_rst_lir_all_int = PROPERTY_DISABLE;
 800083e:	4393      	bics	r3, r2
 8000840:	7033      	strb	r3, [r6, #0]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8000842:	0032      	movs	r2, r6
 8000844:	003b      	movs	r3, r7
 8000846:	2150      	movs	r1, #80	; 0x50
 8000848:	9801      	ldr	r0, [sp, #4]
 800084a:	f7ff fe46 	bl	80004da <lsm6dsv_write_reg>
 800084e:	9a00      	ldr	r2, [sp, #0]
 8000850:	1812      	adds	r2, r2, r0
 8000852:	9200      	str	r2, [sp, #0]
  if (ret != 0) { return ret; }
 8000854:	2a00      	cmp	r2, #0
 8000856:	d000      	beq.n	800085a <lsm6dsv_all_sources_get+0x110>
 8000858:	e130      	b.n	8000abc <lsm6dsv_all_sources_get+0x372>

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_UI_STATUS_REG_OIS, (uint8_t *)&buff, 8);
 800085a:	2308      	movs	r3, #8
 800085c:	002a      	movs	r2, r5
 800085e:	2144      	movs	r1, #68	; 0x44
 8000860:	9801      	ldr	r0, [sp, #4]
 8000862:	f7ff fe35 	bl	80004d0 <lsm6dsv_read_reg>
 8000866:	9000      	str	r0, [sp, #0]
  if (ret != 0) { return ret; }
 8000868:	2800      	cmp	r0, #0
 800086a:	d000      	beq.n	800086e <lsm6dsv_all_sources_get+0x124>
 800086c:	e126      	b.n	8000abc <lsm6dsv_all_sources_get+0x372>
    *target = *source;
 800086e:	7868      	ldrb	r0, [r5, #1]
 8000870:	782a      	ldrb	r2, [r5, #0]
 8000872:	78ab      	ldrb	r3, [r5, #2]
 8000874:	78e9      	ldrb	r1, [r5, #3]
 8000876:	792e      	ldrb	r6, [r5, #4]
 8000878:	9214      	str	r2, [sp, #80]	; 0x50
 800087a:	796a      	ldrb	r2, [r5, #5]
  bytecpy((uint8_t *)&d6d_src, &buff[3]);
  bytecpy((uint8_t *)&emb_func_status_mainpage, &buff[4]);
  bytecpy((uint8_t *)&fsm_status_mainpage, &buff[5]);

  val->gy_settling = status_reg_ois.gyro_settling;
  val->sleep_change = wake_up_src.sleep_change_ia;
 800087c:	0645      	lsls	r5, r0, #25
 800087e:	0fed      	lsrs	r5, r5, #31
 8000880:	9515      	str	r5, [sp, #84]	; 0x54
  val->wake_up_x = wake_up_src.x_wu;
 8000882:	0745      	lsls	r5, r0, #29
 8000884:	0fed      	lsrs	r5, r5, #31
 8000886:	9502      	str	r5, [sp, #8]
  val->wake_up_y = wake_up_src.y_wu;
 8000888:	0785      	lsls	r5, r0, #30
 800088a:	0fed      	lsrs	r5, r5, #31
 800088c:	46ac      	mov	ip, r5
  val->wake_up_z = wake_up_src.z_wu;
 800088e:	07c5      	lsls	r5, r0, #31
  val->sleep_state = wake_up_src.sleep_state;
 8000890:	06c0      	lsls	r0, r0, #27
  val->wake_up_z = wake_up_src.z_wu;
 8000892:	9516      	str	r5, [sp, #88]	; 0x58
  val->sleep_state = wake_up_src.sleep_state;
 8000894:	0fc5      	lsrs	r5, r0, #31

  val->tap_x = tap_src.x_tap;
 8000896:	0758      	lsls	r0, r3, #29
  val->sleep_state = wake_up_src.sleep_state;
 8000898:	9503      	str	r5, [sp, #12]
  val->tap_x = tap_src.x_tap;
 800089a:	0fc5      	lsrs	r5, r0, #31
  val->tap_y = tap_src.y_tap;
 800089c:	0798      	lsls	r0, r3, #30
  val->tap_x = tap_src.x_tap;
 800089e:	9504      	str	r5, [sp, #16]
  val->tap_y = tap_src.y_tap;
 80008a0:	0fc5      	lsrs	r5, r0, #31
 80008a2:	9505      	str	r5, [sp, #20]
  val->tap_z = tap_src.z_tap;
  val->tap_sign = tap_src.tap_sign;
 80008a4:	0718      	lsls	r0, r3, #28
  val->tap_z = tap_src.z_tap;
 80008a6:	07dd      	lsls	r5, r3, #31
 80008a8:	9517      	str	r5, [sp, #92]	; 0x5c
  val->tap_sign = tap_src.tap_sign;
 80008aa:	0fc5      	lsrs	r5, r0, #31
 80008ac:	9518      	str	r5, [sp, #96]	; 0x60
  val->double_tap = tap_src.double_tap;
 80008ae:	06dd      	lsls	r5, r3, #27
  val->single_tap = tap_src.single_tap;
 80008b0:	069b      	lsls	r3, r3, #26

  val->six_d_zl = d6d_src.zl;
 80008b2:	06c8      	lsls	r0, r1, #27
  val->single_tap = tap_src.single_tap;
 80008b4:	0fdb      	lsrs	r3, r3, #31
 80008b6:	9306      	str	r3, [sp, #24]
  val->six_d_zl = d6d_src.zl;
 80008b8:	0fc3      	lsrs	r3, r0, #31
  val->six_d_zh = d6d_src.zh;
 80008ba:	0688      	lsls	r0, r1, #26
  val->six_d_zl = d6d_src.zl;
 80008bc:	9307      	str	r3, [sp, #28]
  val->six_d_zh = d6d_src.zh;
 80008be:	0fc3      	lsrs	r3, r0, #31
  val->six_d_yl = d6d_src.yl;
 80008c0:	0748      	lsls	r0, r1, #29
  val->six_d_zh = d6d_src.zh;
 80008c2:	9308      	str	r3, [sp, #32]
  val->six_d_yl = d6d_src.yl;
 80008c4:	0fc3      	lsrs	r3, r0, #31
  val->six_d_yh = d6d_src.yh;
 80008c6:	0708      	lsls	r0, r1, #28
  val->six_d_yl = d6d_src.yl;
 80008c8:	9309      	str	r3, [sp, #36]	; 0x24
  val->six_d_yh = d6d_src.yh;
 80008ca:	0fc3      	lsrs	r3, r0, #31
  val->six_d_xl = d6d_src.xl;
 80008cc:	07c8      	lsls	r0, r1, #31
  val->six_d_xh = d6d_src.xh;
 80008ce:	0789      	lsls	r1, r1, #30
  val->six_d_yh = d6d_src.yh;
 80008d0:	930a      	str	r3, [sp, #40]	; 0x28
  val->six_d_xh = d6d_src.xh;
 80008d2:	0fcb      	lsrs	r3, r1, #31

  val->step_detector = emb_func_status_mainpage.is_step_det;
  val->tilt = emb_func_status_mainpage.is_tilt;
 80008d4:	06f1      	lsls	r1, r6, #27
  val->six_d_xh = d6d_src.xh;
 80008d6:	930b      	str	r3, [sp, #44]	; 0x2c
  val->tilt = emb_func_status_mainpage.is_tilt;
 80008d8:	0fcb      	lsrs	r3, r1, #31
  val->sig_mot = emb_func_status_mainpage.is_sigmot;
 80008da:	06b1      	lsls	r1, r6, #26
  val->tilt = emb_func_status_mainpage.is_tilt;
 80008dc:	9319      	str	r3, [sp, #100]	; 0x64
  val->sig_mot = emb_func_status_mainpage.is_sigmot;
 80008de:	0fcb      	lsrs	r3, r1, #31
 80008e0:	930c      	str	r3, [sp, #48]	; 0x30
  val->fsm_lc = emb_func_status_mainpage.is_fsm_lc;
 80008e2:	09f3      	lsrs	r3, r6, #7

  val->fsm1 = fsm_status_mainpage.is_fsm1;
  val->fsm2 = fsm_status_mainpage.is_fsm2;
 80008e4:	0791      	lsls	r1, r2, #30
  val->fsm_lc = emb_func_status_mainpage.is_fsm_lc;
 80008e6:	930d      	str	r3, [sp, #52]	; 0x34
  val->fsm1 = fsm_status_mainpage.is_fsm1;
 80008e8:	07d3      	lsls	r3, r2, #31
 80008ea:	931a      	str	r3, [sp, #104]	; 0x68
  val->fsm2 = fsm_status_mainpage.is_fsm2;
 80008ec:	0fcb      	lsrs	r3, r1, #31
  val->fsm3 = fsm_status_mainpage.is_fsm3;
 80008ee:	0751      	lsls	r1, r2, #29
  val->fsm2 = fsm_status_mainpage.is_fsm2;
 80008f0:	930e      	str	r3, [sp, #56]	; 0x38
  val->fsm3 = fsm_status_mainpage.is_fsm3;
 80008f2:	0fcb      	lsrs	r3, r1, #31
  val->fsm4 = fsm_status_mainpage.is_fsm4;
 80008f4:	0711      	lsls	r1, r2, #28
  val->fsm3 = fsm_status_mainpage.is_fsm3;
 80008f6:	930f      	str	r3, [sp, #60]	; 0x3c
  val->fsm4 = fsm_status_mainpage.is_fsm4;
 80008f8:	0fcb      	lsrs	r3, r1, #31
  val->fsm5 = fsm_status_mainpage.is_fsm5;
 80008fa:	06d1      	lsls	r1, r2, #27
  val->fsm4 = fsm_status_mainpage.is_fsm4;
 80008fc:	9310      	str	r3, [sp, #64]	; 0x40
  val->fsm5 = fsm_status_mainpage.is_fsm5;
 80008fe:	0fcb      	lsrs	r3, r1, #31
  val->fsm6 = fsm_status_mainpage.is_fsm6;
 8000900:	0691      	lsls	r1, r2, #26
  val->fsm5 = fsm_status_mainpage.is_fsm5;
 8000902:	9311      	str	r3, [sp, #68]	; 0x44
  val->fsm6 = fsm_status_mainpage.is_fsm6;
 8000904:	0fcb      	lsrs	r3, r1, #31
  val->fsm7 = fsm_status_mainpage.is_fsm7;
 8000906:	0651      	lsls	r1, r2, #25
  val->fsm6 = fsm_status_mainpage.is_fsm6;
 8000908:	931b      	str	r3, [sp, #108]	; 0x6c
  val->fsm7 = fsm_status_mainpage.is_fsm7;
 800090a:	0fcb      	lsrs	r3, r1, #31
 800090c:	9312      	str	r3, [sp, #72]	; 0x48
  val->gy_settling = status_reg_ois.gyro_settling;
 800090e:	2320      	movs	r3, #32
  val->fsm8 = fsm_status_mainpage.is_fsm8;
 8000910:	09d2      	lsrs	r2, r2, #7
 8000912:	9213      	str	r2, [sp, #76]	; 0x4c
  val->gy_settling = status_reg_ois.gyro_settling;
 8000914:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000916:	7821      	ldrb	r1, [r4, #0]
 8000918:	0892      	lsrs	r2, r2, #2
 800091a:	4399      	bics	r1, r3
  val->wake_up_z = wake_up_src.z_wu;
 800091c:	4663      	mov	r3, ip
  val->gy_settling = status_reg_ois.gyro_settling;
 800091e:	403a      	ands	r2, r7
 8000920:	0152      	lsls	r2, r2, #5
 8000922:	4311      	orrs	r1, r2
  val->wake_up_z = wake_up_src.z_wu;
 8000924:	009a      	lsls	r2, r3, #2
 8000926:	9b16      	ldr	r3, [sp, #88]	; 0x58
  val->gy_settling = status_reg_ois.gyro_settling;
 8000928:	7021      	strb	r1, [r4, #0]
  val->wake_up_z = wake_up_src.z_wu;
 800092a:	0f99      	lsrs	r1, r3, #30
 800092c:	9b02      	ldr	r3, [sp, #8]
 800092e:	4311      	orrs	r1, r2
 8000930:	00da      	lsls	r2, r3, #3
 8000932:	9b06      	ldr	r3, [sp, #24]
 8000934:	430a      	orrs	r2, r1
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	4313      	orrs	r3, r2
  val->double_tap = tap_src.double_tap;
 800093a:	0fed      	lsrs	r5, r5, #31
  val->wake_up_z = wake_up_src.z_wu;
 800093c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800093e:	016d      	lsls	r5, r5, #5
 8000940:	432b      	orrs	r3, r5
 8000942:	0e55      	lsrs	r5, r2, #25
 8000944:	431d      	orrs	r5, r3
 8000946:	9b05      	ldr	r3, [sp, #20]
  val->tap_x = tap_src.x_tap;
 8000948:	9a04      	ldr	r2, [sp, #16]
  val->wake_up_z = wake_up_src.z_wu;
 800094a:	01db      	lsls	r3, r3, #7
 800094c:	431d      	orrs	r5, r3
 800094e:	7863      	ldrb	r3, [r4, #1]
  val->tap_x = tap_src.x_tap;
 8000950:	0f00      	lsrs	r0, r0, #28
  val->wake_up_z = wake_up_src.z_wu;
 8000952:	403b      	ands	r3, r7
 8000954:	431d      	orrs	r5, r3
  val->tap_x = tap_src.x_tap;
 8000956:	9b18      	ldr	r3, [sp, #96]	; 0x60
  val->wake_up_z = wake_up_src.z_wu;
 8000958:	7065      	strb	r5, [r4, #1]
  val->tap_x = tap_src.x_tap;
 800095a:	40bb      	lsls	r3, r7
 800095c:	4313      	orrs	r3, r2
 800095e:	4318      	orrs	r0, r3
 8000960:	0002      	movs	r2, r0
 8000962:	2004      	movs	r0, #4
 8000964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  val->six_d_zh = d6d_src.zh;
 8000966:	250f      	movs	r5, #15
  val->tap_x = tap_src.x_tap;
 8000968:	011b      	lsls	r3, r3, #4
 800096a:	431a      	orrs	r2, r3
 800096c:	9b09      	ldr	r3, [sp, #36]	; 0x24



  /* embedded func */
  ret = lsm6dsv_mem_bank_set(ctx, LSM6DSV_EMBED_FUNC_MEM_BANK);
 800096e:	0039      	movs	r1, r7
  val->tap_x = tap_src.x_tap;
 8000970:	015b      	lsls	r3, r3, #5
 8000972:	4313      	orrs	r3, r2
 8000974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000976:	0192      	lsls	r2, r2, #6
 8000978:	431a      	orrs	r2, r3
 800097a:	9b07      	ldr	r3, [sp, #28]
 800097c:	01db      	lsls	r3, r3, #7
 800097e:	431a      	orrs	r2, r3
 8000980:	78a3      	ldrb	r3, [r4, #2]
 8000982:	4003      	ands	r3, r0
 8000984:	431a      	orrs	r2, r3
  val->six_d_zh = d6d_src.zh;
 8000986:	9b15      	ldr	r3, [sp, #84]	; 0x54
  val->tap_x = tap_src.x_tap;
 8000988:	70a2      	strb	r2, [r4, #2]
  val->six_d_zh = d6d_src.zh;
 800098a:	005a      	lsls	r2, r3, #1
 800098c:	9b08      	ldr	r3, [sp, #32]
 800098e:	431a      	orrs	r2, r3
 8000990:	9b03      	ldr	r3, [sp, #12]
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4313      	orrs	r3, r2
 8000996:	2208      	movs	r2, #8
 8000998:	4016      	ands	r6, r2
 800099a:	78e2      	ldrb	r2, [r4, #3]
 800099c:	4333      	orrs	r3, r6
 800099e:	43aa      	bics	r2, r5
 80009a0:	402b      	ands	r3, r5
 80009a2:	4313      	orrs	r3, r2
  val->tilt = emb_func_status_mainpage.is_tilt;
 80009a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  val->six_d_zh = d6d_src.zh;
 80009a6:	70e3      	strb	r3, [r4, #3]
  val->tilt = emb_func_status_mainpage.is_tilt;
 80009a8:	40ba      	lsls	r2, r7
 80009aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	431a      	orrs	r2, r3
 80009b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80009b8:	0ed2      	lsrs	r2, r2, #27
 80009ba:	431a      	orrs	r2, r3
 80009bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80009be:	015b      	lsls	r3, r3, #5
 80009c0:	4313      	orrs	r3, r2
 80009c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80009c4:	0192      	lsls	r2, r2, #6
 80009c6:	431a      	orrs	r2, r3
 80009c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80009ca:	01db      	lsls	r3, r3, #7
 80009cc:	431a      	orrs	r2, r3
 80009ce:	7923      	ldrb	r3, [r4, #4]
 80009d0:	43ba      	bics	r2, r7
 80009d2:	403b      	ands	r3, r7
 80009d4:	431a      	orrs	r2, r3
 80009d6:	7122      	strb	r2, [r4, #4]
  val->fsm5 = fsm_status_mainpage.is_fsm5;
 80009d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80009da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80009dc:	40bb      	lsls	r3, r7
 80009de:	4313      	orrs	r3, r2
 80009e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  ret = lsm6dsv_mem_bank_set(ctx, LSM6DSV_EMBED_FUNC_MEM_BANK);
 80009e2:	9801      	ldr	r0, [sp, #4]
  val->fsm5 = fsm_status_mainpage.is_fsm5;
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	4313      	orrs	r3, r2
 80009e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80009ea:	00d2      	lsls	r2, r2, #3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	7962      	ldrb	r2, [r4, #5]
 80009f0:	402b      	ands	r3, r5
 80009f2:	43aa      	bics	r2, r5
 80009f4:	4313      	orrs	r3, r2
 80009f6:	7163      	strb	r3, [r4, #5]
  ret = lsm6dsv_mem_bank_set(ctx, LSM6DSV_EMBED_FUNC_MEM_BANK);
 80009f8:	f7ff fdd3 	bl	80005a2 <lsm6dsv_mem_bank_set>
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_EXEC_STATUS, (uint8_t *)&emb_func_exec_status, 1);
 80009fc:	003b      	movs	r3, r7
  ret = lsm6dsv_mem_bank_set(ctx, LSM6DSV_EMBED_FUNC_MEM_BANK);
 80009fe:	0006      	movs	r6, r0
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_EXEC_STATUS, (uint8_t *)&emb_func_exec_status, 1);
 8000a00:	2107      	movs	r1, #7
 8000a02:	aa1c      	add	r2, sp, #112	; 0x70
 8000a04:	9801      	ldr	r0, [sp, #4]
 8000a06:	f7ff fd63 	bl	80004d0 <lsm6dsv_read_reg>
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_SRC, (uint8_t *)&emb_func_src, 1);
 8000a0a:	003b      	movs	r3, r7
 8000a0c:	2164      	movs	r1, #100	; 0x64
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_EXEC_STATUS, (uint8_t *)&emb_func_exec_status, 1);
 8000a0e:	1836      	adds	r6, r6, r0
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_SRC, (uint8_t *)&emb_func_src, 1);
 8000a10:	aa1e      	add	r2, sp, #120	; 0x78
 8000a12:	9801      	ldr	r0, [sp, #4]
 8000a14:	f7ff fd5c 	bl	80004d0 <lsm6dsv_read_reg>
  ret += lsm6dsv_mem_bank_set(ctx, LSM6DSV_MAIN_MEM_BANK);
 8000a18:	9900      	ldr	r1, [sp, #0]
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_SRC, (uint8_t *)&emb_func_src, 1);
 8000a1a:	1836      	adds	r6, r6, r0
  ret += lsm6dsv_mem_bank_set(ctx, LSM6DSV_MAIN_MEM_BANK);
 8000a1c:	9801      	ldr	r0, [sp, #4]
 8000a1e:	f7ff fdc0 	bl	80005a2 <lsm6dsv_mem_bank_set>
 8000a22:	1833      	adds	r3, r6, r0
 8000a24:	9300      	str	r3, [sp, #0]
  if (ret != 0) { return ret; }
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d148      	bne.n	8000abc <lsm6dsv_all_sources_get+0x372>

  val->emb_func_stand_by = emb_func_exec_status.emb_func_endop;
  val->emb_func_time_exceed = emb_func_exec_status.emb_func_exec_ovr;
 8000a2a:	ab1c      	add	r3, sp, #112	; 0x70
  val->step_count_inc = emb_func_src.stepcounter_bit_set;
 8000a2c:	7a1a      	ldrb	r2, [r3, #8]
  val->emb_func_time_exceed = emb_func_exec_status.emb_func_exec_ovr;
 8000a2e:	7819      	ldrb	r1, [r3, #0]
  val->step_count_overflow = emb_func_src.step_overflow;
  val->step_on_delta_time = emb_func_src.step_count_delta_ia;

  val->step_detector = emb_func_src.step_detected;
 8000a30:	0696      	lsls	r6, r2, #26
  val->step_count_inc = emb_func_src.stepcounter_bit_set;
 8000a32:	0753      	lsls	r3, r2, #29
 8000a34:	0fdb      	lsrs	r3, r3, #31
  val->step_detector = emb_func_src.step_detected;
 8000a36:	0ff6      	lsrs	r6, r6, #31
 8000a38:	00f6      	lsls	r6, r6, #3
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	4333      	orrs	r3, r6
  val->step_count_overflow = emb_func_src.step_overflow;
 8000a3e:	0716      	lsls	r6, r2, #28
 8000a40:	0ff6      	lsrs	r6, r6, #31
  val->step_on_delta_time = emb_func_src.step_count_delta_ia;
 8000a42:	06d2      	lsls	r2, r2, #27
  val->step_detector = emb_func_src.step_detected;
 8000a44:	0176      	lsls	r6, r6, #5
  val->step_on_delta_time = emb_func_src.step_count_delta_ia;
 8000a46:	0fd2      	lsrs	r2, r2, #31
  val->emb_func_time_exceed = emb_func_exec_status.emb_func_exec_ovr;
 8000a48:	0848      	lsrs	r0, r1, #1
  val->step_detector = emb_func_src.step_detected;
 8000a4a:	4333      	orrs	r3, r6
 8000a4c:	0192      	lsls	r2, r2, #6
  val->emb_func_stand_by = emb_func_exec_status.emb_func_endop;
 8000a4e:	07c9      	lsls	r1, r1, #31
  val->step_detector = emb_func_src.step_detected;
 8000a50:	4313      	orrs	r3, r2
 8000a52:	0e09      	lsrs	r1, r1, #24
 8000a54:	430b      	orrs	r3, r1
 8000a56:	2107      	movs	r1, #7
 8000a58:	78e2      	ldrb	r2, [r4, #3]

  /* sensor hub */
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_STATUS_MASTER_MAINPAGE, (uint8_t *)&status_shub, 1);
 8000a5a:	ae1f      	add	r6, sp, #124	; 0x7c
  val->step_detector = emb_func_src.step_detected;
 8000a5c:	400a      	ands	r2, r1
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	70e3      	strb	r3, [r4, #3]
  val->emb_func_time_exceed = emb_func_exec_status.emb_func_exec_ovr;
 8000a62:	0003      	movs	r3, r0
 8000a64:	7920      	ldrb	r0, [r4, #4]
 8000a66:	403b      	ands	r3, r7
 8000a68:	43b8      	bics	r0, r7
 8000a6a:	4318      	orrs	r0, r3
 8000a6c:	7120      	strb	r0, [r4, #4]
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_STATUS_MASTER_MAINPAGE, (uint8_t *)&status_shub, 1);
 8000a6e:	003b      	movs	r3, r7
 8000a70:	0032      	movs	r2, r6
 8000a72:	9801      	ldr	r0, [sp, #4]
 8000a74:	3141      	adds	r1, #65	; 0x41
 8000a76:	f7ff fd2b 	bl	80004d0 <lsm6dsv_read_reg>
 8000a7a:	9000      	str	r0, [sp, #0]
  if (ret != 0) { return ret; }
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d11d      	bne.n	8000abc <lsm6dsv_all_sources_get+0x372>

  val->sh_endop = status_shub.sens_hub_endop;
  val->sh_wr_once = status_shub.wr_once_done;
 8000a80:	7832      	ldrb	r2, [r6, #0]
  val->sh_slave3_nack = status_shub.slave3_nack;
  val->sh_slave2_nack = status_shub.slave2_nack;
  val->sh_slave1_nack = status_shub.slave1_nack;
  val->sh_slave0_nack = status_shub.slave0_nack;
 8000a82:	0713      	lsls	r3, r2, #28
  val->sh_endop = status_shub.sens_hub_endop;
 8000a84:	07d6      	lsls	r6, r2, #31
  val->sh_slave0_nack = status_shub.slave0_nack;
 8000a86:	0fdb      	lsrs	r3, r3, #31
  val->sh_endop = status_shub.sens_hub_endop;
 8000a88:	0ef6      	lsrs	r6, r6, #27
 8000a8a:	015b      	lsls	r3, r3, #5
 8000a8c:	4333      	orrs	r3, r6
  val->sh_slave1_nack = status_shub.slave1_nack;
 8000a8e:	06d6      	lsls	r6, r2, #27
  val->sh_wr_once = status_shub.wr_once_done;
 8000a90:	09d0      	lsrs	r0, r2, #7
  val->sh_slave3_nack = status_shub.slave3_nack;
 8000a92:	0651      	lsls	r1, r2, #25
  val->sh_slave1_nack = status_shub.slave1_nack;
 8000a94:	0ff6      	lsrs	r6, r6, #31
  val->sh_slave2_nack = status_shub.slave2_nack;
 8000a96:	0692      	lsls	r2, r2, #26
  val->sh_endop = status_shub.sens_hub_endop;
 8000a98:	01b6      	lsls	r6, r6, #6
  val->sh_slave2_nack = status_shub.slave2_nack;
 8000a9a:	0fd2      	lsrs	r2, r2, #31
  val->sh_endop = status_shub.sens_hub_endop;
 8000a9c:	01d2      	lsls	r2, r2, #7
 8000a9e:	4333      	orrs	r3, r6
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	7962      	ldrb	r2, [r4, #5]
  val->sh_slave3_nack = status_shub.slave3_nack;
 8000aa4:	40b8      	lsls	r0, r7
  val->sh_endop = status_shub.sens_hub_endop;
 8000aa6:	402a      	ands	r2, r5
 8000aa8:	4313      	orrs	r3, r2
  val->sh_slave3_nack = status_shub.slave3_nack;
 8000aaa:	2203      	movs	r2, #3
 8000aac:	0fc9      	lsrs	r1, r1, #31
  val->sh_endop = status_shub.sens_hub_endop;
 8000aae:	7163      	strb	r3, [r4, #5]
  val->sh_slave3_nack = status_shub.slave3_nack;
 8000ab0:	79a3      	ldrb	r3, [r4, #6]
 8000ab2:	4301      	orrs	r1, r0
 8000ab4:	4011      	ands	r1, r2
 8000ab6:	4393      	bics	r3, r2
 8000ab8:	4319      	orrs	r1, r3
 8000aba:	71a1      	strb	r1, [r4, #6]

  return ret;
}
 8000abc:	9800      	ldr	r0, [sp, #0]
 8000abe:	b023      	add	sp, #140	; 0x8c
 8000ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ac2 <lsm6dsv_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000ac2:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_OUTX_L_G, &buff[0], 6);
 8000ac4:	2306      	movs	r3, #6
{
 8000ac6:	000c      	movs	r4, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_OUTX_L_G, &buff[0], 6);
 8000ac8:	466a      	mov	r2, sp
 8000aca:	2122      	movs	r1, #34	; 0x22
 8000acc:	f7ff fd00 	bl	80004d0 <lsm6dsv_read_reg>
  if (ret != 0) { return ret; }
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d111      	bne.n	8000af8 <lsm6dsv_angular_rate_raw_get+0x36>

  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000ad4:	466b      	mov	r3, sp
 8000ad6:	785a      	ldrb	r2, [r3, #1]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0212      	lsls	r2, r2, #8
 8000adc:	189b      	adds	r3, r3, r2
 8000ade:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000ae0:	466b      	mov	r3, sp
 8000ae2:	78da      	ldrb	r2, [r3, #3]
 8000ae4:	789b      	ldrb	r3, [r3, #2]
 8000ae6:	0212      	lsls	r2, r2, #8
 8000ae8:	189b      	adds	r3, r3, r2
 8000aea:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000aec:	466b      	mov	r3, sp
 8000aee:	795a      	ldrb	r2, [r3, #5]
 8000af0:	791b      	ldrb	r3, [r3, #4]
 8000af2:	0212      	lsls	r2, r2, #8
 8000af4:	189b      	adds	r3, r3, r2
 8000af6:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8000af8:	bd16      	pop	{r1, r2, r4, pc}

08000afa <lsm6dsv_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000afa:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_OUTX_L_A, &buff[0], 6);
 8000afc:	2306      	movs	r3, #6
{
 8000afe:	000c      	movs	r4, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_OUTX_L_A, &buff[0], 6);
 8000b00:	466a      	mov	r2, sp
 8000b02:	2128      	movs	r1, #40	; 0x28
 8000b04:	f7ff fce4 	bl	80004d0 <lsm6dsv_read_reg>
  if (ret != 0) { return ret; }
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d111      	bne.n	8000b30 <lsm6dsv_acceleration_raw_get+0x36>

  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000b0c:	466b      	mov	r3, sp
 8000b0e:	785a      	ldrb	r2, [r3, #1]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0212      	lsls	r2, r2, #8
 8000b14:	189b      	adds	r3, r3, r2
 8000b16:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000b18:	466b      	mov	r3, sp
 8000b1a:	78da      	ldrb	r2, [r3, #3]
 8000b1c:	789b      	ldrb	r3, [r3, #2]
 8000b1e:	0212      	lsls	r2, r2, #8
 8000b20:	189b      	adds	r3, r3, r2
 8000b22:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000b24:	466b      	mov	r3, sp
 8000b26:	795a      	ldrb	r2, [r3, #5]
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	0212      	lsls	r2, r2, #8
 8000b2c:	189b      	adds	r3, r3, r2
 8000b2e:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8000b30:	bd16      	pop	{r1, r2, r4, pc}

08000b32 <lsm6dsv_filt_settling_mask_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_filt_settling_mask_set(stmdev_ctx_t *ctx,
                                       lsm6dsv_filt_settling_mask_t val)
{
 8000b32:	b5f0      	push	{r4, r5, r6, r7, lr}
  lsm6dsv_ui_int_ois_t ui_int_ois;
  lsm6dsv_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL4, (uint8_t *)&ctrl4, 1);
  ctrl4.drdy_mask = val.drdy;
 8000b34:	2601      	movs	r6, #1
{
 8000b36:	b085      	sub	sp, #20
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL4, (uint8_t *)&ctrl4, 1);
 8000b38:	2301      	movs	r3, #1
{
 8000b3a:	1c0c      	adds	r4, r1, #0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL4, (uint8_t *)&ctrl4, 1);
 8000b3c:	aa03      	add	r2, sp, #12
 8000b3e:	2113      	movs	r1, #19
{
 8000b40:	0005      	movs	r5, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL4, (uint8_t *)&ctrl4, 1);
 8000b42:	f7ff fcc5 	bl	80004d0 <lsm6dsv_read_reg>
  ctrl4.drdy_mask = val.drdy;
 8000b46:	466b      	mov	r3, sp
 8000b48:	0032      	movs	r2, r6
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	7b1b      	ldrb	r3, [r3, #12]
 8000b4e:	4022      	ands	r2, r4
 8000b50:	00d2      	lsls	r2, r2, #3
 8000b52:	438b      	bics	r3, r1
 8000b54:	4313      	orrs	r3, r2
 8000b56:	466a      	mov	r2, sp
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL4, (uint8_t *)&ctrl4, 1);
 8000b58:	0007      	movs	r7, r0
  ctrl4.drdy_mask = val.drdy;
 8000b5a:	7313      	strb	r3, [r2, #12]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_CTRL4, (uint8_t *)&ctrl4, 1);
 8000b5c:	0028      	movs	r0, r5
 8000b5e:	0033      	movs	r3, r6
 8000b60:	aa03      	add	r2, sp, #12
 8000b62:	310b      	adds	r1, #11
 8000b64:	f7ff fcb9 	bl	80004da <lsm6dsv_write_reg>
 8000b68:	1838      	adds	r0, r7, r0
  if (ret != 0) { return ret; }
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d136      	bne.n	8000bdc <lsm6dsv_filt_settling_mask_set+0xaa>

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_CFG, (uint8_t *)&emb_func_cfg, 1);
 8000b6e:	0033      	movs	r3, r6
 8000b70:	2163      	movs	r1, #99	; 0x63
 8000b72:	aa01      	add	r2, sp, #4
 8000b74:	0028      	movs	r0, r5
 8000b76:	f7ff fcab 	bl	80004d0 <lsm6dsv_read_reg>
  emb_func_cfg.emb_func_irq_mask_xl_settl = val.irq_xl;
  emb_func_cfg.emb_func_irq_mask_g_settl = val.irq_g;
 8000b7a:	0723      	lsls	r3, r4, #28
  emb_func_cfg.emb_func_irq_mask_xl_settl = val.irq_xl;
 8000b7c:	0762      	lsls	r2, r4, #29
  emb_func_cfg.emb_func_irq_mask_g_settl = val.irq_g;
 8000b7e:	0fdb      	lsrs	r3, r3, #31
  emb_func_cfg.emb_func_irq_mask_xl_settl = val.irq_xl;
 8000b80:	0fd2      	lsrs	r2, r2, #31
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	015b      	lsls	r3, r3, #5
 8000b86:	4313      	orrs	r3, r2
 8000b88:	466a      	mov	r2, sp
 8000b8a:	2130      	movs	r1, #48	; 0x30
 8000b8c:	7912      	ldrb	r2, [r2, #4]
 8000b8e:	400b      	ands	r3, r1
 8000b90:	438a      	bics	r2, r1
 8000b92:	4313      	orrs	r3, r2
 8000b94:	466a      	mov	r2, sp
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_CFG, (uint8_t *)&emb_func_cfg, 1);
 8000b96:	0007      	movs	r7, r0
  emb_func_cfg.emb_func_irq_mask_xl_settl = val.irq_xl;
 8000b98:	7113      	strb	r3, [r2, #4]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_EMB_FUNC_CFG, (uint8_t *)&emb_func_cfg, 1);
 8000b9a:	0028      	movs	r0, r5
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	aa01      	add	r2, sp, #4
 8000ba0:	3133      	adds	r1, #51	; 0x33
 8000ba2:	f7ff fc9a 	bl	80004da <lsm6dsv_write_reg>
 8000ba6:	1838      	adds	r0, r7, r0
  if (ret != 0) { return ret; }
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d117      	bne.n	8000bdc <lsm6dsv_filt_settling_mask_set+0xaa>

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_UI_INT_OIS, (uint8_t *)&ui_int_ois, 1);
 8000bac:	0033      	movs	r3, r6
 8000bae:	216f      	movs	r1, #111	; 0x6f
 8000bb0:	aa02      	add	r2, sp, #8
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	f7ff fc8c 	bl	80004d0 <lsm6dsv_read_reg>
  ui_int_ois.drdy_mask_ois = val.ois_drdy;
 8000bb8:	466b      	mov	r3, sp
 8000bba:	2240      	movs	r2, #64	; 0x40
 8000bbc:	40f4      	lsrs	r4, r6
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	4034      	ands	r4, r6
 8000bc2:	4393      	bics	r3, r2
 8000bc4:	466a      	mov	r2, sp
 8000bc6:	01a4      	lsls	r4, r4, #6
 8000bc8:	4323      	orrs	r3, r4
 8000bca:	7213      	strb	r3, [r2, #8]
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_UI_INT_OIS, (uint8_t *)&ui_int_ois, 1);
 8000bcc:	0007      	movs	r7, r0
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_UI_INT_OIS, (uint8_t *)&ui_int_ois, 1);
 8000bce:	0033      	movs	r3, r6
 8000bd0:	216f      	movs	r1, #111	; 0x6f
 8000bd2:	0028      	movs	r0, r5
 8000bd4:	aa02      	add	r2, sp, #8
 8000bd6:	f7ff fc80 	bl	80004da <lsm6dsv_write_reg>
 8000bda:	1838      	adds	r0, r7, r0

  return ret;
}
 8000bdc:	b005      	add	sp, #20
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000be0 <lsm6dsv_filt_gy_lp1_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_filt_gy_lp1_bandwidth_set(stmdev_ctx_t *ctx,
                                          lsm6dsv_filt_gy_lp1_bandwidth_t val)
{
 8000be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsv_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 8000be2:	2301      	movs	r3, #1
{
 8000be4:	000c      	movs	r4, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 8000be6:	aa01      	add	r2, sp, #4
 8000be8:	2115      	movs	r1, #21
{
 8000bea:	0005      	movs	r5, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 8000bec:	f7ff fc70 	bl	80004d0 <lsm6dsv_read_reg>
  if (ret == 0)
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	d10f      	bne.n	8000c14 <lsm6dsv_filt_gy_lp1_bandwidth_set+0x34>
  {
    ctrl6.lpf1_g_bw = (uint8_t)val & 0x0Fu;
 8000bf4:	466a      	mov	r2, sp
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	4023      	ands	r3, r4
 8000bfa:	7914      	ldrb	r4, [r2, #4]
 8000bfc:	2270      	movs	r2, #112	; 0x70
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	4394      	bics	r4, r2
 8000c02:	431c      	orrs	r4, r3
 8000c04:	466b      	mov	r3, sp
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 8000c06:	2115      	movs	r1, #21
    ctrl6.lpf1_g_bw = (uint8_t)val & 0x0Fu;
 8000c08:	711c      	strb	r4, [r3, #4]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 8000c0a:	0028      	movs	r0, r5
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	aa01      	add	r2, sp, #4
 8000c10:	f7ff fc63 	bl	80004da <lsm6dsv_write_reg>
  }

  return ret;
}
 8000c14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08000c16 <lsm6dsv_filt_gy_lp1_set>:
  * @param  val      It enables gyroscope digital LPF1 filter. If the OIS chain is disabled, the bandwidth can be selected through LPF1_G_BW.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_filt_gy_lp1_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000c16:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsv_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL7, (uint8_t *)&ctrl7, 1);
 8000c18:	2301      	movs	r3, #1
{
 8000c1a:	000d      	movs	r5, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL7, (uint8_t *)&ctrl7, 1);
 8000c1c:	aa01      	add	r2, sp, #4
 8000c1e:	2116      	movs	r1, #22
{
 8000c20:	0004      	movs	r4, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL7, (uint8_t *)&ctrl7, 1);
 8000c22:	f7ff fc55 	bl	80004d0 <lsm6dsv_read_reg>
  if (ret == 0)
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d10b      	bne.n	8000c42 <lsm6dsv_filt_gy_lp1_set+0x2c>
  {
    ctrl7.lpf1_g_en = val;
 8000c2a:	466a      	mov	r2, sp
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	7911      	ldrb	r1, [r2, #4]
 8000c30:	401d      	ands	r5, r3
 8000c32:	4399      	bics	r1, r3
 8000c34:	4329      	orrs	r1, r5
 8000c36:	7111      	strb	r1, [r2, #4]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL7, (uint8_t *)&ctrl7, 1);
 8000c38:	0020      	movs	r0, r4
 8000c3a:	2116      	movs	r1, #22
 8000c3c:	aa01      	add	r2, sp, #4
 8000c3e:	f7ff fc4c 	bl	80004da <lsm6dsv_write_reg>
  }

  return ret;
}
 8000c42:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08000c44 <lsm6dsv_filt_xl_lp2_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_filt_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                          lsm6dsv_filt_xl_lp2_bandwidth_t val)
{
 8000c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsv_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8000c46:	2301      	movs	r3, #1
{
 8000c48:	000d      	movs	r5, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8000c4a:	aa01      	add	r2, sp, #4
 8000c4c:	2117      	movs	r1, #23
{
 8000c4e:	0004      	movs	r4, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8000c50:	f7ff fc3e 	bl	80004d0 <lsm6dsv_read_reg>
  if (ret == 0)
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d10d      	bne.n	8000c74 <lsm6dsv_filt_xl_lp2_bandwidth_set+0x30>
  {
    ctrl8.hp_lpf2_xl_bw = (uint8_t)val & 0x07U;
 8000c58:	466b      	mov	r3, sp
 8000c5a:	7919      	ldrb	r1, [r3, #4]
 8000c5c:	231f      	movs	r3, #31
 8000c5e:	4019      	ands	r1, r3
 8000c60:	466b      	mov	r3, sp
 8000c62:	016d      	lsls	r5, r5, #5
 8000c64:	4329      	orrs	r1, r5
 8000c66:	7119      	strb	r1, [r3, #4]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8000c68:	0020      	movs	r0, r4
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2117      	movs	r1, #23
 8000c6e:	aa01      	add	r2, sp, #4
 8000c70:	f7ff fc33 	bl	80004da <lsm6dsv_write_reg>
  }

  return ret;
}
 8000c74:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08000c76 <lsm6dsv_filt_xl_lp2_set>:
  * @param  val      Enable accelerometer LPS2 (Low Pass Filter 2) filtering stage.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_filt_xl_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsv_ctrl9_t ctrl9;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL9, (uint8_t *)&ctrl9, 1);
 8000c78:	2301      	movs	r3, #1
{
 8000c7a:	000c      	movs	r4, r1
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL9, (uint8_t *)&ctrl9, 1);
 8000c7c:	aa01      	add	r2, sp, #4
 8000c7e:	2118      	movs	r1, #24
{
 8000c80:	0005      	movs	r5, r0
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL9, (uint8_t *)&ctrl9, 1);
 8000c82:	f7ff fc25 	bl	80004d0 <lsm6dsv_read_reg>
  if (ret == 0)
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d10e      	bne.n	8000ca8 <lsm6dsv_filt_xl_lp2_set+0x32>
  {
    ctrl9.lpf2_xl_en = val;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4669      	mov	r1, sp
 8000c8e:	401c      	ands	r4, r3
 8000c90:	00e2      	lsls	r2, r4, #3
 8000c92:	790c      	ldrb	r4, [r1, #4]
 8000c94:	2108      	movs	r1, #8
 8000c96:	438c      	bics	r4, r1
 8000c98:	4314      	orrs	r4, r2
 8000c9a:	466a      	mov	r2, sp
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL9, (uint8_t *)&ctrl9, 1);
 8000c9c:	0028      	movs	r0, r5
    ctrl9.lpf2_xl_en = val;
 8000c9e:	7114      	strb	r4, [r2, #4]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL9, (uint8_t *)&ctrl9, 1);
 8000ca0:	3110      	adds	r1, #16
 8000ca2:	aa01      	add	r2, sp, #4
 8000ca4:	f7ff fc19 	bl	80004da <lsm6dsv_write_reg>
  }

  return ret;
}
 8000ca8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08000caa <platform_delay>:
 * @brief  platform specific delay (platform dependent)
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms) {
 8000caa:	b510      	push	{r4, lr}
    HAL_Delay(ms);
 8000cac:	f000 fbd0 	bl	8001450 <HAL_Delay>
}
 8000cb0:	bd10      	pop	{r4, pc}
	...

08000cb4 <platform_write>:
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8000cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000cb6:	26fa      	movs	r6, #250	; 0xfa
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8000cb8:	0004      	movs	r4, r0
 8000cba:	b085      	sub	sp, #20
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8000cbc:	4d0f      	ldr	r5, [pc, #60]	; (8000cfc <platform_write+0x48>)
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8000cbe:	9302      	str	r3, [sp, #8]
 8000cc0:	ab02      	add	r3, sp, #8
 8000cc2:	1ddf      	adds	r7, r3, #7
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8000cc4:	0028      	movs	r0, r5
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8000cc6:	9201      	str	r2, [sp, #4]
 8000cc8:	71d9      	strb	r1, [r3, #7]
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000cca:	00b6      	lsls	r6, r6, #2
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2102      	movs	r1, #2
 8000cd0:	f000 fde2 	bl	8001898 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000cd4:	0033      	movs	r3, r6
 8000cd6:	0039      	movs	r1, r7
 8000cd8:	2201      	movs	r2, #1
 8000cda:	0020      	movs	r0, r4
 8000cdc:	f001 fb37 	bl	800234e <HAL_SPI_Transmit>
    spi_status = HAL_SPI_Transmit(handle, (uint8_t *)bufp, len, 1000);
 8000ce0:	0033      	movs	r3, r6
 8000ce2:	9a02      	ldr	r2, [sp, #8]
 8000ce4:	9901      	ldr	r1, [sp, #4]
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	f001 fb31 	bl	800234e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8000cec:	0028      	movs	r0, r5
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	f000 fdd1 	bl	8001898 <HAL_GPIO_WritePin>
}
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	b005      	add	sp, #20
 8000cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfc:	50000400 	.word	0x50000400

08000d00 <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	9302      	str	r3, [sp, #8]
 8000d06:	ab02      	add	r3, sp, #8
 8000d08:	1ddf      	adds	r7, r3, #7
    reg |= 0x80;
 8000d0a:	2380      	movs	r3, #128	; 0x80
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000d0c:	26fa      	movs	r6, #250	; 0xfa
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8000d0e:	0004      	movs	r4, r0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d10:	4d0f      	ldr	r5, [pc, #60]	; (8000d50 <platform_read+0x50>)
    reg |= 0x80;
 8000d12:	425b      	negs	r3, r3
 8000d14:	430b      	orrs	r3, r1
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d16:	0028      	movs	r0, r5
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8000d18:	9201      	str	r2, [sp, #4]
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000d1a:	00b6      	lsls	r6, r6, #2
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2102      	movs	r1, #2
    reg |= 0x80;
 8000d20:	703b      	strb	r3, [r7, #0]
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d22:	f000 fdb9 	bl	8001898 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000d26:	0033      	movs	r3, r6
 8000d28:	0039      	movs	r1, r7
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	0020      	movs	r0, r4
 8000d2e:	f001 fb0e 	bl	800234e <HAL_SPI_Transmit>
    spi_status = HAL_SPI_Receive(handle, bufp, len, 1000);
 8000d32:	0033      	movs	r3, r6
 8000d34:	9a02      	ldr	r2, [sp, #8]
 8000d36:	9901      	ldr	r1, [sp, #4]
 8000d38:	0020      	movs	r0, r4
 8000d3a:	f001 fccb 	bl	80026d4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000d3e:	0028      	movs	r0, r5
 8000d40:	2201      	movs	r2, #1
 8000d42:	2102      	movs	r1, #2
 8000d44:	f000 fda8 	bl	8001898 <HAL_GPIO_WritePin>
}
 8000d48:	2000      	movs	r0, #0
 8000d4a:	b005      	add	sp, #20
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	50000400 	.word	0x50000400

08000d54 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000d54:	b530      	push	{r4, r5, lr}
 8000d56:	b099      	sub	sp, #100	; 0x64
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d58:	2220      	movs	r2, #32
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	a80c      	add	r0, sp, #48	; 0x30
 8000d5e:	f002 fcf1 	bl	8003744 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d62:	2214      	movs	r2, #20
 8000d64:	2100      	movs	r1, #0
 8000d66:	4668      	mov	r0, sp
 8000d68:	f002 fcec 	bl	8003744 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	2218      	movs	r2, #24
 8000d6e:	2100      	movs	r1, #0
 8000d70:	a805      	add	r0, sp, #20
 8000d72:	f002 fce7 	bl	8003744 <memset>
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d76:	491c      	ldr	r1, [pc, #112]	; (8000de8 <SystemClock_Config+0x94>)
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <SystemClock_Config+0x98>)
 8000d7a:	680a      	ldr	r2, [r1, #0]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d7c:	2402      	movs	r4, #2
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7e:	401a      	ands	r2, r3
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9315      	str	r3, [sp, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	02db      	lsls	r3, r3, #11
 8000d94:	9316      	str	r3, [sp, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000d96:	2380      	movs	r3, #128	; 0x80
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	2501      	movs	r5, #1
    RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000d9a:	03db      	lsls	r3, r3, #15
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d9c:	a80b      	add	r0, sp, #44	; 0x2c
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9e:	940b      	str	r4, [sp, #44]	; 0x2c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da0:	950e      	str	r5, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	9414      	str	r4, [sp, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000da4:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000da6:	f000 fdc5 	bl	8001934 <HAL_RCC_OscConfig>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dae:	b672      	cpsid	i
 */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000db0:	e7fe      	b.n	8000db0 <SystemClock_Config+0x5c>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000db2:	230f      	movs	r3, #15
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	9002      	str	r0, [sp, #8]
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000db6:	9300      	str	r3, [sp, #0]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db8:	9003      	str	r0, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	3b0c      	subs	r3, #12
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	9004      	str	r0, [sp, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000dbe:	0029      	movs	r1, r5
 8000dc0:	4668      	mov	r0, sp
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc2:	9301      	str	r3, [sp, #4]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000dc4:	f001 f804 	bl	8001dd0 <HAL_RCC_ClockConfig>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x7c>
 8000dcc:	b672      	cpsid	i
    while (1) {
 8000dce:	e7fe      	b.n	8000dce <SystemClock_Config+0x7a>
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000dd0:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000dd2:	a805      	add	r0, sp, #20
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd4:	9405      	str	r4, [sp, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000dd6:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000dd8:	f001 f8e8 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x90>
 8000de0:	b672      	cpsid	i
    while (1) {
 8000de2:	e7fe      	b.n	8000de2 <SystemClock_Config+0x8e>
}
 8000de4:	b019      	add	sp, #100	; 0x64
 8000de6:	bd30      	pop	{r4, r5, pc}
 8000de8:	40007000 	.word	0x40007000
 8000dec:	ffffe7ff 	.word	0xffffe7ff

08000df0 <main>:
int main(void) {
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b08f      	sub	sp, #60	; 0x3c
    HAL_Init();
 8000df4:	f000 fb06 	bl	8001404 <HAL_Init>
    SystemClock_Config();
 8000df8:	f7ff ffac 	bl	8000d54 <SystemClock_Config>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	2214      	movs	r2, #20
 8000dfe:	2100      	movs	r1, #0
 8000e00:	a809      	add	r0, sp, #36	; 0x24
 8000e02:	f002 fc9f 	bl	8003744 <memset>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2702      	movs	r7, #2
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000e0c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4ca9      	ldr	r4, [pc, #676]	; (80010b4 <main+0x2c4>)
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000e10:	48a9      	ldr	r0, [pc, #676]	; (80010b8 <main+0x2c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000e14:	01c9      	lsls	r1, r1, #7
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4313      	orrs	r3, r2
 8000e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2500      	movs	r5, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4013      	ands	r3, r2
 8000e20:	9304      	str	r3, [sp, #16]
 8000e22:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4333      	orrs	r3, r6
 8000e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e2e:	4033      	ands	r3, r6
 8000e30:	9305      	str	r3, [sp, #20]
 8000e32:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e36:	433b      	orrs	r3, r7
 8000e38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e3c:	403b      	ands	r3, r7
 8000e3e:	9306      	str	r3, [sp, #24]
 8000e40:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000e42:	f000 fd29 	bl	8001898 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e46:	20a0      	movs	r0, #160	; 0xa0
 8000e48:	2200      	movs	r2, #0
 8000e4a:	0031      	movs	r1, r6
 8000e4c:	05c0      	lsls	r0, r0, #23
 8000e4e:	f000 fd23 	bl	8001898 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	0039      	movs	r1, r7
 8000e56:	4899      	ldr	r0, [pc, #612]	; (80010bc <main+0x2cc>)
 8000e58:	f000 fd1e 	bl	8001898 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = UART_DE_Pin;
 8000e5c:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	4896      	ldr	r0, [pc, #600]	; (80010b8 <main+0x2c8>)
    GPIO_InitStruct.Pin = UART_DE_Pin;
 8000e60:	01db      	lsls	r3, r3, #7
    HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 8000e62:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = UART_DE_Pin;
 8000e64:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f000 fc66 	bl	800173c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	20a0      	movs	r0, #160	; 0xa0
 8000e72:	a909      	add	r1, sp, #36	; 0x24
 8000e74:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e76:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f000 fc5d 	bl	800173c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin;
 8000e84:	4b8e      	ldr	r3, [pc, #568]	; (80010c0 <main+0x2d0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	a909      	add	r1, sp, #36	; 0x24
 8000e88:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin;
 8000e8a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f000 fc54 	bl	800173c <HAL_GPIO_Init>
    HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000e94:	4889      	ldr	r0, [pc, #548]	; (80010bc <main+0x2cc>)
 8000e96:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000e98:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f000 fc4c 	bl	800173c <HAL_GPIO_Init>
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000ea6:	002a      	movs	r2, r5
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea8:	4333      	orrs	r3, r6
 8000eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8000eac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000eae:	0029      	movs	r1, r5
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb0:	4033      	ands	r3, r6
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000eb2:	200a      	movs	r0, #10
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb4:	9303      	str	r3, [sp, #12]
 8000eb6:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000eb8:	f000 fadc 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ebc:	200a      	movs	r0, #10
 8000ebe:	f000 fb03 	bl	80014c8 <HAL_NVIC_EnableIRQ>
    huart2.Instance = USART2;
 8000ec2:	4c80      	ldr	r4, [pc, #512]	; (80010c4 <main+0x2d4>)
 8000ec4:	4b80      	ldr	r3, [pc, #512]	; (80010c8 <main+0x2d8>)
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ec6:	0020      	movs	r0, r4
    huart2.Instance = USART2;
 8000ec8:	6023      	str	r3, [r4, #0]
    huart2.Init.BaudRate = 1000000;
 8000eca:	4b80      	ldr	r3, [pc, #512]	; (80010cc <main+0x2dc>)
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ecc:	60a5      	str	r5, [r4, #8]
    huart2.Init.BaudRate = 1000000;
 8000ece:	6063      	str	r3, [r4, #4]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	230c      	movs	r3, #12
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed2:	60e5      	str	r5, [r4, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000ed4:	6125      	str	r5, [r4, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed6:	6163      	str	r3, [r4, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed8:	61a5      	str	r5, [r4, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eda:	61e5      	str	r5, [r4, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000edc:	6225      	str	r5, [r4, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ede:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ee0:	f002 faea 	bl	80034b8 <HAL_UART_Init>
 8000ee4:	42a8      	cmp	r0, r5
 8000ee6:	d001      	beq.n	8000eec <main+0xfc>
 8000ee8:	b672      	cpsid	i
    while (1) {
 8000eea:	e7fe      	b.n	8000eea <main+0xfa>
    hspi1.Instance = SPI1;
 8000eec:	4d78      	ldr	r5, [pc, #480]	; (80010d0 <main+0x2e0>)
 8000eee:	4b79      	ldr	r3, [pc, #484]	; (80010d4 <main+0x2e4>)
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef0:	60a8      	str	r0, [r5, #8]
    hspi1.Instance = SPI1;
 8000ef2:	602b      	str	r3, [r5, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef4:	2382      	movs	r3, #130	; 0x82
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	606b      	str	r3, [r5, #4]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000efa:	33fc      	adds	r3, #252	; 0xfc
 8000efc:	61ab      	str	r3, [r5, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000efe:	3bf1      	subs	r3, #241	; 0xf1
 8000f00:	3bff      	subs	r3, #255	; 0xff
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f02:	60e8      	str	r0, [r5, #12]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f04:	61eb      	str	r3, [r5, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f06:	6228      	str	r0, [r5, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f08:	6268      	str	r0, [r5, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0a:	62a8      	str	r0, [r5, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8000f0c:	3b09      	subs	r3, #9
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f0e:	0028      	movs	r0, r5
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f10:	612f      	str	r7, [r5, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f12:	616e      	str	r6, [r5, #20]
    hspi1.Init.CRCPolynomial = 7;
 8000f14:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f16:	f001 f9bf 	bl	8002298 <HAL_SPI_Init>
 8000f1a:	9001      	str	r0, [sp, #4]
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d001      	beq.n	8000f24 <main+0x134>
 8000f20:	b672      	cpsid	i
    while (1) {
 8000f22:	e7fe      	b.n	8000f22 <main+0x132>
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, 0);
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	9a01      	ldr	r2, [sp, #4]
 8000f28:	4863      	ldr	r0, [pc, #396]	; (80010b8 <main+0x2c8>)
 8000f2a:	01c9      	lsls	r1, r1, #7
 8000f2c:	f000 fcb4 	bl	8001898 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1); // CS high also means IMU deselected from SPI and I2c activated
 8000f30:	0032      	movs	r2, r6
 8000f32:	0039      	movs	r1, r7
 8000f34:	4861      	ldr	r0, [pc, #388]	; (80010bc <main+0x2cc>)
 8000f36:	f000 fcaf 	bl	8001898 <HAL_GPIO_WritePin>
    HAL_MultiProcessor_Init(&huart2, UART_ADDR, UART_WAKEUPMETHOD_ADDRESSMARK);
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	2106      	movs	r1, #6
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	0020      	movs	r0, r4
 8000f42:	f002 faeb 	bl	800351c <HAL_MultiProcessor_Init>
    HAL_MultiProcessorEx_AddressLength_Set(&huart2, UART_ADDRESS_DETECT_4B);
 8000f46:	9901      	ldr	r1, [sp, #4]
 8000f48:	0020      	movs	r0, r4
 8000f4a:	f002 fbb2 	bl	80036b2 <HAL_MultiProcessorEx_AddressLength_Set>
    HAL_MultiProcessor_EnableMuteMode(&huart2);
 8000f4e:	0020      	movs	r0, r4
 8000f50:	f002 fb2a 	bl	80035a8 <HAL_MultiProcessor_EnableMuteMode>
    HAL_MultiProcessor_EnterMuteMode(&huart2);
 8000f54:	0020      	movs	r0, r4
 8000f56:	f002 f823 	bl	8002fa0 <HAL_MultiProcessor_EnterMuteMode>
    HAL_UARTEx_ReceiveToIdle_IT(&huart2, uart_RX, UART_RX_SIZE);
 8000f5a:	495f      	ldr	r1, [pc, #380]	; (80010d8 <main+0x2e8>)
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	0020      	movs	r0, r4
 8000f60:	f002 fbbf 	bl	80036e2 <HAL_UARTEx_ReceiveToIdle_IT>
    dev_ctx.write_reg = platform_write;
 8000f64:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <main+0x2ec>)
    HAL_Delay(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
    dev_ctx.write_reg = platform_write;
 8000f68:	9309      	str	r3, [sp, #36]	; 0x24
    dev_ctx.read_reg = platform_read;
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	; (80010e0 <main+0x2f0>)
    dev_ctx.handle = &SENSOR_BUS;
 8000f6c:	950c      	str	r5, [sp, #48]	; 0x30
    dev_ctx.read_reg = platform_read;
 8000f6e:	930a      	str	r3, [sp, #40]	; 0x28
    dev_ctx.mdelay = platform_delay;
 8000f70:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <main+0x2f4>)
 8000f72:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_Delay(100);
 8000f74:	f000 fa6c 	bl	8001450 <HAL_Delay>
    HAL_Delay(ms);
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f000 fa69 	bl	8001450 <HAL_Delay>
    lsm6dsv_device_id_get(&dev_ctx, &whoamI);
 8000f7e:	4c5a      	ldr	r4, [pc, #360]	; (80010e8 <main+0x2f8>)
 8000f80:	a809      	add	r0, sp, #36	; 0x24
 8000f82:	0021      	movs	r1, r4
 8000f84:	f7ff fb2a 	bl	80005dc <lsm6dsv_device_id_get>
    while (whoamI != LSM6DSV_ID) {
 8000f88:	7823      	ldrb	r3, [r4, #0]
 8000f8a:	2b70      	cmp	r3, #112	; 0x70
 8000f8c:	d000      	beq.n	8000f90 <main+0x1a0>
 8000f8e:	e088      	b.n	80010a2 <main+0x2b2>
    lsm6dsv_reset_set(&dev_ctx, LSM6DSV_RESTORE_CTRL_REGS);
 8000f90:	2104      	movs	r1, #4
 8000f92:	a809      	add	r0, sp, #36	; 0x24
 8000f94:	f7ff faa6 	bl	80004e4 <lsm6dsv_reset_set>
        lsm6dsv_reset_get(&dev_ctx, &rst);
 8000f98:	ab02      	add	r3, sp, #8
 8000f9a:	1cdc      	adds	r4, r3, #3
 8000f9c:	0021      	movs	r1, r4
 8000f9e:	a809      	add	r0, sp, #36	; 0x24
 8000fa0:	f7ff fad6 	bl	8000550 <lsm6dsv_reset_get>
    } while (rst != LSM6DSV_READY);
 8000fa4:	7824      	ldrb	r4, [r4, #0]
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	d1f6      	bne.n	8000f98 <main+0x1a8>
    lsm6dsv_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8000faa:	2101      	movs	r1, #1
 8000fac:	a809      	add	r0, sp, #36	; 0x24
 8000fae:	f7ff fb82 	bl	80006b6 <lsm6dsv_block_data_update_set>
    lsm6dsv_xl_data_rate_set(&dev_ctx, LSM6DSV_ODR_AT_120Hz);
 8000fb2:	2106      	movs	r1, #6
 8000fb4:	a809      	add	r0, sp, #36	; 0x24
 8000fb6:	f7ff fb18 	bl	80005ea <lsm6dsv_xl_data_rate_set>
    lsm6dsv_gy_data_rate_set(&dev_ctx, LSM6DSV_ODR_AT_120Hz);
 8000fba:	2106      	movs	r1, #6
 8000fbc:	a809      	add	r0, sp, #36	; 0x24
 8000fbe:	f7ff fb47 	bl	8000650 <lsm6dsv_gy_data_rate_set>
    lsm6dsv_xl_full_scale_set(&dev_ctx, LSM6DSV_2g);
 8000fc2:	0021      	movs	r1, r4
 8000fc4:	a809      	add	r0, sp, #36	; 0x24
 8000fc6:	f7ff fba8 	bl	800071a <lsm6dsv_xl_full_scale_set>
    lsm6dsv_gy_full_scale_set(&dev_ctx, LSM6DSV_2000dps);
 8000fca:	2104      	movs	r1, #4
 8000fcc:	a809      	add	r0, sp, #36	; 0x24
 8000fce:	f7ff fb8c 	bl	80006ea <lsm6dsv_gy_full_scale_set>
    filt_settling_mask.drdy = PROPERTY_ENABLE;
 8000fd2:	210d      	movs	r1, #13
 8000fd4:	4a45      	ldr	r2, [pc, #276]	; (80010ec <main+0x2fc>)
    lsm6dsv_filt_settling_mask_set(&dev_ctx, filt_settling_mask);
 8000fd6:	a809      	add	r0, sp, #36	; 0x24
    filt_settling_mask.drdy = PROPERTY_ENABLE;
 8000fd8:	7813      	ldrb	r3, [r2, #0]
        if (all_sources.drdy_xl) {
 8000fda:	2601      	movs	r6, #1
    filt_settling_mask.drdy = PROPERTY_ENABLE;
 8000fdc:	438b      	bics	r3, r1
 8000fde:	4319      	orrs	r1, r3
 8000fe0:	7011      	strb	r1, [r2, #0]
    lsm6dsv_filt_settling_mask_set(&dev_ctx, filt_settling_mask);
 8000fe2:	f7ff fda6 	bl	8000b32 <lsm6dsv_filt_settling_mask_set>
    lsm6dsv_filt_gy_lp1_set(&dev_ctx, PROPERTY_ENABLE);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	a809      	add	r0, sp, #36	; 0x24
 8000fea:	f7ff fe14 	bl	8000c16 <lsm6dsv_filt_gy_lp1_set>
    lsm6dsv_filt_gy_lp1_bandwidth_set(&dev_ctx, LSM6DSV_GY_STRONG);
 8000fee:	2104      	movs	r1, #4
 8000ff0:	a809      	add	r0, sp, #36	; 0x24
 8000ff2:	f7ff fdf5 	bl	8000be0 <lsm6dsv_filt_gy_lp1_bandwidth_set>
    lsm6dsv_filt_xl_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	a809      	add	r0, sp, #36	; 0x24
 8000ffa:	f7ff fe3c 	bl	8000c76 <lsm6dsv_filt_xl_lp2_set>
    lsm6dsv_filt_xl_lp2_bandwidth_set(&dev_ctx, LSM6DSV_XL_STRONG);
 8000ffe:	2104      	movs	r1, #4
 8001000:	a809      	add	r0, sp, #36	; 0x24
 8001002:	f7ff fe1f 	bl	8000c44 <lsm6dsv_filt_xl_lp2_bandwidth_set>
        if (all_sources.drdy_gy) {
 8001006:	2702      	movs	r7, #2
        lsm6dsv_all_sources_get(&dev_ctx, &all_sources);
 8001008:	a907      	add	r1, sp, #28
 800100a:	a809      	add	r0, sp, #36	; 0x24
 800100c:	f7ff fb9d 	bl	800074a <lsm6dsv_all_sources_get>
        if (all_sources.drdy_xl) {
 8001010:	ab02      	add	r3, sp, #8
 8001012:	7d1b      	ldrb	r3, [r3, #20]
 8001014:	4d36      	ldr	r5, [pc, #216]	; (80010f0 <main+0x300>)
 8001016:	4233      	tst	r3, r6
 8001018:	d008      	beq.n	800102c <main+0x23c>
            memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800101a:	2100      	movs	r1, #0
 800101c:	2206      	movs	r2, #6
 800101e:	0028      	movs	r0, r5
 8001020:	f002 fb90 	bl	8003744 <memset>
            lsm6dsv_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001024:	0029      	movs	r1, r5
 8001026:	a809      	add	r0, sp, #36	; 0x24
 8001028:	f7ff fd67 	bl	8000afa <lsm6dsv_acceleration_raw_get>
        if (all_sources.drdy_gy) {
 800102c:	ab02      	add	r3, sp, #8
 800102e:	7d1b      	ldrb	r3, [r3, #20]
 8001030:	4c30      	ldr	r4, [pc, #192]	; (80010f4 <main+0x304>)
 8001032:	423b      	tst	r3, r7
 8001034:	d008      	beq.n	8001048 <main+0x258>
            memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001036:	2100      	movs	r1, #0
 8001038:	2206      	movs	r2, #6
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fb82 	bl	8003744 <memset>
            lsm6dsv_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8001040:	0021      	movs	r1, r4
 8001042:	a809      	add	r0, sp, #36	; 0x24
 8001044:	f7ff fd3d 	bl	8000ac2 <lsm6dsv_angular_rate_raw_get>
        uart_TX[0] = (uint8_t)(data_raw_acceleration[0] >> (7)) & 0b01111111;
 8001048:	227f      	movs	r2, #127	; 0x7f
 800104a:	2300      	movs	r3, #0
 800104c:	5ee9      	ldrsh	r1, [r5, r3]
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <main+0x308>)
 8001050:	11c8      	asrs	r0, r1, #7
 8001052:	4010      	ands	r0, r2
		 uart_TX[1] = (uint8_t)(data_raw_acceleration[0] >> (0)) & 0b01111111;
 8001054:	4011      	ands	r1, r2
        uart_TX[0] = (uint8_t)(data_raw_acceleration[0] >> (7)) & 0b01111111;
 8001056:	7018      	strb	r0, [r3, #0]
		 uart_TX[1] = (uint8_t)(data_raw_acceleration[0] >> (0)) & 0b01111111;
 8001058:	7059      	strb	r1, [r3, #1]
		 uart_TX[2] = (uint8_t)(data_raw_acceleration[1] >> (7)) & 0b01111111;
 800105a:	2002      	movs	r0, #2
 800105c:	5e29      	ldrsh	r1, [r5, r0]
 800105e:	11c8      	asrs	r0, r1, #7
 8001060:	4010      	ands	r0, r2
		 uart_TX[3] = (uint8_t)(data_raw_acceleration[1] >> (0)) & 0b01111111;
 8001062:	4011      	ands	r1, r2
		 uart_TX[2] = (uint8_t)(data_raw_acceleration[1] >> (7)) & 0b01111111;
 8001064:	7098      	strb	r0, [r3, #2]
		 uart_TX[3] = (uint8_t)(data_raw_acceleration[1] >> (0)) & 0b01111111;
 8001066:	70d9      	strb	r1, [r3, #3]
		 uart_TX[4] = (uint8_t)(data_raw_acceleration[2] >> (7)) & 0b01111111;
 8001068:	2004      	movs	r0, #4
 800106a:	5e29      	ldrsh	r1, [r5, r0]
 800106c:	11c8      	asrs	r0, r1, #7
 800106e:	4010      	ands	r0, r2
		 uart_TX[5] = (uint8_t)(data_raw_acceleration[2] >> (0)) & 0b01111111;
 8001070:	4011      	ands	r1, r2
		 uart_TX[4] = (uint8_t)(data_raw_acceleration[2] >> (7)) & 0b01111111;
 8001072:	7118      	strb	r0, [r3, #4]
		 uart_TX[5] = (uint8_t)(data_raw_acceleration[2] >> (0)) & 0b01111111;
 8001074:	7159      	strb	r1, [r3, #5]
		 uart_TX[6] = (uint8_t)(data_raw_angular_rate[0] >> (7)) & 0b01111111;
 8001076:	2000      	movs	r0, #0
 8001078:	5e21      	ldrsh	r1, [r4, r0]
 800107a:	11c8      	asrs	r0, r1, #7
 800107c:	4010      	ands	r0, r2
		 uart_TX[7] = (uint8_t)(data_raw_angular_rate[0] >> (0)) & 0b01111111;
 800107e:	4011      	ands	r1, r2
		 uart_TX[6] = (uint8_t)(data_raw_angular_rate[0] >> (7)) & 0b01111111;
 8001080:	7198      	strb	r0, [r3, #6]
		 uart_TX[7] = (uint8_t)(data_raw_angular_rate[0] >> (0)) & 0b01111111;
 8001082:	71d9      	strb	r1, [r3, #7]
		 uart_TX[8] = (uint8_t)(data_raw_angular_rate[1] >> (7)) & 0b01111111;
 8001084:	2002      	movs	r0, #2
 8001086:	5e21      	ldrsh	r1, [r4, r0]
 8001088:	11c8      	asrs	r0, r1, #7
 800108a:	4010      	ands	r0, r2
		 uart_TX[9] = (uint8_t)(data_raw_angular_rate[1] >> (0)) & 0b01111111;
 800108c:	4011      	ands	r1, r2
		 uart_TX[8] = (uint8_t)(data_raw_angular_rate[1] >> (7)) & 0b01111111;
 800108e:	7218      	strb	r0, [r3, #8]
		 uart_TX[9] = (uint8_t)(data_raw_angular_rate[1] >> (0)) & 0b01111111;
 8001090:	7259      	strb	r1, [r3, #9]
		 uart_TX[10] = (uint8_t)(data_raw_angular_rate[2] >> (7)) & 0b01111111;
 8001092:	2004      	movs	r0, #4
 8001094:	5e21      	ldrsh	r1, [r4, r0]
 8001096:	11c8      	asrs	r0, r1, #7
 8001098:	4010      	ands	r0, r2
		 uart_TX[11] = (uint8_t)(data_raw_angular_rate[2] >> (0)) & 0b01111111;
 800109a:	4011      	ands	r1, r2
		 uart_TX[10] = (uint8_t)(data_raw_angular_rate[2] >> (7)) & 0b01111111;
 800109c:	7298      	strb	r0, [r3, #10]
		 uart_TX[11] = (uint8_t)(data_raw_angular_rate[2] >> (0)) & 0b01111111;
 800109e:	72d9      	strb	r1, [r3, #11]
        lsm6dsv_all_sources_get(&dev_ctx, &all_sources);
 80010a0:	e7b2      	b.n	8001008 <main+0x218>
        lsm6dsv_device_id_get(&dev_ctx, &whoamI);
 80010a2:	0021      	movs	r1, r4
 80010a4:	a809      	add	r0, sp, #36	; 0x24
 80010a6:	f7ff fa99 	bl	80005dc <lsm6dsv_device_id_get>
        HAL_Delay(10);
 80010aa:	200a      	movs	r0, #10
 80010ac:	f000 f9d0 	bl	8001450 <HAL_Delay>
 80010b0:	e76a      	b.n	8000f88 <main+0x198>
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40021000 	.word	0x40021000
 80010b8:	50000800 	.word	0x50000800
 80010bc:	50000400 	.word	0x50000400
 80010c0:	00000202 	.word	0x00000202
 80010c4:	200000d8 	.word	0x200000d8
 80010c8:	40004400 	.word	0x40004400
 80010cc:	000f4240 	.word	0x000f4240
 80010d0:	20000080 	.word	0x20000080
 80010d4:	40013000 	.word	0x40013000
 80010d8:	20000160 	.word	0x20000160
 80010dc:	08000cb5 	.word	0x08000cb5
 80010e0:	08000d01 	.word	0x08000d01
 80010e4:	08000cab 	.word	0x08000cab
 80010e8:	2000016f 	.word	0x2000016f
 80010ec:	20000034 	.word	0x20000034
 80010f0:	20000028 	.word	0x20000028
 80010f4:	2000002e 	.word	0x2000002e
 80010f8:	20000163 	.word	0x20000163

080010fc <HAL_UARTEx_RxEventCallback>:
		if (uart_cmd[0] == CMD_GET_POSITION) {
 80010fc:	220f      	movs	r2, #15
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80010fe:	b570      	push	{r4, r5, r6, lr}
		uart_cmd[0] = uart_RX[0] & CMD_MASK;
 8001100:	4d11      	ldr	r5, [pc, #68]	; (8001148 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001102:	4c12      	ldr	r4, [pc, #72]	; (800114c <HAL_UARTEx_RxEventCallback+0x50>)
		if (uart_cmd[0] == CMD_GET_POSITION) {
 8001104:	782b      	ldrb	r3, [r5, #0]
 8001106:	4393      	bics	r3, r2
 8001108:	2bc0      	cmp	r3, #192	; 0xc0
 800110a:	d111      	bne.n	8001130 <HAL_UARTEx_RxEventCallback+0x34>
			HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, 1); // enable TX
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4810      	ldr	r0, [pc, #64]	; (8001150 <HAL_UARTEx_RxEventCallback+0x54>)
 8001110:	3a0e      	subs	r2, #14
 8001112:	01c9      	lsls	r1, r1, #7
 8001114:	f000 fbc0 	bl	8001898 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart2, uart_TX, 12);
 8001118:	220c      	movs	r2, #12
 800111a:	0020      	movs	r0, r4
 800111c:	490d      	ldr	r1, [pc, #52]	; (8001154 <HAL_UARTEx_RxEventCallback+0x58>)
 800111e:	f001 fc3f 	bl	80029a0 <HAL_UART_Transmit_DMA>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001122:	20a0      	movs	r0, #160	; 0xa0
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	05c0      	lsls	r0, r0, #23
 800112a:	f000 fbb5 	bl	8001898 <HAL_GPIO_WritePin>
}
 800112e:	bd70      	pop	{r4, r5, r6, pc}
			HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, 0); // set RX
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	2200      	movs	r2, #0
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <HAL_UARTEx_RxEventCallback+0x54>)
 8001136:	01c9      	lsls	r1, r1, #7
 8001138:	f000 fbae 	bl	8001898 <HAL_GPIO_WritePin>
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, uart_RX, UART_RX_SIZE);
 800113c:	2203      	movs	r2, #3
 800113e:	0029      	movs	r1, r5
 8001140:	0020      	movs	r0, r4
 8001142:	f002 face 	bl	80036e2 <HAL_UARTEx_ReceiveToIdle_IT>
 8001146:	e7ec      	b.n	8001122 <HAL_UARTEx_RxEventCallback+0x26>
 8001148:	20000160 	.word	0x20000160
 800114c:	200000d8 	.word	0x200000d8
 8001150:	50000800 	.word	0x50000800
 8001154:	20000163 	.word	0x20000163

08001158 <HAL_UART_TxCpltCallback>:
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, 0); // set RX
 8001158:	2180      	movs	r1, #128	; 0x80
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800115a:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, 0); // set RX
 800115c:	2200      	movs	r2, #0
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_UART_TxCpltCallback+0x1c>)
 8001160:	01c9      	lsls	r1, r1, #7
 8001162:	f000 fb99 	bl	8001898 <HAL_GPIO_WritePin>
    HAL_UARTEx_ReceiveToIdle_IT(&huart2, uart_RX, UART_RX_SIZE);
 8001166:	2203      	movs	r2, #3
 8001168:	4903      	ldr	r1, [pc, #12]	; (8001178 <HAL_UART_TxCpltCallback+0x20>)
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <HAL_UART_TxCpltCallback+0x24>)
 800116c:	f002 fab9 	bl	80036e2 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001170:	bd10      	pop	{r4, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	50000800 	.word	0x50000800
 8001178:	20000160 	.word	0x20000160
 800117c:	200000d8 	.word	0x200000d8

08001180 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) { // shouldn't happen but just in case of overrun, restart RX
 8001180:	b530      	push	{r4, r5, lr}
    while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8001182:	2520      	movs	r5, #32
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) { // shouldn't happen but just in case of overrun, restart RX
 8001184:	b087      	sub	sp, #28
    while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8001186:	4c0d      	ldr	r4, [pc, #52]	; (80011bc <HAL_UART_ErrorCallback+0x3c>)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	001a      	movs	r2, r3
 800118e:	402a      	ands	r2, r5
 8001190:	422b      	tst	r3, r5
 8001192:	d10b      	bne.n	80011ac <HAL_UART_ErrorCallback+0x2c>
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, 0); // set RX
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <HAL_UART_ErrorCallback+0x40>)
 8001198:	01c9      	lsls	r1, r1, #7
 800119a:	f000 fb7d 	bl	8001898 <HAL_GPIO_WritePin>
    HAL_UARTEx_ReceiveToIdle_IT(&huart2, uart_RX, UART_RX_SIZE);
 800119e:	2203      	movs	r2, #3
 80011a0:	0020      	movs	r0, r4
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <HAL_UART_ErrorCallback+0x44>)
 80011a4:	f002 fa9d 	bl	80036e2 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80011a8:	b007      	add	sp, #28
 80011aa:	bd30      	pop	{r4, r5, pc}
        HAL_UART_Receive(&huart2, temp_buffer, 1, 1);
 80011ac:	2301      	movs	r3, #1
 80011ae:	0020      	movs	r0, r4
 80011b0:	001a      	movs	r2, r3
 80011b2:	a901      	add	r1, sp, #4
 80011b4:	f002 f89e 	bl	80032f4 <HAL_UART_Receive>
 80011b8:	e7e5      	b.n	8001186 <HAL_UART_ErrorCallback+0x6>
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	200000d8 	.word	0x200000d8
 80011c0:	50000800 	.word	0x50000800
 80011c4:	20000160 	.word	0x20000160

080011c8 <Error_Handler>:
 80011c8:	b672      	cpsid	i
    while (1) {
 80011ca:	e7fe      	b.n	80011ca <Error_Handler+0x2>

080011cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011cc:	2201      	movs	r2, #1
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_MspInit+0x18>)
 80011d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011da:	0552      	lsls	r2, r2, #21
 80011dc:	430a      	orrs	r2, r1
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e0:	4770      	bx	lr
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e8:	b510      	push	{r4, lr}
 80011ea:	0004      	movs	r4, r0
 80011ec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	2214      	movs	r2, #20
 80011f0:	2100      	movs	r1, #0
 80011f2:	a801      	add	r0, sp, #4
 80011f4:	f002 faa6 	bl	8003744 <memset>
  if(hspi->Instance==SPI1)
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_SPI_MspInit+0x60>)
 80011fa:	6822      	ldr	r2, [r4, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d120      	bne.n	8001242 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_SPI_MspInit+0x64>)
 8001204:	0152      	lsls	r2, r2, #5
 8001206:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800120a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	430a      	orrs	r2, r1
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	400b      	ands	r3, r1
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001220:	23e0      	movs	r3, #224	; 0xe0
 8001222:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	3bde      	subs	r3, #222	; 0xde
 8001226:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f000 fa85 	bl	800173c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2019      	movs	r0, #25
 8001236:	0011      	movs	r1, r2
 8001238:	f000 f91c 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800123c:	2019      	movs	r0, #25
 800123e:	f000 f943 	bl	80014c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001242:	b006      	add	sp, #24
 8001244:	bd10      	pop	{r4, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40013000 	.word	0x40013000
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b530      	push	{r4, r5, lr}
 8001252:	0005      	movs	r5, r0
 8001254:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	2214      	movs	r2, #20
 8001258:	2100      	movs	r1, #0
 800125a:	a801      	add	r0, sp, #4
 800125c:	f002 fa72 	bl	8003744 <memset>
  if(huart->Instance==USART2)
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_UART_MspInit+0x90>)
 8001262:	682a      	ldr	r2, [r5, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d138      	bne.n	80012da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <HAL_UART_MspInit+0x94>)
 800126c:	0292      	lsls	r2, r2, #10
 800126e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	481d      	ldr	r0, [pc, #116]	; (80012e8 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001272:	430a      	orrs	r2, r1
 8001274:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2202      	movs	r2, #2
 8001278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127a:	4311      	orrs	r1, r2
 800127c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4013      	ands	r3, r2
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001288:	23c0      	movs	r3, #192	; 0xc0
 800128a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	3bbf      	subs	r3, #191	; 0xbf
 800128e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	189b      	adds	r3, r3, r2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f000 fa51 	bl	800173c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800129a:	4c14      	ldr	r4, [pc, #80]	; (80012ec <HAL_UART_MspInit+0x9c>)
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_UART_MspInit+0xa0>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80012a0:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 80012a2:	2304      	movs	r3, #4
 80012a4:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a6:	330c      	adds	r3, #12
 80012a8:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012aa:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012ac:	0020      	movs	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ae:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012b0:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b2:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b4:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012b6:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012b8:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012ba:	f000 f92b 	bl	8001514 <HAL_DMA_Init>
 80012be:	2800      	cmp	r0, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 80012c2:	f7ff ff81 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	201c      	movs	r0, #28
 80012ca:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012cc:	672c      	str	r4, [r5, #112]	; 0x70
 80012ce:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012d0:	f000 f8d0 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d4:	201c      	movs	r0, #28
 80012d6:	f000 f8f7 	bl	80014c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012da:	b007      	add	sp, #28
 80012dc:	bd30      	pop	{r4, r5, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	40004400 	.word	0x40004400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	50000400 	.word	0x50000400
 80012ec:	20000038 	.word	0x20000038
 80012f0:	4002001c 	.word	0x4002001c

080012f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler>

080012f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler>

080012f8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f895 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bd10      	pop	{r4, pc}

08001304 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001304:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001306:	4802      	ldr	r0, [pc, #8]	; (8001310 <DMA1_Channel2_3_IRQHandler+0xc>)
 8001308:	f000 f9cd 	bl	80016a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800130c:	bd10      	pop	{r4, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	20000038 	.word	0x20000038

08001314 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001314:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001316:	4802      	ldr	r0, [pc, #8]	; (8001320 <SPI1_IRQHandler+0xc>)
 8001318:	f001 fa88 	bl	800282c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800131c:	bd10      	pop	{r4, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	20000080 	.word	0x20000080

08001324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001324:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001326:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART2_IRQHandler+0xc>)
 8001328:	f001 fbf8 	bl	8002b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132c:	bd10      	pop	{r4, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	200000d8 	.word	0x200000d8

08001334 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	4770      	bx	lr
	...

08001338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800133a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800133c:	f7ff fffa 	bl	8001334 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001340:	4812      	ldr	r0, [pc, #72]	; (800138c <LoopForever+0x6>)
    LDR R1, [R0]
 8001342:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001344:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <LoopForever+0xa>)
    CMP R1, R2
 8001348:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800134a:	d105      	bne.n	8001358 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800134e:	4912      	ldr	r1, [pc, #72]	; (8001398 <LoopForever+0x12>)
    STR R1, [R0]
 8001350:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001352:	4812      	ldr	r0, [pc, #72]	; (800139c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001354:	4912      	ldr	r1, [pc, #72]	; (80013a0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001356:	6001      	str	r1, [r0, #0]

08001358 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <LoopForever+0x1e>)
  ldr r1, =_edata
 800135a:	4913      	ldr	r1, [pc, #76]	; (80013a8 <LoopForever+0x22>)
  ldr r2, =_sidata
 800135c:	4a13      	ldr	r2, [pc, #76]	; (80013ac <LoopForever+0x26>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001370:	4c10      	ldr	r4, [pc, #64]	; (80013b4 <LoopForever+0x2e>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f002 f9e9 	bl	8003754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff fd35 	bl	8000df0 <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
   ldr   r0, =_estack
 8001388:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 800138c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001390:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001394:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001398:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800139c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80013a0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013ac:	080037f4 	.word	0x080037f4
  ldr r2, =_sbss
 80013b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013b4:	20000174 	.word	0x20000174

080013b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_COMP_IRQHandler>
	...

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c0:	20fa      	movs	r0, #250	; 0xfa
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_InitTick+0x3c>)
 80013c4:	0080      	lsls	r0, r0, #2
 80013c6:	7819      	ldrb	r1, [r3, #0]
 80013c8:	f7fe feb2 	bl	8000130 <__udivsi3>
 80013cc:	4c0b      	ldr	r4, [pc, #44]	; (80013fc <HAL_InitTick+0x40>)
 80013ce:	0001      	movs	r1, r0
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	f7fe fead 	bl	8000130 <__udivsi3>
 80013d6:	f000 f883 	bl	80014e0 <HAL_SYSTICK_Config>
 80013da:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80013dc:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e2:	2d03      	cmp	r5, #3
 80013e4:	d807      	bhi.n	80013f6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e6:	3802      	subs	r0, #2
 80013e8:	0022      	movs	r2, r4
 80013ea:	0029      	movs	r1, r5
 80013ec:	f000 f842 	bl	8001474 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	0020      	movs	r0, r4
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_InitTick+0x44>)
 80013f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
 80013f8:	20000004 	.word	0x20000004
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000008 	.word	0x20000008

08001404 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_Init+0x24>)
{
 8001408:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800140a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140c:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800140e:	430b      	orrs	r3, r1
 8001410:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001412:	f7ff ffd3 	bl	80013bc <HAL_InitTick>
 8001416:	1e04      	subs	r4, r0, #0
 8001418:	d103      	bne.n	8001422 <HAL_Init+0x1e>
    HAL_MspInit();
 800141a:	f7ff fed7 	bl	80011cc <HAL_MspInit>
}
 800141e:	0020      	movs	r0, r4
 8001420:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001422:	2401      	movs	r4, #1
 8001424:	e7fb      	b.n	800141e <HAL_Init+0x1a>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <HAL_IncTick+0x10>)
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_IncTick+0x14>)
 8001430:	6811      	ldr	r1, [r2, #0]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	185b      	adds	r3, r3, r1
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	4770      	bx	lr
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	20000170 	.word	0x20000170
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001444:	4b01      	ldr	r3, [pc, #4]	; (800144c <HAL_GetTick+0x8>)
 8001446:	6818      	ldr	r0, [r3, #0]
}
 8001448:	4770      	bx	lr
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	20000170 	.word	0x20000170

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff fff6 	bl	8001444 <HAL_GetTick>
 8001458:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145a:	1c63      	adds	r3, r4, #1
 800145c:	d002      	beq.n	8001464 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <HAL_Delay+0x20>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	1b40      	subs	r0, r0, r5
 800146a:	42a0      	cmp	r0, r4
 800146c:	d3fa      	bcc.n	8001464 <HAL_Delay+0x14>
  {
  }
}
 800146e:	bd70      	pop	{r4, r5, r6, pc}
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001474:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001476:	25ff      	movs	r5, #255	; 0xff
 8001478:	2403      	movs	r4, #3
 800147a:	002a      	movs	r2, r5
 800147c:	4004      	ands	r4, r0
 800147e:	00e4      	lsls	r4, r4, #3
 8001480:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001482:	0189      	lsls	r1, r1, #6
 8001484:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001486:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001488:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800148c:	2800      	cmp	r0, #0
 800148e:	db0a      	blt.n	80014a6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001490:	24c0      	movs	r4, #192	; 0xc0
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_NVIC_SetPriority+0x4c>)
 8001494:	0880      	lsrs	r0, r0, #2
 8001496:	0080      	lsls	r0, r0, #2
 8001498:	18c0      	adds	r0, r0, r3
 800149a:	00a4      	lsls	r4, r4, #2
 800149c:	5903      	ldr	r3, [r0, r4]
 800149e:	4013      	ands	r3, r2
 80014a0:	430b      	orrs	r3, r1
 80014a2:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80014a4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a6:	200f      	movs	r0, #15
 80014a8:	4003      	ands	r3, r0
 80014aa:	3b08      	subs	r3, #8
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <HAL_NVIC_SetPriority+0x50>)
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	181b      	adds	r3, r3, r0
 80014b4:	69d8      	ldr	r0, [r3, #28]
 80014b6:	4002      	ands	r2, r0
 80014b8:	430a      	orrs	r2, r1
 80014ba:	61da      	str	r2, [r3, #28]
 80014bc:	e7f2      	b.n	80014a4 <HAL_NVIC_SetPriority+0x30>
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014c8:	2800      	cmp	r0, #0
 80014ca:	db05      	blt.n	80014d8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014cc:	231f      	movs	r3, #31
 80014ce:	4018      	ands	r0, r3
 80014d0:	3b1e      	subs	r3, #30
 80014d2:	4083      	lsls	r3, r0
 80014d4:	4a01      	ldr	r2, [pc, #4]	; (80014dc <HAL_NVIC_EnableIRQ+0x14>)
 80014d6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014d8:	4770      	bx	lr
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	1e43      	subs	r3, r0, #1
 80014e4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d20d      	bcs.n	8001508 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ec:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f4:	6a03      	ldr	r3, [r0, #32]
 80014f6:	0609      	lsls	r1, r1, #24
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001508:	4770      	bx	lr
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	e000e010 	.word	0xe000e010
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8001518:	2001      	movs	r0, #1
  if(hdma == NULL)
 800151a:	2c00      	cmp	r4, #0
 800151c:	d035      	beq.n	800158a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800151e:	6825      	ldr	r5, [r4, #0]
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_DMA_Init+0x78>)
 8001522:	2114      	movs	r1, #20
 8001524:	18e8      	adds	r0, r5, r3
 8001526:	f7fe fe03 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800152c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800152e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001530:	2302      	movs	r3, #2
 8001532:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001534:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8001536:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001538:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800153c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800153e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8001540:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001542:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8001544:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001546:	433b      	orrs	r3, r7
 8001548:	6967      	ldr	r7, [r4, #20]
 800154a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154c:	69a7      	ldr	r7, [r4, #24]
 800154e:	433b      	orrs	r3, r7
 8001550:	69e7      	ldr	r7, [r4, #28]
 8001552:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8001554:	6a27      	ldr	r7, [r4, #32]
 8001556:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8001558:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800155a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	01db      	lsls	r3, r3, #7
 8001560:	4299      	cmp	r1, r3
 8001562:	d00c      	beq.n	800157e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001564:	251c      	movs	r5, #28
 8001566:	4028      	ands	r0, r5
 8001568:	3d0d      	subs	r5, #13
 800156a:	4085      	lsls	r5, r0
 800156c:	490a      	ldr	r1, [pc, #40]	; (8001598 <HAL_DMA_Init+0x84>)
 800156e:	680b      	ldr	r3, [r1, #0]
 8001570:	43ab      	bics	r3, r5
 8001572:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001574:	6863      	ldr	r3, [r4, #4]
 8001576:	680d      	ldr	r5, [r1, #0]
 8001578:	4083      	lsls	r3, r0
 800157a:	432b      	orrs	r3, r5
 800157c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001580:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001582:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001584:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8001586:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001588:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800158c:	bffdfff8 	.word	0xbffdfff8
 8001590:	40020000 	.word	0x40020000
 8001594:	ffff800f 	.word	0xffff800f
 8001598:	400200a8 	.word	0x400200a8

0800159c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800159c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800159e:	1d45      	adds	r5, r0, #5
{
 80015a0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80015a2:	7feb      	ldrb	r3, [r5, #31]
{
 80015a4:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80015a6:	2002      	movs	r0, #2
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d029      	beq.n	8001600 <HAL_DMA_Start_IT+0x64>
 80015ac:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80015ae:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 80015b0:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	2600      	movs	r6, #0
 80015b6:	469c      	mov	ip, r3
 80015b8:	4660      	mov	r0, ip
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2801      	cmp	r0, #1
 80015be:	d12a      	bne.n	8001616 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015c0:	3001      	adds	r0, #1
 80015c2:	77f8      	strb	r0, [r7, #31]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015c4:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE(hdma);
 80015c6:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c8:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80015ca:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015cc:	6c26      	ldr	r6, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80015ce:	439d      	bics	r5, r3
 80015d0:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015d2:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80015d4:	403d      	ands	r5, r7
 80015d6:	40ab      	lsls	r3, r5
 80015d8:	6073      	str	r3, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015da:	9b01      	ldr	r3, [sp, #4]
 80015dc:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015de:	68a3      	ldr	r3, [r4, #8]
 80015e0:	2b10      	cmp	r3, #16
 80015e2:	d10e      	bne.n	8001602 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015e4:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015e6:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80015e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00c      	beq.n	8001608 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ee:	230e      	movs	r3, #14
 80015f0:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015f2:	4313      	orrs	r3, r2
 80015f4:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80015f6:	2301      	movs	r3, #1
 80015f8:	6802      	ldr	r2, [r0, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2000      	movs	r0, #0
}
 8001600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001602:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001604:	60c2      	str	r2, [r0, #12]
 8001606:	e7ef      	b.n	80015e8 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001608:	2204      	movs	r2, #4
 800160a:	6803      	ldr	r3, [r0, #0]
 800160c:	4393      	bics	r3, r2
 800160e:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001610:	6802      	ldr	r2, [r0, #0]
 8001612:	230a      	movs	r3, #10
 8001614:	e7ed      	b.n	80015f2 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8001616:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8001618:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 800161a:	e7f1      	b.n	8001600 <HAL_DMA_Start_IT+0x64>

0800161c <HAL_DMA_Abort>:
{
 800161c:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161e:	1d84      	adds	r4, r0, #6
 8001620:	7fe2      	ldrb	r2, [r4, #31]
{
 8001622:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001624:	2a02      	cmp	r2, #2
 8001626:	d006      	beq.n	8001636 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001628:	2204      	movs	r2, #4
 800162a:	63c2      	str	r2, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800162c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800162e:	2200      	movs	r2, #0
 8001630:	3305      	adds	r3, #5
 8001632:	77da      	strb	r2, [r3, #31]
}
 8001634:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001636:	6802      	ldr	r2, [r0, #0]
 8001638:	200e      	movs	r0, #14
 800163a:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800163c:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163e:	4381      	bics	r1, r0
 8001640:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001642:	2101      	movs	r1, #1
 8001644:	6810      	ldr	r0, [r2, #0]
 8001646:	4388      	bics	r0, r1
 8001648:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800164a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800164c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800164e:	402a      	ands	r2, r5
 8001650:	000d      	movs	r5, r1
 8001652:	4095      	lsls	r5, r2
 8001654:	6045      	str	r5, [r0, #4]
    return status;
 8001656:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001658:	77e1      	strb	r1, [r4, #31]
    return status;
 800165a:	e7e8      	b.n	800162e <HAL_DMA_Abort+0x12>

0800165c <HAL_DMA_Abort_IT>:
{
 800165c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800165e:	1d84      	adds	r4, r0, #6
 8001660:	7fe3      	ldrb	r3, [r4, #31]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d004      	beq.n	8001670 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001666:	2304      	movs	r3, #4
 8001668:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800166a:	3b03      	subs	r3, #3
}
 800166c:	0018      	movs	r0, r3
 800166e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001670:	210e      	movs	r1, #14
 8001672:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001674:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	438a      	bics	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800167c:	2201      	movs	r2, #1
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	4391      	bics	r1, r2
 8001682:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001684:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001686:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001688:	402b      	ands	r3, r5
 800168a:	0015      	movs	r5, r2
 800168c:	409d      	lsls	r5, r3
 800168e:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001690:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001692:	2400      	movs	r4, #0
 8001694:	1d43      	adds	r3, r0, #5
 8001696:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8001698:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800169a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800169c:	42a2      	cmp	r2, r4
 800169e:	d0e5      	beq.n	800166c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80016a0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80016a2:	0023      	movs	r3, r4
 80016a4:	e7e2      	b.n	800166c <HAL_DMA_Abort_IT+0x10>

080016a6 <HAL_DMA_IRQHandler>:
{
 80016a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80016a8:	261c      	movs	r6, #28
 80016aa:	2704      	movs	r7, #4
 80016ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016ae:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80016b0:	4032      	ands	r2, r6
 80016b2:	003e      	movs	r6, r7
 80016b4:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016b6:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80016b8:	6803      	ldr	r3, [r0, #0]
 80016ba:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80016bc:	4235      	tst	r5, r6
 80016be:	d00d      	beq.n	80016dc <HAL_DMA_IRQHandler+0x36>
 80016c0:	423c      	tst	r4, r7
 80016c2:	d00b      	beq.n	80016dc <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	0692      	lsls	r2, r2, #26
 80016c8:	d402      	bmi.n	80016d0 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	43ba      	bics	r2, r7
 80016ce:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80016d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80016d2:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d019      	beq.n	800170c <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80016d8:	4798      	blx	r3
  return;
 80016da:	e017      	b.n	800170c <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80016dc:	2702      	movs	r7, #2
 80016de:	003e      	movs	r6, r7
 80016e0:	4096      	lsls	r6, r2
 80016e2:	4235      	tst	r5, r6
 80016e4:	d013      	beq.n	800170e <HAL_DMA_IRQHandler+0x68>
 80016e6:	423c      	tst	r4, r7
 80016e8:	d011      	beq.n	800170e <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	0692      	lsls	r2, r2, #26
 80016ee:	d406      	bmi.n	80016fe <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016f0:	240a      	movs	r4, #10
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	43a2      	bics	r2, r4
 80016f6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80016f8:	2201      	movs	r2, #1
 80016fa:	1d83      	adds	r3, r0, #6
 80016fc:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80016fe:	2200      	movs	r2, #0
 8001700:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001702:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001704:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8001706:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001708:	4293      	cmp	r3, r2
 800170a:	d1e5      	bne.n	80016d8 <HAL_DMA_IRQHandler+0x32>
}
 800170c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800170e:	2608      	movs	r6, #8
 8001710:	0037      	movs	r7, r6
 8001712:	4097      	lsls	r7, r2
 8001714:	423d      	tst	r5, r7
 8001716:	d0f9      	beq.n	800170c <HAL_DMA_IRQHandler+0x66>
 8001718:	4234      	tst	r4, r6
 800171a:	d0f7      	beq.n	800170c <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171c:	250e      	movs	r5, #14
 800171e:	681c      	ldr	r4, [r3, #0]
 8001720:	43ac      	bics	r4, r5
 8001722:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001724:	2301      	movs	r3, #1
 8001726:	001c      	movs	r4, r3
 8001728:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800172a:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800172c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800172e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001730:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8001732:	2200      	movs	r2, #0
 8001734:	1d43      	adds	r3, r0, #5
 8001736:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001738:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800173a:	e7e5      	b.n	8001708 <HAL_DMA_IRQHandler+0x62>

0800173c <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 800173c:	2300      	movs	r3, #0
{
 800173e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001740:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001742:	680a      	ldr	r2, [r1, #0]
 8001744:	0014      	movs	r4, r2
 8001746:	40dc      	lsrs	r4, r3
 8001748:	d101      	bne.n	800174e <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 800174a:	b005      	add	sp, #20
 800174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800174e:	2501      	movs	r5, #1
 8001750:	0014      	movs	r4, r2
 8001752:	409d      	lsls	r5, r3
 8001754:	402c      	ands	r4, r5
 8001756:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 8001758:	422a      	tst	r2, r5
 800175a:	d100      	bne.n	800175e <HAL_GPIO_Init+0x22>
 800175c:	e090      	b.n	8001880 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800175e:	684a      	ldr	r2, [r1, #4]
 8001760:	005f      	lsls	r7, r3, #1
 8001762:	4694      	mov	ip, r2
 8001764:	2203      	movs	r2, #3
 8001766:	4664      	mov	r4, ip
 8001768:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800176a:	2403      	movs	r4, #3
 800176c:	40bc      	lsls	r4, r7
 800176e:	43e4      	mvns	r4, r4
 8001770:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001772:	1e54      	subs	r4, r2, #1
 8001774:	2c01      	cmp	r4, #1
 8001776:	d82e      	bhi.n	80017d6 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8001778:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800177a:	9c01      	ldr	r4, [sp, #4]
 800177c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	68cc      	ldr	r4, [r1, #12]
 8001780:	40bc      	lsls	r4, r7
 8001782:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001784:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001786:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001788:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178a:	43ac      	bics	r4, r5
 800178c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178e:	4664      	mov	r4, ip
 8001790:	0924      	lsrs	r4, r4, #4
 8001792:	4034      	ands	r4, r6
 8001794:	409c      	lsls	r4, r3
 8001796:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001798:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800179a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800179c:	9c01      	ldr	r4, [sp, #4]
 800179e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a0:	688c      	ldr	r4, [r1, #8]
 80017a2:	40bc      	lsls	r4, r7
 80017a4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80017a6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a8:	2a02      	cmp	r2, #2
 80017aa:	d116      	bne.n	80017da <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80017ac:	2507      	movs	r5, #7
 80017ae:	260f      	movs	r6, #15
 80017b0:	401d      	ands	r5, r3
 80017b2:	00ad      	lsls	r5, r5, #2
 80017b4:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 80017b6:	08dc      	lsrs	r4, r3, #3
 80017b8:	00a4      	lsls	r4, r4, #2
 80017ba:	1904      	adds	r4, r0, r4
 80017bc:	9402      	str	r4, [sp, #8]
 80017be:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80017c0:	9603      	str	r6, [sp, #12]
 80017c2:	0026      	movs	r6, r4
 80017c4:	9c03      	ldr	r4, [sp, #12]
 80017c6:	43a6      	bics	r6, r4
 80017c8:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80017ca:	690e      	ldr	r6, [r1, #16]
 80017cc:	40ae      	lsls	r6, r5
 80017ce:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 80017d0:	9c02      	ldr	r4, [sp, #8]
 80017d2:	6226      	str	r6, [r4, #32]
 80017d4:	e001      	b.n	80017da <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d6:	2a03      	cmp	r2, #3
 80017d8:	d1df      	bne.n	800179a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017da:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80017dc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017de:	9d01      	ldr	r5, [sp, #4]
 80017e0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e2:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e4:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 80017e6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e8:	4662      	mov	r2, ip
 80017ea:	02a4      	lsls	r4, r4, #10
 80017ec:	4222      	tst	r2, r4
 80017ee:	d047      	beq.n	8001880 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f0:	2501      	movs	r5, #1
 80017f2:	4c24      	ldr	r4, [pc, #144]	; (8001884 <HAL_GPIO_Init+0x148>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017f4:	27a0      	movs	r7, #160	; 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017f8:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	432a      	orrs	r2, r5
 80017fc:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80017fe:	4a22      	ldr	r2, [pc, #136]	; (8001888 <HAL_GPIO_Init+0x14c>)
 8001800:	089c      	lsrs	r4, r3, #2
 8001802:	00a4      	lsls	r4, r4, #2
 8001804:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001806:	220f      	movs	r2, #15
 8001808:	3502      	adds	r5, #2
 800180a:	401d      	ands	r5, r3
 800180c:	00ad      	lsls	r5, r5, #2
 800180e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8001810:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001812:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001814:	2200      	movs	r2, #0
 8001816:	42b8      	cmp	r0, r7
 8001818:	d008      	beq.n	800182c <HAL_GPIO_Init+0xf0>
 800181a:	4f1c      	ldr	r7, [pc, #112]	; (800188c <HAL_GPIO_Init+0x150>)
 800181c:	3201      	adds	r2, #1
 800181e:	42b8      	cmp	r0, r7
 8001820:	d004      	beq.n	800182c <HAL_GPIO_Init+0xf0>
 8001822:	4f1b      	ldr	r7, [pc, #108]	; (8001890 <HAL_GPIO_Init+0x154>)
 8001824:	3201      	adds	r2, #1
 8001826:	42b8      	cmp	r0, r7
 8001828:	d000      	beq.n	800182c <HAL_GPIO_Init+0xf0>
 800182a:	3204      	adds	r2, #4
 800182c:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182e:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001830:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001832:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8001834:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 8001836:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8001838:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800183a:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800183c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800183e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001840:	02ff      	lsls	r7, r7, #11
 8001842:	d401      	bmi.n	8001848 <HAL_GPIO_Init+0x10c>
        temp &= ~((uint32_t)iocurrent);
 8001844:	0035      	movs	r5, r6
 8001846:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001848:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800184a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800184c:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800184e:	9d00      	ldr	r5, [sp, #0]
 8001850:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001852:	02bf      	lsls	r7, r7, #10
 8001854:	d401      	bmi.n	800185a <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 8001856:	0035      	movs	r5, r6
 8001858:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185a:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 800185c:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800185e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001860:	9d00      	ldr	r5, [sp, #0]
 8001862:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001864:	03bf      	lsls	r7, r7, #14
 8001866:	d401      	bmi.n	800186c <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 8001868:	0035      	movs	r5, r6
 800186a:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800186e:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8001870:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8001872:	9e00      	ldr	r6, [sp, #0]
 8001874:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001876:	03ff      	lsls	r7, r7, #15
 8001878:	d401      	bmi.n	800187e <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 800187a:	4025      	ands	r5, r4
 800187c:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800187e:	6016      	str	r6, [r2, #0]
    position++;
 8001880:	3301      	adds	r3, #1
 8001882:	e75e      	b.n	8001742 <HAL_GPIO_Init+0x6>
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000
 800188c:	50000400 	.word	0x50000400
 8001890:	50000800 	.word	0x50000800
 8001894:	40010400 	.word	0x40010400

08001898 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001898:	2a00      	cmp	r2, #0
 800189a:	d001      	beq.n	80018a0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800189e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80018a0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80018a2:	e7fc      	b.n	800189e <HAL_GPIO_WritePin+0x6>

080018a4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_RCC_GetSysClockFreq+0x78>)
{
 80018a8:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80018aa:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80018ac:	4022      	ands	r2, r4
 80018ae:	2a08      	cmp	r2, #8
 80018b0:	d031      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x72>
 80018b2:	2a0c      	cmp	r2, #12
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x26>
 80018b6:	2a04      	cmp	r2, #4
 80018b8:	d125      	bne.n	8001906 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018ba:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018be:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80018c0:	17c0      	asrs	r0, r0, #31
 80018c2:	4018      	ands	r0, r3
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_RCC_GetSysClockFreq+0x80>)
 80018c6:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018ca:	02a2      	lsls	r2, r4, #10
 80018cc:	4816      	ldr	r0, [pc, #88]	; (8001928 <HAL_RCC_GetSysClockFreq+0x84>)
 80018ce:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018d0:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d2:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018d4:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018d8:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018da:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018dc:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4211      	tst	r1, r2
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <HAL_RCC_GetSysClockFreq+0x88>)
 80018e4:	2300      	movs	r3, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	f7fe fcce 	bl	8000288 <__aeabi_lmul>
 80018ec:	0022      	movs	r2, r4
 80018ee:	2300      	movs	r3, #0
 80018f0:	f7fe fcaa 	bl	8000248 <__aeabi_uldivmod>
 80018f4:	e7e8      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2310      	movs	r3, #16
 80018fa:	421a      	tst	r2, r3
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001900:	e7f0      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_RCC_GetSysClockFreq+0x80>)
 8001904:	e7ee      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001906:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001908:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800190a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001910:	3301      	adds	r3, #1
 8001912:	4098      	lsls	r0, r3
      break;
 8001914:	e7d8      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <HAL_RCC_GetSysClockFreq+0x88>)
 8001918:	e7d6      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x24>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40021000 	.word	0x40021000
 8001920:	ff48e500 	.word	0xff48e500
 8001924:	00f42400 	.word	0x00f42400
 8001928:	080037cc 	.word	0x080037cc
 800192c:	007a1200 	.word	0x007a1200
 8001930:	003d0900 	.word	0x003d0900

08001934 <HAL_RCC_OscConfig>:
{
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	0005      	movs	r5, r0
 8001938:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800193a:	2800      	cmp	r0, #0
 800193c:	d055      	beq.n	80019ea <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193e:	230c      	movs	r3, #12
 8001940:	4cc0      	ldr	r4, [pc, #768]	; (8001c44 <HAL_RCC_OscConfig+0x310>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001944:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001946:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001948:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	0019      	movs	r1, r3
 8001950:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	07d2      	lsls	r2, r2, #31
 8001954:	d43d      	bmi.n	80019d2 <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	079b      	lsls	r3, r3, #30
 800195a:	d500      	bpl.n	800195e <HAL_RCC_OscConfig+0x2a>
 800195c:	e086      	b.n	8001a6c <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	06db      	lsls	r3, r3, #27
 8001962:	d528      	bpl.n	80019b6 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001964:	2e00      	cmp	r6, #0
 8001966:	d000      	beq.n	800196a <HAL_RCC_OscConfig+0x36>
 8001968:	e0df      	b.n	8001b2a <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	059b      	lsls	r3, r3, #22
 800196e:	d502      	bpl.n	8001976 <HAL_RCC_OscConfig+0x42>
 8001970:	69ab      	ldr	r3, [r5, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d039      	beq.n	80019ea <HAL_RCC_OscConfig+0xb6>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001976:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001978:	6862      	ldr	r2, [r4, #4]
 800197a:	49b3      	ldr	r1, [pc, #716]	; (8001c48 <HAL_RCC_OscConfig+0x314>)
 800197c:	6a2b      	ldr	r3, [r5, #32]
 800197e:	400a      	ands	r2, r1
 8001980:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001982:	0b5b      	lsrs	r3, r3, #13
 8001984:	3301      	adds	r3, #1
 8001986:	023f      	lsls	r7, r7, #8
 8001988:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198c:	6861      	ldr	r1, [r4, #4]
 800198e:	69ea      	ldr	r2, [r5, #28]
 8001990:	0209      	lsls	r1, r1, #8
 8001992:	0a09      	lsrs	r1, r1, #8
 8001994:	0612      	lsls	r2, r2, #24
 8001996:	430a      	orrs	r2, r1
 8001998:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800199a:	68e1      	ldr	r1, [r4, #12]
 800199c:	48ab      	ldr	r0, [pc, #684]	; (8001c4c <HAL_RCC_OscConfig+0x318>)
 800199e:	060b      	lsls	r3, r1, #24
 80019a0:	0f1b      	lsrs	r3, r3, #28
 80019a2:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019a4:	4aaa      	ldr	r2, [pc, #680]	; (8001c50 <HAL_RCC_OscConfig+0x31c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80019a6:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 80019a8:	4baa      	ldr	r3, [pc, #680]	; (8001c54 <HAL_RCC_OscConfig+0x320>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019aa:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	f7ff fd05 	bl	80013bc <HAL_InitTick>
        if(status != HAL_OK)
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d130      	bne.n	8001a18 <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b6:	682b      	ldr	r3, [r5, #0]
 80019b8:	071b      	lsls	r3, r3, #28
 80019ba:	d500      	bpl.n	80019be <HAL_RCC_OscConfig+0x8a>
 80019bc:	e0ec      	b.n	8001b98 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019be:	682b      	ldr	r3, [r5, #0]
 80019c0:	075b      	lsls	r3, r3, #29
 80019c2:	d500      	bpl.n	80019c6 <HAL_RCC_OscConfig+0x92>
 80019c4:	e10e      	b.n	8001be4 <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d000      	beq.n	80019ce <HAL_RCC_OscConfig+0x9a>
 80019cc:	e193      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 80019ce:	2000      	movs	r0, #0
 80019d0:	e022      	b.n	8001a18 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d2:	2e08      	cmp	r6, #8
 80019d4:	d003      	beq.n	80019de <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019d6:	2e0c      	cmp	r6, #12
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_OscConfig+0xba>
 80019da:	2f00      	cmp	r7, #0
 80019dc:	d007      	beq.n	80019ee <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	039b      	lsls	r3, r3, #14
 80019e2:	d5b8      	bpl.n	8001956 <HAL_RCC_OscConfig+0x22>
 80019e4:	686b      	ldr	r3, [r5, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1b5      	bne.n	8001956 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e014      	b.n	8001a18 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ee:	686a      	ldr	r2, [r5, #4]
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d113      	bne.n	8001a1c <HAL_RCC_OscConfig+0xe8>
 80019f4:	6822      	ldr	r2, [r4, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019fa:	f7ff fd23 	bl	8001444 <HAL_GetTick>
 80019fe:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	0292      	lsls	r2, r2, #10
 8001a06:	4213      	tst	r3, r2
 8001a08:	d1a5      	bne.n	8001956 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fd1b 	bl	8001444 <HAL_GetTick>
 8001a0e:	9b00      	ldr	r3, [sp, #0]
 8001a10:	1ac0      	subs	r0, r0, r3
 8001a12:	2864      	cmp	r0, #100	; 0x64
 8001a14:	d9f4      	bls.n	8001a00 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001a16:	2003      	movs	r0, #3
}
 8001a18:	b005      	add	sp, #20
 8001a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	21a0      	movs	r1, #160	; 0xa0
 8001a1e:	02c9      	lsls	r1, r1, #11
 8001a20:	428a      	cmp	r2, r1
 8001a22:	d105      	bne.n	8001a30 <HAL_RCC_OscConfig+0xfc>
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	6821      	ldr	r1, [r4, #0]
 8001a28:	02d2      	lsls	r2, r2, #11
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	6022      	str	r2, [r4, #0]
 8001a2e:	e7e1      	b.n	80019f4 <HAL_RCC_OscConfig+0xc0>
 8001a30:	6821      	ldr	r1, [r4, #0]
 8001a32:	4889      	ldr	r0, [pc, #548]	; (8001c58 <HAL_RCC_OscConfig+0x324>)
 8001a34:	4001      	ands	r1, r0
 8001a36:	6021      	str	r1, [r4, #0]
 8001a38:	6821      	ldr	r1, [r4, #0]
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	9303      	str	r3, [sp, #12]
 8001a3e:	9b03      	ldr	r3, [sp, #12]
 8001a40:	4986      	ldr	r1, [pc, #536]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	400b      	ands	r3, r1
 8001a46:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a48:	2a00      	cmp	r2, #0
 8001a4a:	d1d6      	bne.n	80019fa <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fcfa 	bl	8001444 <HAL_GetTick>
 8001a50:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	0292      	lsls	r2, r2, #10
 8001a58:	4213      	tst	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12a>
 8001a5c:	e77b      	b.n	8001956 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5e:	f7ff fcf1 	bl	8001444 <HAL_GetTick>
 8001a62:	9b00      	ldr	r3, [sp, #0]
 8001a64:	1ac0      	subs	r0, r0, r3
 8001a66:	2864      	cmp	r0, #100	; 0x64
 8001a68:	d9f3      	bls.n	8001a52 <HAL_RCC_OscConfig+0x11e>
 8001a6a:	e7d4      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001a6c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001a6e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001a70:	4213      	tst	r3, r2
 8001a72:	d003      	beq.n	8001a7c <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001a74:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001a76:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7c:	2e04      	cmp	r6, #4
 8001a7e:	d003      	beq.n	8001a88 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a80:	2e0c      	cmp	r6, #12
 8001a82:	d124      	bne.n	8001ace <HAL_RCC_OscConfig+0x19a>
 8001a84:	2f00      	cmp	r7, #0
 8001a86:	d122      	bne.n	8001ace <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a88:	6822      	ldr	r2, [r4, #0]
 8001a8a:	0752      	lsls	r2, r2, #29
 8001a8c:	d501      	bpl.n	8001a92 <HAL_RCC_OscConfig+0x15e>
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0ab      	beq.n	80019ea <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a92:	6861      	ldr	r1, [r4, #4]
 8001a94:	692a      	ldr	r2, [r5, #16]
 8001a96:	4872      	ldr	r0, [pc, #456]	; (8001c60 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	0212      	lsls	r2, r2, #8
 8001a9a:	4001      	ands	r1, r0
 8001a9c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a9e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001aa2:	6822      	ldr	r2, [r4, #0]
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aaa:	f7ff fefb 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001aae:	68e3      	ldr	r3, [r4, #12]
 8001ab0:	4a66      	ldr	r2, [pc, #408]	; (8001c4c <HAL_RCC_OscConfig+0x318>)
 8001ab2:	061b      	lsls	r3, r3, #24
 8001ab4:	0f1b      	lsrs	r3, r3, #28
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	4965      	ldr	r1, [pc, #404]	; (8001c50 <HAL_RCC_OscConfig+0x31c>)
 8001aba:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_RCC_OscConfig+0x320>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001abe:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	f7ff fc7b 	bl	80013bc <HAL_InitTick>
      if(status != HAL_OK)
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d100      	bne.n	8001acc <HAL_RCC_OscConfig+0x198>
 8001aca:	e748      	b.n	800195e <HAL_RCC_OscConfig+0x2a>
 8001acc:	e7a4      	b.n	8001a18 <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d019      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ad2:	2109      	movs	r1, #9
 8001ad4:	6822      	ldr	r2, [r4, #0]
 8001ad6:	438a      	bics	r2, r1
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001adc:	f7ff fcb2 	bl	8001444 <HAL_GetTick>
 8001ae0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	4213      	tst	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	6862      	ldr	r2, [r4, #4]
 8001aec:	692b      	ldr	r3, [r5, #16]
 8001aee:	495c      	ldr	r1, [pc, #368]	; (8001c60 <HAL_RCC_OscConfig+0x32c>)
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	400a      	ands	r2, r1
 8001af4:	4313      	orrs	r3, r2
 8001af6:	6063      	str	r3, [r4, #4]
 8001af8:	e731      	b.n	800195e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff fca3 	bl	8001444 <HAL_GetTick>
 8001afe:	1bc0      	subs	r0, r0, r7
 8001b00:	2802      	cmp	r0, #2
 8001b02:	d9ee      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1ae>
 8001b04:	e787      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8001b06:	2201      	movs	r2, #1
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fc99 	bl	8001444 <HAL_GetTick>
 8001b12:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b14:	2204      	movs	r2, #4
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	4213      	tst	r3, r2
 8001b1a:	d100      	bne.n	8001b1e <HAL_RCC_OscConfig+0x1ea>
 8001b1c:	e71f      	b.n	800195e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fc91 	bl	8001444 <HAL_GetTick>
 8001b22:	1bc0      	subs	r0, r0, r7
 8001b24:	2802      	cmp	r0, #2
 8001b26:	d9f5      	bls.n	8001b14 <HAL_RCC_OscConfig+0x1e0>
 8001b28:	e775      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b2a:	69ab      	ldr	r3, [r5, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	6822      	ldr	r2, [r4, #0]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fc83 	bl	8001444 <HAL_GetTick>
 8001b3e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b40:	2280      	movs	r2, #128	; 0x80
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	4213      	tst	r3, r2
 8001b48:	d00d      	beq.n	8001b66 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4a:	6863      	ldr	r3, [r4, #4]
 8001b4c:	4a3e      	ldr	r2, [pc, #248]	; (8001c48 <HAL_RCC_OscConfig+0x314>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	6a2a      	ldr	r2, [r5, #32]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b56:	6862      	ldr	r2, [r4, #4]
 8001b58:	69eb      	ldr	r3, [r5, #28]
 8001b5a:	0212      	lsls	r2, r2, #8
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	0a12      	lsrs	r2, r2, #8
 8001b60:	4313      	orrs	r3, r2
 8001b62:	6063      	str	r3, [r4, #4]
 8001b64:	e727      	b.n	80019b6 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b66:	f7ff fc6d 	bl	8001444 <HAL_GetTick>
 8001b6a:	1bc0      	subs	r0, r0, r7
 8001b6c:	2802      	cmp	r0, #2
 8001b6e:	d9e7      	bls.n	8001b40 <HAL_RCC_OscConfig+0x20c>
 8001b70:	e751      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fc63 	bl	8001444 <HAL_GetTick>
 8001b7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4213      	tst	r3, r2
 8001b88:	d100      	bne.n	8001b8c <HAL_RCC_OscConfig+0x258>
 8001b8a:	e714      	b.n	80019b6 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fc5a 	bl	8001444 <HAL_GetTick>
 8001b90:	1bc0      	subs	r0, r0, r7
 8001b92:	2802      	cmp	r0, #2
 8001b94:	d9f4      	bls.n	8001b80 <HAL_RCC_OscConfig+0x24c>
 8001b96:	e73e      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b98:	696a      	ldr	r2, [r5, #20]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	d010      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 8001ba0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fc4d 	bl	8001444 <HAL_GetTick>
 8001baa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bac:	2202      	movs	r2, #2
 8001bae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001bb0:	4213      	tst	r3, r2
 8001bb2:	d000      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x282>
 8001bb4:	e703      	b.n	80019be <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fc45 	bl	8001444 <HAL_GetTick>
 8001bba:	1bc0      	subs	r0, r0, r7
 8001bbc:	2802      	cmp	r0, #2
 8001bbe:	d9f5      	bls.n	8001bac <HAL_RCC_OscConfig+0x278>
 8001bc0:	e729      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 8001bc2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001bc4:	439a      	bics	r2, r3
 8001bc6:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fc3c 	bl	8001444 <HAL_GetTick>
 8001bcc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bce:	2202      	movs	r2, #2
 8001bd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001bd2:	4213      	tst	r3, r2
 8001bd4:	d100      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2a4>
 8001bd6:	e6f2      	b.n	80019be <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fc34 	bl	8001444 <HAL_GetTick>
 8001bdc:	1bc0      	subs	r0, r0, r7
 8001bde:	2802      	cmp	r0, #2
 8001be0:	d9f5      	bls.n	8001bce <HAL_RCC_OscConfig+0x29a>
 8001be2:	e718      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be4:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bea:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001bec:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bee:	421a      	tst	r2, r3
 8001bf0:	d104      	bne.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	4f1a      	ldr	r7, [pc, #104]	; (8001c68 <HAL_RCC_OscConfig+0x334>)
 8001c00:	0052      	lsls	r2, r2, #1
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4213      	tst	r3, r2
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	68ab      	ldr	r3, [r5, #8]
 8001c0c:	0052      	lsls	r2, r2, #1
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x338>
 8001c12:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c14:	4313      	orrs	r3, r2
 8001c16:	6523      	str	r3, [r4, #80]	; 0x50
 8001c18:	e04d      	b.n	8001cb6 <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	0052      	lsls	r2, r2, #1
 8001c20:	4313      	orrs	r3, r2
 8001c22:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001c24:	f7ff fc0e 	bl	8001444 <HAL_GetTick>
 8001c28:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	0052      	lsls	r2, r2, #1
 8001c30:	4213      	tst	r3, r2
 8001c32:	d1e9      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c34:	f7ff fc06 	bl	8001444 <HAL_GetTick>
 8001c38:	9b01      	ldr	r3, [sp, #4]
 8001c3a:	1ac0      	subs	r0, r0, r3
 8001c3c:	2864      	cmp	r0, #100	; 0x64
 8001c3e:	d9f4      	bls.n	8001c2a <HAL_RCC_OscConfig+0x2f6>
 8001c40:	e6e9      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	40021000 	.word	0x40021000
 8001c48:	ffff1fff 	.word	0xffff1fff
 8001c4c:	080037b4 	.word	0x080037b4
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000008 	.word	0x20000008
 8001c58:	fffeffff 	.word	0xfffeffff
 8001c5c:	fffbffff 	.word	0xfffbffff
 8001c60:	ffffe0ff 	.word	0xffffe0ff
 8001c64:	fffffeff 	.word	0xfffffeff
 8001c68:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d116      	bne.n	8001c9e <HAL_RCC_OscConfig+0x36a>
 8001c70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001c72:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <HAL_RCC_OscConfig+0x484>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	6523      	str	r3, [r4, #80]	; 0x50
 8001c78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001c7a:	4a50      	ldr	r2, [pc, #320]	; (8001dbc <HAL_RCC_OscConfig+0x488>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001c80:	f7ff fbe0 	bl	8001444 <HAL_GetTick>
 8001c84:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4213      	tst	r3, r2
 8001c8e:	d01a      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7ff fbd8 	bl	8001444 <HAL_GetTick>
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_OscConfig+0x48c>)
 8001c96:	1bc0      	subs	r0, r0, r7
 8001c98:	4298      	cmp	r0, r3
 8001c9a:	d9f4      	bls.n	8001c86 <HAL_RCC_OscConfig+0x352>
 8001c9c:	e6bb      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9e:	21a0      	movs	r1, #160	; 0xa0
 8001ca0:	00c9      	lsls	r1, r1, #3
 8001ca2:	428b      	cmp	r3, r1
 8001ca4:	d118      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x3a4>
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	430b      	orrs	r3, r1
 8001cae:	6523      	str	r3, [r4, #80]	; 0x50
 8001cb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fbc5 	bl	8001444 <HAL_GetTick>
 8001cba:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4213      	tst	r3, r2
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 8001cc6:	9b00      	ldr	r3, [sp, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d000      	beq.n	8001cce <HAL_RCC_OscConfig+0x39a>
 8001ccc:	e67b      	b.n	80019c6 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cd0:	4a3c      	ldr	r2, [pc, #240]	; (8001dc4 <HAL_RCC_OscConfig+0x490>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	63a3      	str	r3, [r4, #56]	; 0x38
 8001cd6:	e676      	b.n	80019c6 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001cda:	4a37      	ldr	r2, [pc, #220]	; (8001db8 <HAL_RCC_OscConfig+0x484>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	6523      	str	r3, [r4, #80]	; 0x50
 8001ce0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ce2:	4a36      	ldr	r2, [pc, #216]	; (8001dbc <HAL_RCC_OscConfig+0x488>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	e796      	b.n	8001c16 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fbac 	bl	8001444 <HAL_GetTick>
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_RCC_OscConfig+0x48c>)
 8001cee:	1bc0      	subs	r0, r0, r7
 8001cf0:	4298      	cmp	r0, r3
 8001cf2:	d9e3      	bls.n	8001cbc <HAL_RCC_OscConfig+0x388>
 8001cf4:	e68f      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf6:	2e0c      	cmp	r6, #12
 8001cf8:	d043      	beq.n	8001d82 <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfa:	4a33      	ldr	r2, [pc, #204]	; (8001dc8 <HAL_RCC_OscConfig+0x494>)
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d12e      	bne.n	8001d5e <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8001d00:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d02:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4013      	ands	r3, r2
 8001d06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d08:	f7ff fb9c 	bl	8001444 <HAL_GetTick>
 8001d0c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d0e:	04bf      	lsls	r7, r7, #18
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	423b      	tst	r3, r7
 8001d14:	d11d      	bne.n	8001d52 <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d16:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001d18:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d1a:	68e2      	ldr	r2, [r4, #12]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	492b      	ldr	r1, [pc, #172]	; (8001dcc <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d20:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d22:	400a      	ands	r2, r1
 8001d24:	4313      	orrs	r3, r2
 8001d26:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d28:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	6822      	ldr	r2, [r4, #0]
 8001d32:	045b      	lsls	r3, r3, #17
 8001d34:	4313      	orrs	r3, r2
 8001d36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d38:	f7ff fb84 	bl	8001444 <HAL_GetTick>
 8001d3c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	4233      	tst	r3, r6
 8001d42:	d000      	beq.n	8001d46 <HAL_RCC_OscConfig+0x412>
 8001d44:	e643      	b.n	80019ce <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff fb7d 	bl	8001444 <HAL_GetTick>
 8001d4a:	1b40      	subs	r0, r0, r5
 8001d4c:	2802      	cmp	r0, #2
 8001d4e:	d9f6      	bls.n	8001d3e <HAL_RCC_OscConfig+0x40a>
 8001d50:	e661      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d52:	f7ff fb77 	bl	8001444 <HAL_GetTick>
 8001d56:	1b80      	subs	r0, r0, r6
 8001d58:	2802      	cmp	r0, #2
 8001d5a:	d9d9      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3dc>
 8001d5c:	e65b      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d60:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4013      	ands	r3, r2
 8001d64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb6d 	bl	8001444 <HAL_GetTick>
 8001d6a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d6c:	04b6      	lsls	r6, r6, #18
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	4233      	tst	r3, r6
 8001d72:	d100      	bne.n	8001d76 <HAL_RCC_OscConfig+0x442>
 8001d74:	e62b      	b.n	80019ce <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff fb65 	bl	8001444 <HAL_GetTick>
 8001d7a:	1b40      	subs	r0, r0, r5
 8001d7c:	2802      	cmp	r0, #2
 8001d7e:	d9f6      	bls.n	8001d6e <HAL_RCC_OscConfig+0x43a>
 8001d80:	e649      	b.n	8001a16 <HAL_RCC_OscConfig+0xe2>
        return HAL_ERROR;
 8001d82:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d100      	bne.n	8001d8a <HAL_RCC_OscConfig+0x456>
 8001d88:	e646      	b.n	8001a18 <HAL_RCC_OscConfig+0xe4>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001d8c:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001d90:	0252      	lsls	r2, r2, #9
 8001d92:	401a      	ands	r2, r3
 8001d94:	428a      	cmp	r2, r1
 8001d96:	d000      	beq.n	8001d9a <HAL_RCC_OscConfig+0x466>
 8001d98:	e627      	b.n	80019ea <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d9a:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d9e:	0392      	lsls	r2, r2, #14
 8001da0:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	428a      	cmp	r2, r1
 8001da4:	d000      	beq.n	8001da8 <HAL_RCC_OscConfig+0x474>
 8001da6:	e620      	b.n	80019ea <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001da8:	22c0      	movs	r2, #192	; 0xc0
 8001daa:	0412      	lsls	r2, r2, #16
 8001dac:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d100      	bne.n	8001db6 <HAL_RCC_OscConfig+0x482>
 8001db4:	e60b      	b.n	80019ce <HAL_RCC_OscConfig+0x9a>
 8001db6:	e618      	b.n	80019ea <HAL_RCC_OscConfig+0xb6>
 8001db8:	fffffeff 	.word	0xfffffeff
 8001dbc:	fffffbff 	.word	0xfffffbff
 8001dc0:	00001388 	.word	0x00001388
 8001dc4:	efffffff 	.word	0xefffffff
 8001dc8:	feffffff 	.word	0xfeffffff
 8001dcc:	ff02ffff 	.word	0xff02ffff

08001dd0 <HAL_RCC_ClockConfig>:
{
 8001dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dd2:	1e04      	subs	r4, r0, #0
 8001dd4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
}
 8001dda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	2501      	movs	r5, #1
 8001dde:	4e5b      	ldr	r6, [pc, #364]	; (8001f4c <HAL_RCC_ClockConfig+0x17c>)
 8001de0:	9a01      	ldr	r2, [sp, #4]
 8001de2:	6833      	ldr	r3, [r6, #0]
 8001de4:	402b      	ands	r3, r5
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d331      	bcc.n	8001e4e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dea:	6822      	ldr	r2, [r4, #0]
 8001dec:	0793      	lsls	r3, r2, #30
 8001dee:	d443      	bmi.n	8001e78 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df0:	07d2      	lsls	r2, r2, #31
 8001df2:	d449      	bmi.n	8001e88 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df4:	2501      	movs	r5, #1
 8001df6:	6833      	ldr	r3, [r6, #0]
 8001df8:	9a01      	ldr	r2, [sp, #4]
 8001dfa:	402b      	ands	r3, r5
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d909      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e00:	6833      	ldr	r3, [r6, #0]
 8001e02:	43ab      	bics	r3, r5
 8001e04:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001e06:	f7ff fb1d 	bl	8001444 <HAL_GetTick>
 8001e0a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0c:	6833      	ldr	r3, [r6, #0]
 8001e0e:	422b      	tst	r3, r5
 8001e10:	d000      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x44>
 8001e12:	e08c      	b.n	8001f2e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	4d4e      	ldr	r5, [pc, #312]	; (8001f50 <HAL_RCC_ClockConfig+0x180>)
 8001e18:	0753      	lsls	r3, r2, #29
 8001e1a:	d500      	bpl.n	8001e1e <HAL_RCC_ClockConfig+0x4e>
 8001e1c:	e08f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	0712      	lsls	r2, r2, #28
 8001e20:	d506      	bpl.n	8001e30 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e22:	68ea      	ldr	r2, [r5, #12]
 8001e24:	6923      	ldr	r3, [r4, #16]
 8001e26:	494b      	ldr	r1, [pc, #300]	; (8001f54 <HAL_RCC_ClockConfig+0x184>)
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e30:	f7ff fd38 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001e34:	68eb      	ldr	r3, [r5, #12]
 8001e36:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_RCC_ClockConfig+0x188>)
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	0f1b      	lsrs	r3, r3, #28
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	4947      	ldr	r1, [pc, #284]	; (8001f5c <HAL_RCC_ClockConfig+0x18c>)
 8001e40:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e44:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	f7ff fab8 	bl	80013bc <HAL_InitTick>
  if(status != HAL_OK)
 8001e4c:	e7c5      	b.n	8001dda <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	6833      	ldr	r3, [r6, #0]
 8001e50:	9a01      	ldr	r2, [sp, #4]
 8001e52:	43ab      	bics	r3, r5
 8001e54:	4313      	orrs	r3, r2
 8001e56:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001e58:	f7ff faf4 	bl	8001444 <HAL_GetTick>
 8001e5c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	6833      	ldr	r3, [r6, #0]
 8001e60:	9a01      	ldr	r2, [sp, #4]
 8001e62:	402b      	ands	r3, r5
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d0c0      	beq.n	8001dea <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e68:	f7ff faec 	bl	8001444 <HAL_GetTick>
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_ClockConfig+0x194>)
 8001e6e:	1bc0      	subs	r0, r0, r7
 8001e70:	4298      	cmp	r0, r3
 8001e72:	d9f4      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8001e74:	2003      	movs	r0, #3
 8001e76:	e7b0      	b.n	8001dda <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	20f0      	movs	r0, #240	; 0xf0
 8001e7a:	4935      	ldr	r1, [pc, #212]	; (8001f50 <HAL_RCC_ClockConfig+0x180>)
 8001e7c:	68cb      	ldr	r3, [r1, #12]
 8001e7e:	4383      	bics	r3, r0
 8001e80:	68a0      	ldr	r0, [r4, #8]
 8001e82:	4303      	orrs	r3, r0
 8001e84:	60cb      	str	r3, [r1, #12]
 8001e86:	e7b3      	b.n	8001df0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e88:	4d31      	ldr	r5, [pc, #196]	; (8001f50 <HAL_RCC_ClockConfig+0x180>)
 8001e8a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e8c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	2a02      	cmp	r2, #2
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e92:	039b      	lsls	r3, r3, #14
 8001e94:	d5a0      	bpl.n	8001dd8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	2103      	movs	r1, #3
 8001e98:	68eb      	ldr	r3, [r5, #12]
 8001e9a:	438b      	bics	r3, r1
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001ea0:	f7ff fad0 	bl	8001444 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001ea6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d118      	bne.n	8001ede <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eac:	220c      	movs	r2, #12
 8001eae:	68eb      	ldr	r3, [r5, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d09e      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb6:	f7ff fac5 	bl	8001444 <HAL_GetTick>
 8001eba:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_ClockConfig+0x194>)
 8001ebc:	1bc0      	subs	r0, r0, r7
 8001ebe:	4298      	cmp	r0, r3
 8001ec0:	d9f4      	bls.n	8001eac <HAL_RCC_ClockConfig+0xdc>
 8001ec2:	e7d7      	b.n	8001e74 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec4:	2a03      	cmp	r2, #3
 8001ec6:	d102      	bne.n	8001ece <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec8:	019b      	lsls	r3, r3, #6
 8001eca:	d4e4      	bmi.n	8001e96 <HAL_RCC_ClockConfig+0xc6>
 8001ecc:	e784      	b.n	8001dd8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ece:	2a01      	cmp	r2, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ed2:	075b      	lsls	r3, r3, #29
 8001ed4:	d4df      	bmi.n	8001e96 <HAL_RCC_ClockConfig+0xc6>
 8001ed6:	e77f      	b.n	8001dd8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ed8:	059b      	lsls	r3, r3, #22
 8001eda:	d4dc      	bmi.n	8001e96 <HAL_RCC_ClockConfig+0xc6>
 8001edc:	e77c      	b.n	8001dd8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	68eb      	ldr	r3, [r5, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d083      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7ff faaa 	bl	8001444 <HAL_GetTick>
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_RCC_ClockConfig+0x194>)
 8001ef2:	1bc0      	subs	r0, r0, r7
 8001ef4:	4298      	cmp	r0, r3
 8001ef6:	d9f4      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x112>
 8001ef8:	e7bc      	b.n	8001e74 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d011      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001efe:	220c      	movs	r2, #12
 8001f00:	68eb      	ldr	r3, [r5, #12]
 8001f02:	4213      	tst	r3, r2
 8001f04:	d100      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x138>
 8001f06:	e775      	b.n	8001df4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7ff fa9c 	bl	8001444 <HAL_GetTick>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_RCC_ClockConfig+0x194>)
 8001f0e:	1bc0      	subs	r0, r0, r7
 8001f10:	4298      	cmp	r0, r3
 8001f12:	d9f4      	bls.n	8001efe <HAL_RCC_ClockConfig+0x12e>
 8001f14:	e7ae      	b.n	8001e74 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7ff fa95 	bl	8001444 <HAL_GetTick>
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x194>)
 8001f1c:	1bc0      	subs	r0, r0, r7
 8001f1e:	4298      	cmp	r0, r3
 8001f20:	d8a8      	bhi.n	8001e74 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f22:	220c      	movs	r2, #12
 8001f24:	68eb      	ldr	r3, [r5, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d1f4      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x146>
 8001f2c:	e762      	b.n	8001df4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2e:	f7ff fa89 	bl	8001444 <HAL_GetTick>
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_ClockConfig+0x194>)
 8001f34:	1bc0      	subs	r0, r0, r7
 8001f36:	4298      	cmp	r0, r3
 8001f38:	d800      	bhi.n	8001f3c <HAL_RCC_ClockConfig+0x16c>
 8001f3a:	e767      	b.n	8001e0c <HAL_RCC_ClockConfig+0x3c>
 8001f3c:	e79a      	b.n	8001e74 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3e:	68eb      	ldr	r3, [r5, #12]
 8001f40:	4909      	ldr	r1, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x198>)
 8001f42:	400b      	ands	r3, r1
 8001f44:	68e1      	ldr	r1, [r4, #12]
 8001f46:	430b      	orrs	r3, r1
 8001f48:	60eb      	str	r3, [r5, #12]
 8001f4a:	e768      	b.n	8001e1e <HAL_RCC_ClockConfig+0x4e>
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	ffffc7ff 	.word	0xffffc7ff
 8001f58:	080037b4 	.word	0x080037b4
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000008 	.word	0x20000008
 8001f64:	00001388 	.word	0x00001388
 8001f68:	fffff8ff 	.word	0xfffff8ff

08001f6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4905      	ldr	r1, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f74:	055b      	lsls	r3, r3, #21
 8001f76:	0f5b      	lsrs	r3, r3, #29
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	6810      	ldr	r0, [r2, #0]
 8001f7c:	40d8      	lsrs	r0, r3
}
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000
 8001f84:	20000000 	.word	0x20000000
 8001f88:	080037c4 	.word	0x080037c4

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	4905      	ldr	r1, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f94:	049b      	lsls	r3, r3, #18
 8001f96:	0f5b      	lsrs	r3, r3, #29
 8001f98:	5ccb      	ldrb	r3, [r1, r3]
 8001f9a:	6810      	ldr	r0, [r2, #0]
 8001f9c:	40d8      	lsrs	r0, r3
}
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	080037c4 	.word	0x080037c4

08001fac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fac:	6803      	ldr	r3, [r0, #0]
{
 8001fae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fb0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	d52b      	bpl.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb6:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8001fb8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4c51      	ldr	r4, [pc, #324]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001fbc:	055b      	lsls	r3, r3, #21
 8001fbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8001fc0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	421a      	tst	r2, r3
 8001fc4:	d104      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	2780      	movs	r7, #128	; 0x80
 8001fd2:	4e4c      	ldr	r6, [pc, #304]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001fd4:	007f      	lsls	r7, r7, #1
 8001fd6:	6833      	ldr	r3, [r6, #0]
 8001fd8:	423b      	tst	r3, r7
 8001fda:	d03f      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fdc:	20c0      	movs	r0, #192	; 0xc0
 8001fde:	22c0      	movs	r2, #192	; 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fe0:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fe2:	686b      	ldr	r3, [r5, #4]
 8001fe4:	0380      	lsls	r0, r0, #14
 8001fe6:	4059      	eors	r1, r3
 8001fe8:	0292      	lsls	r2, r2, #10
 8001fea:	4201      	tst	r1, r0
 8001fec:	d147      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fee:	6d20      	ldr	r0, [r4, #80]	; 0x50

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ff0:	6829      	ldr	r1, [r5, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ff2:	0006      	movs	r6, r0
 8001ff4:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ff6:	4210      	tst	r0, r2
 8001ff8:	d14a      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffa:	682b      	ldr	r3, [r5, #0]
 8001ffc:	069b      	lsls	r3, r3, #26
 8001ffe:	d45b      	bmi.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002000:	9b00      	ldr	r3, [sp, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d103      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002006:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002008:	4a3f      	ldr	r2, [pc, #252]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800200a:	4013      	ands	r3, r2
 800200c:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800200e:	682b      	ldr	r3, [r5, #0]
 8002010:	079a      	lsls	r2, r3, #30
 8002012:	d506      	bpl.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002014:	200c      	movs	r0, #12
 8002016:	493a      	ldr	r1, [pc, #232]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002018:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800201a:	4382      	bics	r2, r0
 800201c:	68a8      	ldr	r0, [r5, #8]
 800201e:	4302      	orrs	r2, r0
 8002020:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002022:	075a      	lsls	r2, r3, #29
 8002024:	d506      	bpl.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002026:	4936      	ldr	r1, [pc, #216]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002028:	4838      	ldr	r0, [pc, #224]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800202c:	4002      	ands	r2, r0
 800202e:	68e8      	ldr	r0, [r5, #12]
 8002030:	4302      	orrs	r2, r0
 8002032:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002034:	071a      	lsls	r2, r3, #28
 8002036:	d506      	bpl.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002038:	4931      	ldr	r1, [pc, #196]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800203a:	4835      	ldr	r0, [pc, #212]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800203c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800203e:	4002      	ands	r2, r0
 8002040:	6928      	ldr	r0, [r5, #16]
 8002042:	4302      	orrs	r2, r0
 8002044:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002046:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	d517      	bpl.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800204c:	4a2c      	ldr	r2, [pc, #176]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800204e:	4931      	ldr	r1, [pc, #196]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002050:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002052:	400b      	ands	r3, r1
 8002054:	6969      	ldr	r1, [r5, #20]
 8002056:	430b      	orrs	r3, r1
 8002058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205a:	e00f      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205c:	6833      	ldr	r3, [r6, #0]
 800205e:	433b      	orrs	r3, r7
 8002060:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002062:	f7ff f9ef 	bl	8001444 <HAL_GetTick>
 8002066:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	6833      	ldr	r3, [r6, #0]
 800206a:	423b      	tst	r3, r7
 800206c:	d1b6      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206e:	f7ff f9e9 	bl	8001444 <HAL_GetTick>
 8002072:	9b01      	ldr	r3, [sp, #4]
 8002074:	1ac0      	subs	r0, r0, r3
 8002076:	2864      	cmp	r0, #100	; 0x64
 8002078:	d9f6      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 800207a:	2003      	movs	r0, #3
}
 800207c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800207e:	0019      	movs	r1, r3
 8002080:	4011      	ands	r1, r2
 8002082:	4291      	cmp	r1, r2
 8002084:	d1b3      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002086:	6821      	ldr	r1, [r4, #0]
          return HAL_ERROR;
 8002088:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800208a:	0389      	lsls	r1, r1, #14
 800208c:	d5af      	bpl.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x42>
 800208e:	e7f5      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002090:	4013      	ands	r3, r2
 8002092:	42b3      	cmp	r3, r6
 8002094:	d0b1      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002096:	0689      	lsls	r1, r1, #26
 8002098:	d5b2      	bpl.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 800209a:	2180      	movs	r1, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800209c:	6d23      	ldr	r3, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800209e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80020a0:	0309      	lsls	r1, r1, #12
 80020a2:	4301      	orrs	r1, r0
 80020a4:	6521      	str	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80020a8:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020aa:	481c      	ldr	r0, [pc, #112]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x170>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80020ac:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ae:	4001      	ands	r1, r0
 80020b0:	6521      	str	r1, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80020b2:	6522      	str	r2, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80020b4:	05db      	lsls	r3, r3, #23
 80020b6:	d412      	bmi.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b8:	6869      	ldr	r1, [r5, #4]
 80020ba:	23c0      	movs	r3, #192	; 0xc0
 80020bc:	000a      	movs	r2, r1
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	401a      	ands	r2, r3
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d107      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	4815      	ldr	r0, [pc, #84]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80020ca:	4003      	ands	r3, r0
 80020cc:	20c0      	movs	r0, #192	; 0xc0
 80020ce:	0380      	lsls	r0, r0, #14
 80020d0:	4001      	ands	r1, r0
 80020d2:	430b      	orrs	r3, r1
 80020d4:	6023      	str	r3, [r4, #0]
 80020d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80020d8:	431a      	orrs	r2, r3
 80020da:	6522      	str	r2, [r4, #80]	; 0x50
 80020dc:	e790      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 80020de:	f7ff f9b1 	bl	8001444 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020e2:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80020e4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020e6:	00bf      	lsls	r7, r7, #2
 80020e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80020ea:	423b      	tst	r3, r7
 80020ec:	d000      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80020ee:	e784      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7ff f9a8 	bl	8001444 <HAL_GetTick>
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80020f6:	1b80      	subs	r0, r0, r6
 80020f8:	4298      	cmp	r0, r3
 80020fa:	d9f5      	bls.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020fc:	e7bd      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xce>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	efffffff 	.word	0xefffffff
 800210c:	fffff3ff 	.word	0xfffff3ff
 8002110:	ffffcfff 	.word	0xffffcfff
 8002114:	fff3ffff 	.word	0xfff3ffff
 8002118:	fffcffff 	.word	0xfffcffff
 800211c:	fff7ffff 	.word	0xfff7ffff
 8002120:	ffcfffff 	.word	0xffcfffff
 8002124:	00001388 	.word	0x00001388

08002128 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	001d      	movs	r5, r3
 800212c:	0017      	movs	r7, r2
 800212e:	b085      	sub	sp, #20
 8002130:	000e      	movs	r6, r1
 8002132:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002134:	f7ff f986 	bl	8001444 <HAL_GetTick>
 8002138:	19ed      	adds	r5, r5, r7
 800213a:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800213c:	f7ff f982 	bl	8001444 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002140:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8002142:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	015b      	lsls	r3, r3, #5
 8002148:	0d1b      	lsrs	r3, r3, #20
 800214a:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800214c:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800214e:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002150:	6893      	ldr	r3, [r2, #8]
 8002152:	4033      	ands	r3, r6
 8002154:	429e      	cmp	r6, r3
 8002156:	d001      	beq.n	800215c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8002158:	2000      	movs	r0, #0
 800215a:	e032      	b.n	80021c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 800215c:	1c7b      	adds	r3, r7, #1
 800215e:	d0f7      	beq.n	8002150 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002160:	f7ff f970 	bl	8001444 <HAL_GetTick>
 8002164:	9b01      	ldr	r3, [sp, #4]
 8002166:	1ac0      	subs	r0, r0, r3
 8002168:	42a8      	cmp	r0, r5
 800216a:	d32c      	bcc.n	80021c6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800216c:	21e0      	movs	r1, #224	; 0xe0
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	438a      	bics	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002176:	2282      	movs	r2, #130	; 0x82
 8002178:	6861      	ldr	r1, [r4, #4]
 800217a:	0052      	lsls	r2, r2, #1
 800217c:	4291      	cmp	r1, r2
 800217e:	d10c      	bne.n	800219a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	68a2      	ldr	r2, [r4, #8]
 8002184:	0209      	lsls	r1, r1, #8
 8002186:	428a      	cmp	r2, r1
 8002188:	d003      	beq.n	8002192 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	00c9      	lsls	r1, r1, #3
 800218e:	428a      	cmp	r2, r1
 8002190:	d103      	bne.n	800219a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8002192:	2140      	movs	r1, #64	; 0x40
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	438a      	bics	r2, r1
 8002198:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800219e:	0189      	lsls	r1, r1, #6
 80021a0:	428a      	cmp	r2, r1
 80021a2:	d106      	bne.n	80021b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 80021a4:	6819      	ldr	r1, [r3, #0]
 80021a6:	480d      	ldr	r0, [pc, #52]	; (80021dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 80021a8:	4001      	ands	r1, r0
 80021aa:	6019      	str	r1, [r3, #0]
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80021b2:	0023      	movs	r3, r4
 80021b4:	2201      	movs	r2, #1
 80021b6:	3351      	adds	r3, #81	; 0x51
 80021b8:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80021ba:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80021bc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80021be:	3450      	adds	r4, #80	; 0x50
 80021c0:	7023      	strb	r3, [r4, #0]
}
 80021c2:	b005      	add	sp, #20
 80021c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80021c6:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	4193      	sbcs	r3, r2
 80021cc:	425b      	negs	r3, r3
 80021ce:	401d      	ands	r5, r3
      count--;
 80021d0:	9b03      	ldr	r3, [sp, #12]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	e7ba      	b.n	800214c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	20000000 	.word	0x20000000
 80021dc:	ffffdfff 	.word	0xffffdfff

080021e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e2:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e4:	2282      	movs	r2, #130	; 0x82
{
 80021e6:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e8:	6840      	ldr	r0, [r0, #4]
 80021ea:	0052      	lsls	r2, r2, #1
 80021ec:	4290      	cmp	r0, r2
 80021ee:	d11e      	bne.n	800222e <SPI_EndRxTransaction+0x4e>
 80021f0:	2080      	movs	r0, #128	; 0x80
 80021f2:	2580      	movs	r5, #128	; 0x80
 80021f4:	68a2      	ldr	r2, [r4, #8]
 80021f6:	0200      	lsls	r0, r0, #8
 80021f8:	00ed      	lsls	r5, r5, #3
 80021fa:	4282      	cmp	r2, r0
 80021fc:	d001      	beq.n	8002202 <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021fe:	42aa      	cmp	r2, r5
 8002200:	d106      	bne.n	8002210 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002202:	2740      	movs	r7, #64	; 0x40
 8002204:	6826      	ldr	r6, [r4, #0]
 8002206:	6830      	ldr	r0, [r6, #0]
 8002208:	43b8      	bics	r0, r7
 800220a:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800220c:	42aa      	cmp	r2, r5
 800220e:	d00e      	beq.n	800222e <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002210:	000a      	movs	r2, r1
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	0020      	movs	r0, r4
 8002216:	f7ff ff87 	bl	8002128 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800221a:	2800      	cmp	r0, #0
 800221c:	d101      	bne.n	8002222 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800221e:	2000      	movs	r0, #0
}
 8002220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002222:	2320      	movs	r3, #32
 8002224:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002226:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002228:	4313      	orrs	r3, r2
 800222a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800222c:	e7f8      	b.n	8002220 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800222e:	000a      	movs	r2, r1
 8002230:	2101      	movs	r1, #1
 8002232:	e7ef      	b.n	8002214 <SPI_EndRxTransaction+0x34>

08002234 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <SPI_EndRxTxTransaction+0x5c>)
{
 8002236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002238:	0004      	movs	r4, r0
 800223a:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	4915      	ldr	r1, [pc, #84]	; (8002294 <SPI_EndRxTxTransaction+0x60>)
{
 8002240:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002242:	f7fd ff75 	bl	8000130 <__udivsi3>
 8002246:	23fa      	movs	r3, #250	; 0xfa
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4343      	muls	r3, r0
 800224c:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800224e:	2382      	movs	r3, #130	; 0x82
 8002250:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002252:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4299      	cmp	r1, r3
 8002258:	d10d      	bne.n	8002276 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800225a:	0033      	movs	r3, r6
 800225c:	002a      	movs	r2, r5
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	0020      	movs	r0, r4
 8002262:	f7ff ff61 	bl	8002128 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002266:	2800      	cmp	r0, #0
 8002268:	d00f      	beq.n	800228a <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800226a:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800226c:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800226e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002270:	4313      	orrs	r3, r2
 8002272:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8002274:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8002276:	9b01      	ldr	r3, [sp, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <SPI_EndRxTxTransaction+0x56>
      count--;
 800227c:	9b01      	ldr	r3, [sp, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4213      	tst	r3, r2
 8002288:	d1f5      	bne.n	8002276 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 800228a:	2000      	movs	r0, #0
 800228c:	e7f2      	b.n	8002274 <SPI_EndRxTxTransaction+0x40>
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	20000000 	.word	0x20000000
 8002294:	016e3600 	.word	0x016e3600

08002298 <HAL_SPI_Init>:
{
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800229c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800229e:	2c00      	cmp	r4, #0
 80022a0:	d050      	beq.n	8002344 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d14e      	bne.n	8002346 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022a8:	2282      	movs	r2, #130	; 0x82
 80022aa:	6861      	ldr	r1, [r4, #4]
 80022ac:	0052      	lsls	r2, r2, #1
 80022ae:	4291      	cmp	r1, r2
 80022b0:	d000      	beq.n	80022b4 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022b2:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b4:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80022b6:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ba:	3551      	adds	r5, #81	; 0x51
 80022bc:	782b      	ldrb	r3, [r5, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80022c4:	0023      	movs	r3, r4
 80022c6:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 80022c8:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80022ca:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80022cc:	f7fe ff8c 	bl	80011e8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80022d0:	2602      	movs	r6, #2
  __HAL_SPI_DISABLE(hspi);
 80022d2:	2240      	movs	r2, #64	; 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022d4:	2082      	movs	r0, #130	; 0x82
 80022d6:	2784      	movs	r7, #132	; 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 80022d8:	702e      	strb	r6, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80022da:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022dc:	0040      	lsls	r0, r0, #1
  __HAL_SPI_DISABLE(hspi);
 80022de:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022e0:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 80022e2:	4393      	bics	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022e6:	6863      	ldr	r3, [r4, #4]
 80022e8:	69a2      	ldr	r2, [r4, #24]
 80022ea:	4003      	ands	r3, r0
 80022ec:	68a0      	ldr	r0, [r4, #8]
 80022ee:	4038      	ands	r0, r7
 80022f0:	2780      	movs	r7, #128	; 0x80
 80022f2:	4303      	orrs	r3, r0
 80022f4:	68e0      	ldr	r0, [r4, #12]
 80022f6:	013f      	lsls	r7, r7, #4
 80022f8:	4038      	ands	r0, r7
 80022fa:	4303      	orrs	r3, r0
 80022fc:	6920      	ldr	r0, [r4, #16]
 80022fe:	2738      	movs	r7, #56	; 0x38
 8002300:	4030      	ands	r0, r6
 8002302:	4303      	orrs	r3, r0
 8002304:	6960      	ldr	r0, [r4, #20]
 8002306:	3e01      	subs	r6, #1
 8002308:	4030      	ands	r0, r6
 800230a:	4303      	orrs	r3, r0
 800230c:	2080      	movs	r0, #128	; 0x80
 800230e:	0080      	lsls	r0, r0, #2
 8002310:	4010      	ands	r0, r2
 8002312:	4303      	orrs	r3, r0
 8002314:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002316:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002318:	4038      	ands	r0, r7
 800231a:	4303      	orrs	r3, r0
 800231c:	6a20      	ldr	r0, [r4, #32]
 800231e:	3748      	adds	r7, #72	; 0x48
 8002320:	4038      	ands	r0, r7
 8002322:	2780      	movs	r7, #128	; 0x80
 8002324:	4303      	orrs	r3, r0
 8002326:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002328:	01bf      	lsls	r7, r7, #6
 800232a:	4038      	ands	r0, r7
 800232c:	4303      	orrs	r3, r0
 800232e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002330:	2304      	movs	r3, #4
 8002332:	2010      	movs	r0, #16
 8002334:	401a      	ands	r2, r3
 8002336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002338:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800233a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800233c:	431a      	orrs	r2, r3
 800233e:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002340:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002342:	702e      	strb	r6, [r5, #0]
}
 8002344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800234a:	6163      	str	r3, [r4, #20]
 800234c:	e7b2      	b.n	80022b4 <HAL_SPI_Init+0x1c>

0800234e <HAL_SPI_Transmit>:
{
 800234e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002350:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8002352:	0003      	movs	r3, r0
{
 8002354:	b085      	sub	sp, #20
 8002356:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hspi);
 8002358:	3350      	adds	r3, #80	; 0x50
{
 800235a:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 800235c:	781a      	ldrb	r2, [r3, #0]
{
 800235e:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8002360:	2702      	movs	r7, #2
 8002362:	2a01      	cmp	r2, #1
 8002364:	d100      	bne.n	8002368 <HAL_SPI_Transmit+0x1a>
 8002366:	e083      	b.n	8002470 <HAL_SPI_Transmit+0x122>
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800236c:	f7ff f86a 	bl	8001444 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002370:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002372:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8002374:	3351      	adds	r3, #81	; 0x51
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	b2d7      	uxtb	r7, r2
 800237a:	2a01      	cmp	r2, #1
 800237c:	d000      	beq.n	8002380 <HAL_SPI_Transmit+0x32>
 800237e:	e0a7      	b.n	80024d0 <HAL_SPI_Transmit+0x182>
  if ((pData == NULL) || (Size == 0U))
 8002380:	9a00      	ldr	r2, [sp, #0]
 8002382:	2a00      	cmp	r2, #0
 8002384:	d071      	beq.n	800246a <HAL_SPI_Transmit+0x11c>
 8002386:	2e00      	cmp	r6, #0
 8002388:	d06f      	beq.n	800246a <HAL_SPI_Transmit+0x11c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800238a:	2203      	movs	r2, #3
 800238c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800238e:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002390:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002392:	6322      	str	r2, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002398:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800239a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800239c:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 800239e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023a2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023a4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferSize  = Size;
 80023a6:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 80023a8:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023aa:	0212      	lsls	r2, r2, #8
 80023ac:	4291      	cmp	r1, r2
 80023ae:	d108      	bne.n	80023c2 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 80023b0:	2140      	movs	r1, #64	; 0x40
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	438a      	bics	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	01d2      	lsls	r2, r2, #7
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	4211      	tst	r1, r2
 80023c8:	d102      	bne.n	80023d0 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d4:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	4288      	cmp	r0, r1
 80023da:	d14c      	bne.n	8002476 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023dc:	2a00      	cmp	r2, #0
 80023de:	d001      	beq.n	80023e4 <HAL_SPI_Transmit+0x96>
 80023e0:	2e01      	cmp	r6, #1
 80023e2:	d109      	bne.n	80023f8 <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e4:	9a00      	ldr	r2, [sp, #0]
 80023e6:	8812      	ldrh	r2, [r2, #0]
 80023e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ea:	9b00      	ldr	r3, [sp, #0]
 80023ec:	3302      	adds	r3, #2
 80023ee:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80023f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023f8:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 80023fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d119      	bne.n	8002434 <HAL_SPI_Transmit+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002400:	0029      	movs	r1, r5
 8002402:	0020      	movs	r0, r4
 8002404:	9a01      	ldr	r2, [sp, #4]
 8002406:	f7ff ff15 	bl	8002234 <SPI_EndRxTxTransaction>
 800240a:	2800      	cmp	r0, #0
 800240c:	d15d      	bne.n	80024ca <HAL_SPI_Transmit+0x17c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240e:	68a3      	ldr	r3, [r4, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002414:	9303      	str	r3, [sp, #12]
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	9203      	str	r2, [sp, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002422:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002424:	2a00      	cmp	r2, #0
 8002426:	d120      	bne.n	800246a <HAL_SPI_Transmit+0x11c>
    hspi->State = HAL_SPI_STATE_READY;
 8002428:	0023      	movs	r3, r4
 800242a:	2101      	movs	r1, #1
 800242c:	3351      	adds	r3, #81	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 800242e:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8002430:	7019      	strb	r1, [r3, #0]
 8002432:	e01a      	b.n	800246a <HAL_SPI_Transmit+0x11c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002434:	6822      	ldr	r2, [r4, #0]
 8002436:	6893      	ldr	r3, [r2, #8]
 8002438:	4233      	tst	r3, r6
 800243a:	d009      	beq.n	8002450 <HAL_SPI_Transmit+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800243c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800243e:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002440:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002442:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002444:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002446:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002448:	3b01      	subs	r3, #1
 800244a:	b29b      	uxth	r3, r3
 800244c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800244e:	e7d4      	b.n	80023fa <HAL_SPI_Transmit+0xac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002450:	f7fe fff8 	bl	8001444 <HAL_GetTick>
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	1ac0      	subs	r0, r0, r3
 8002458:	42a8      	cmp	r0, r5
 800245a:	d3ce      	bcc.n	80023fa <HAL_SPI_Transmit+0xac>
 800245c:	1c6b      	adds	r3, r5, #1
 800245e:	d0cc      	beq.n	80023fa <HAL_SPI_Transmit+0xac>
          hspi->State = HAL_SPI_STATE_READY;
 8002460:	0023      	movs	r3, r4
 8002462:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8002464:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8002466:	3351      	adds	r3, #81	; 0x51
 8002468:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800246a:	2300      	movs	r3, #0
 800246c:	3450      	adds	r4, #80	; 0x50
 800246e:	7023      	strb	r3, [r4, #0]
}
 8002470:	0038      	movs	r0, r7
 8002472:	b005      	add	sp, #20
 8002474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002476:	2a00      	cmp	r2, #0
 8002478:	d001      	beq.n	800247e <HAL_SPI_Transmit+0x130>
 800247a:	2e01      	cmp	r6, #1
 800247c:	d109      	bne.n	8002492 <HAL_SPI_Transmit+0x144>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800247e:	9a00      	ldr	r2, [sp, #0]
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002484:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002486:	3301      	adds	r3, #1
 8002488:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800248a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800248c:	3b01      	subs	r3, #1
 800248e:	b29b      	uxth	r3, r3
 8002490:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002492:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8002494:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0b2      	beq.n	8002400 <HAL_SPI_Transmit+0xb2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	4232      	tst	r2, r6
 80024a0:	d00a      	beq.n	80024b8 <HAL_SPI_Transmit+0x16a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024aa:	3301      	adds	r3, #1
 80024ac:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80024ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80024b6:	e7ed      	b.n	8002494 <HAL_SPI_Transmit+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024b8:	f7fe ffc4 	bl	8001444 <HAL_GetTick>
 80024bc:	9b01      	ldr	r3, [sp, #4]
 80024be:	1ac0      	subs	r0, r0, r3
 80024c0:	42a8      	cmp	r0, r5
 80024c2:	d3e7      	bcc.n	8002494 <HAL_SPI_Transmit+0x146>
 80024c4:	1c6b      	adds	r3, r5, #1
 80024c6:	d0e5      	beq.n	8002494 <HAL_SPI_Transmit+0x146>
 80024c8:	e7ca      	b.n	8002460 <HAL_SPI_Transmit+0x112>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024ca:	2320      	movs	r3, #32
 80024cc:	6563      	str	r3, [r4, #84]	; 0x54
 80024ce:	e79e      	b.n	800240e <HAL_SPI_Transmit+0xc0>
    errorcode = HAL_BUSY;
 80024d0:	2702      	movs	r7, #2
 80024d2:	e7ca      	b.n	800246a <HAL_SPI_Transmit+0x11c>

080024d4 <HAL_SPI_TransmitReceive>:
{
 80024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d6:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80024d8:	0003      	movs	r3, r0
 80024da:	3350      	adds	r3, #80	; 0x50
{
 80024dc:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80024de:	781a      	ldrb	r2, [r3, #0]
{
 80024e0:	0004      	movs	r4, r0
 80024e2:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80024e4:	2002      	movs	r0, #2
{
 80024e6:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80024e8:	2a01      	cmp	r2, #1
 80024ea:	d100      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x1a>
 80024ec:	e094      	b.n	8002618 <HAL_SPI_TransmitReceive+0x144>
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80024f2:	f7fe ffa7 	bl	8001444 <HAL_GetTick>
  tmp_state           = hspi->State;
 80024f6:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80024f8:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 80024fa:	3351      	adds	r3, #81	; 0x51
 80024fc:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80024fe:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002500:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002502:	2b01      	cmp	r3, #1
 8002504:	d00c      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x4c>
 8002506:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8002508:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4299      	cmp	r1, r3
 800250e:	d000      	beq.n	8002512 <HAL_SPI_TransmitReceive+0x3e>
 8002510:	e07f      	b.n	8002612 <HAL_SPI_TransmitReceive+0x13e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002512:	68a3      	ldr	r3, [r4, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d000      	beq.n	800251a <HAL_SPI_TransmitReceive+0x46>
 8002518:	e07b      	b.n	8002612 <HAL_SPI_TransmitReceive+0x13e>
 800251a:	2a04      	cmp	r2, #4
 800251c:	d000      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x4c>
 800251e:	e078      	b.n	8002612 <HAL_SPI_TransmitReceive+0x13e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002520:	2d00      	cmp	r5, #0
 8002522:	d101      	bne.n	8002528 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8002524:	2001      	movs	r0, #1
    goto error;
 8002526:	e074      	b.n	8002612 <HAL_SPI_TransmitReceive+0x13e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002528:	2f00      	cmp	r7, #0
 800252a:	d0fb      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x50>
 800252c:	2e00      	cmp	r6, #0
 800252e:	d0f9      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002530:	0023      	movs	r3, r4
 8002532:	3351      	adds	r3, #81	; 0x51
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	2a04      	cmp	r2, #4
 8002538:	d001      	beq.n	800253e <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800253a:	2205      	movs	r2, #5
 800253c:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800253e:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002540:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002542:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002544:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002546:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002548:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800254a:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800254c:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800254e:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002550:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002552:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002554:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002556:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002558:	4210      	tst	r0, r2
 800255a:	d102      	bne.n	8002562 <HAL_SPI_TransmitReceive+0x8e>
    __HAL_SPI_ENABLE(hspi);
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	4302      	orrs	r2, r0
 8002560:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	68e0      	ldr	r0, [r4, #12]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	4290      	cmp	r0, r2
 800256a:	d157      	bne.n	800261c <HAL_SPI_TransmitReceive+0x148>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800256c:	2900      	cmp	r1, #0
 800256e:	d001      	beq.n	8002574 <HAL_SPI_TransmitReceive+0xa0>
 8002570:	2e01      	cmp	r6, #1
 8002572:	d107      	bne.n	8002584 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002574:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002576:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002578:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800257a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800257c:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800257e:	3b01      	subs	r3, #1
 8002580:	b29b      	uxth	r3, r3
 8002582:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002584:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002586:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002588:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800258a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10d      	bne.n	80025ac <HAL_SPI_TransmitReceive+0xd8>
 8002590:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10a      	bne.n	80025ac <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002596:	0020      	movs	r0, r4
 8002598:	9a01      	ldr	r2, [sp, #4]
 800259a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800259c:	f7ff fe4a 	bl	8002234 <SPI_EndRxTxTransaction>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d100      	bne.n	80025a6 <HAL_SPI_TransmitReceive+0xd2>
 80025a4:	e082      	b.n	80026ac <HAL_SPI_TransmitReceive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a6:	2320      	movs	r3, #32
 80025a8:	6563      	str	r3, [r4, #84]	; 0x54
 80025aa:	e7bb      	b.n	8002524 <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ac:	6821      	ldr	r1, [r4, #0]
 80025ae:	688b      	ldr	r3, [r1, #8]
 80025b0:	423b      	tst	r3, r7
 80025b2:	d00e      	beq.n	80025d2 <HAL_SPI_TransmitReceive+0xfe>
 80025b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_SPI_TransmitReceive+0xfe>
 80025ba:	2d01      	cmp	r5, #1
 80025bc:	d109      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0xfe>
        txallowed = 0U;
 80025be:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025c2:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c4:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c6:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80025ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025d2:	688b      	ldr	r3, [r1, #8]
 80025d4:	001a      	movs	r2, r3
 80025d6:	4032      	ands	r2, r6
 80025d8:	4233      	tst	r3, r6
 80025da:	d00c      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x122>
 80025dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x122>
        txallowed = 1U;
 80025e2:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025e4:	68c9      	ldr	r1, [r1, #12]
 80025e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025e8:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025ea:	3302      	adds	r3, #2
 80025ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80025ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025f6:	f7fe ff25 	bl	8001444 <HAL_GetTick>
 80025fa:	9b01      	ldr	r3, [sp, #4]
 80025fc:	1ac0      	subs	r0, r0, r3
 80025fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002600:	4298      	cmp	r0, r3
 8002602:	d3c2      	bcc.n	800258a <HAL_SPI_TransmitReceive+0xb6>
 8002604:	3301      	adds	r3, #1
 8002606:	d0c0      	beq.n	800258a <HAL_SPI_TransmitReceive+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 8002608:	0023      	movs	r3, r4
 800260a:	2201      	movs	r2, #1
        errorcode = HAL_TIMEOUT;
 800260c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800260e:	3351      	adds	r3, #81	; 0x51
 8002610:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8002612:	2300      	movs	r3, #0
 8002614:	3450      	adds	r4, #80	; 0x50
 8002616:	7023      	strb	r3, [r4, #0]
}
 8002618:	b005      	add	sp, #20
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800261c:	2900      	cmp	r1, #0
 800261e:	d001      	beq.n	8002624 <HAL_SPI_TransmitReceive+0x150>
 8002620:	2e01      	cmp	r6, #1
 8002622:	d108      	bne.n	8002636 <HAL_SPI_TransmitReceive+0x162>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002624:	782a      	ldrb	r2, [r5, #0]
 8002626:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002628:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800262a:	3301      	adds	r3, #1
 800262c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800262e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002630:	3b01      	subs	r3, #1
 8002632:	b29b      	uxth	r3, r3
 8002634:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002636:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002638:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800263a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800263c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_SPI_TransmitReceive+0x174>
 8002642:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0a6      	beq.n	8002596 <HAL_SPI_TransmitReceive+0xc2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	423a      	tst	r2, r7
 800264e:	d00f      	beq.n	8002670 <HAL_SPI_TransmitReceive+0x19c>
 8002650:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002652:	2a00      	cmp	r2, #0
 8002654:	d00c      	beq.n	8002670 <HAL_SPI_TransmitReceive+0x19c>
 8002656:	2d01      	cmp	r5, #1
 8002658:	d10a      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x19c>
        txallowed = 0U;
 800265a:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800265c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002662:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002664:	3301      	adds	r3, #1
 8002666:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002668:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800266a:	3b01      	subs	r3, #1
 800266c:	b29b      	uxth	r3, r3
 800266e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	000a      	movs	r2, r1
 8002676:	4032      	ands	r2, r6
 8002678:	4231      	tst	r1, r6
 800267a:	d00d      	beq.n	8002698 <HAL_SPI_TransmitReceive+0x1c4>
 800267c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800267e:	2900      	cmp	r1, #0
 8002680:	d00a      	beq.n	8002698 <HAL_SPI_TransmitReceive+0x1c4>
        txallowed = 1U;
 8002682:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002684:	68d9      	ldr	r1, [r3, #12]
 8002686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002688:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 800268a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800268c:	3301      	adds	r3, #1
 800268e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002690:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002692:	3b01      	subs	r3, #1
 8002694:	b29b      	uxth	r3, r3
 8002696:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002698:	f7fe fed4 	bl	8001444 <HAL_GetTick>
 800269c:	9b01      	ldr	r3, [sp, #4]
 800269e:	1ac0      	subs	r0, r0, r3
 80026a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026a2:	4298      	cmp	r0, r3
 80026a4:	d3ca      	bcc.n	800263c <HAL_SPI_TransmitReceive+0x168>
 80026a6:	3301      	adds	r3, #1
 80026a8:	d0c8      	beq.n	800263c <HAL_SPI_TransmitReceive+0x168>
 80026aa:	e7ad      	b.n	8002608 <HAL_SPI_TransmitReceive+0x134>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026ac:	68a3      	ldr	r3, [r4, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_SPI_TransmitReceive+0x1ec>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	9003      	str	r0, [sp, #12]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	9203      	str	r2, [sp, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	9303      	str	r3, [sp, #12]
 80026be:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d000      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0x1f4>
 80026c6:	e72d      	b.n	8002524 <HAL_SPI_TransmitReceive+0x50>
    hspi->State = HAL_SPI_STATE_READY;
 80026c8:	0023      	movs	r3, r4
 80026ca:	2201      	movs	r2, #1
 80026cc:	3351      	adds	r3, #81	; 0x51
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e79f      	b.n	8002612 <HAL_SPI_TransmitReceive+0x13e>
	...

080026d4 <HAL_SPI_Receive>:
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 80026d6:	0007      	movs	r7, r0
{
 80026d8:	b087      	sub	sp, #28
 80026da:	9103      	str	r1, [sp, #12]
 80026dc:	9204      	str	r2, [sp, #16]
  if (hspi->State != HAL_SPI_STATE_READY)
 80026de:	3751      	adds	r7, #81	; 0x51
{
 80026e0:	001e      	movs	r6, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 80026e2:	783b      	ldrb	r3, [r7, #0]
{
 80026e4:	0004      	movs	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80026e6:	b2dd      	uxtb	r5, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d000      	beq.n	80026ee <HAL_SPI_Receive+0x1a>
 80026ec:	e096      	b.n	800281c <HAL_SPI_Receive+0x148>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026ee:	3304      	adds	r3, #4
 80026f0:	6842      	ldr	r2, [r0, #4]
 80026f2:	33ff      	adds	r3, #255	; 0xff
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d10d      	bne.n	8002714 <HAL_SPI_Receive+0x40>
 80026f8:	6883      	ldr	r3, [r0, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <HAL_SPI_Receive+0x40>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026fe:	3304      	adds	r3, #4
 8002700:	703b      	strb	r3, [r7, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002702:	000a      	movs	r2, r1
 8002704:	9b04      	ldr	r3, [sp, #16]
 8002706:	9600      	str	r6, [sp, #0]
 8002708:	f7ff fee4 	bl	80024d4 <HAL_SPI_TransmitReceive>
 800270c:	0005      	movs	r5, r0
}
 800270e:	0028      	movs	r0, r5
 8002710:	b007      	add	sp, #28
 8002712:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8002714:	0023      	movs	r3, r4
 8002716:	3350      	adds	r3, #80	; 0x50
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	2a01      	cmp	r2, #1
 800271c:	d100      	bne.n	8002720 <HAL_SPI_Receive+0x4c>
 800271e:	e07f      	b.n	8002820 <HAL_SPI_Receive+0x14c>
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002724:	f7fe fe8e 	bl	8001444 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8002728:	9b03      	ldr	r3, [sp, #12]
  tickstart = HAL_GetTick();
 800272a:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 800272c:	2b00      	cmp	r3, #0
 800272e:	d065      	beq.n	80027fc <HAL_SPI_Receive+0x128>
 8002730:	9b04      	ldr	r3, [sp, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d062      	beq.n	80027fc <HAL_SPI_Receive+0x128>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002736:	2304      	movs	r3, #4
 8002738:	703b      	strb	r3, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800273a:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800273c:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800273e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002740:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002742:	9a04      	ldr	r2, [sp, #16]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002744:	68a1      	ldr	r1, [r4, #8]
  hspi->RxXferCount = Size;
 8002746:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002748:	87a2      	strh	r2, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274a:	2280      	movs	r2, #128	; 0x80
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800274c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800274e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002750:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002752:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002754:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002756:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8002758:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800275a:	4291      	cmp	r1, r2
 800275c:	d107      	bne.n	800276e <HAL_SPI_Receive+0x9a>
    __HAL_SPI_DISABLE(hspi);
 800275e:	2140      	movs	r1, #64	; 0x40
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	438a      	bics	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	492e      	ldr	r1, [pc, #184]	; (8002824 <HAL_SPI_Receive+0x150>)
 800276a:	400a      	ands	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800276e:	2240      	movs	r2, #64	; 0x40
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	4211      	tst	r1, r2
 8002774:	d102      	bne.n	800277c <HAL_SPI_Receive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8002776:	6819      	ldr	r1, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800277c:	68e3      	ldr	r3, [r4, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d020      	beq.n	80027c4 <HAL_SPI_Receive+0xf0>
    while (hspi->RxXferCount > 0U)
 8002782:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_SPI_Receive+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002788:	2101      	movs	r1, #1
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	420a      	tst	r2, r1
 8002790:	d038      	beq.n	8002804 <HAL_SPI_Receive+0x130>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002796:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002798:	3302      	adds	r3, #2
 800279a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800279c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80027a4:	e7ed      	b.n	8002782 <HAL_SPI_Receive+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027a6:	2101      	movs	r1, #1
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	420a      	tst	r2, r1
 80027ae:	d01a      	beq.n	80027e6 <HAL_SPI_Receive+0x112>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027b0:	7b1b      	ldrb	r3, [r3, #12]
 80027b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80027b4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027b8:	185b      	adds	r3, r3, r1
 80027ba:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80027bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80027c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ed      	bne.n	80027a6 <HAL_SPI_Receive+0xd2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ca:	0031      	movs	r1, r6
 80027cc:	0020      	movs	r0, r4
 80027ce:	9a05      	ldr	r2, [sp, #20]
 80027d0:	f7ff fd06 	bl	80021e0 <SPI_EndRxTransaction>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d11e      	bne.n	8002816 <HAL_SPI_Receive+0x142>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10e      	bne.n	80027fc <HAL_SPI_Receive+0x128>
    hspi->State = HAL_SPI_STATE_READY;
 80027de:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027e0:	001d      	movs	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 80027e2:	703a      	strb	r2, [r7, #0]
 80027e4:	e00a      	b.n	80027fc <HAL_SPI_Receive+0x128>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027e6:	f7fe fe2d 	bl	8001444 <HAL_GetTick>
 80027ea:	9b05      	ldr	r3, [sp, #20]
 80027ec:	1ac0      	subs	r0, r0, r3
 80027ee:	42b0      	cmp	r0, r6
 80027f0:	d3e8      	bcc.n	80027c4 <HAL_SPI_Receive+0xf0>
 80027f2:	1c73      	adds	r3, r6, #1
 80027f4:	d0e6      	beq.n	80027c4 <HAL_SPI_Receive+0xf0>
          hspi->State = HAL_SPI_STATE_READY;
 80027f6:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 80027f8:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 80027fa:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 80027fc:	2300      	movs	r3, #0
 80027fe:	3450      	adds	r4, #80	; 0x50
 8002800:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8002802:	e784      	b.n	800270e <HAL_SPI_Receive+0x3a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002804:	f7fe fe1e 	bl	8001444 <HAL_GetTick>
 8002808:	9b05      	ldr	r3, [sp, #20]
 800280a:	1ac0      	subs	r0, r0, r3
 800280c:	42b0      	cmp	r0, r6
 800280e:	d3b8      	bcc.n	8002782 <HAL_SPI_Receive+0xae>
 8002810:	1c73      	adds	r3, r6, #1
 8002812:	d0b6      	beq.n	8002782 <HAL_SPI_Receive+0xae>
 8002814:	e7ef      	b.n	80027f6 <HAL_SPI_Receive+0x122>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002816:	2320      	movs	r3, #32
 8002818:	6563      	str	r3, [r4, #84]	; 0x54
 800281a:	e7dd      	b.n	80027d8 <HAL_SPI_Receive+0x104>
    errorcode = HAL_BUSY;
 800281c:	2502      	movs	r5, #2
 800281e:	e7ed      	b.n	80027fc <HAL_SPI_Receive+0x128>
  __HAL_LOCK(hspi);
 8002820:	2502      	movs	r5, #2
 8002822:	e774      	b.n	800270e <HAL_SPI_Receive+0x3a>
 8002824:	ffffbfff 	.word	0xffffbfff

08002828 <HAL_SPI_ErrorCallback>:
 8002828:	4770      	bx	lr
	...

0800282c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800282c:	6803      	ldr	r3, [r0, #0]
{
 800282e:	b530      	push	{r4, r5, lr}
 8002830:	0004      	movs	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002832:	2041      	movs	r0, #65	; 0x41
  uint32_t itsource = hspi->Instance->CR2;
 8002834:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002836:	689a      	ldr	r2, [r3, #8]
{
 8002838:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800283a:	4010      	ands	r0, r2
 800283c:	2801      	cmp	r0, #1
 800283e:	d106      	bne.n	800284e <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002840:	0648      	lsls	r0, r1, #25
 8002842:	d504      	bpl.n	800284e <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 8002844:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hspi->TxISR(hspi);
 8002846:	0020      	movs	r0, r4
 8002848:	4798      	blx	r3
}
 800284a:	b005      	add	sp, #20
 800284c:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800284e:	0790      	lsls	r0, r2, #30
 8002850:	d503      	bpl.n	800285a <HAL_SPI_IRQHandler+0x2e>
 8002852:	0608      	lsls	r0, r1, #24
 8002854:	d501      	bpl.n	800285a <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8002856:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002858:	e7f5      	b.n	8002846 <HAL_SPI_IRQHandler+0x1a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800285a:	20b0      	movs	r0, #176	; 0xb0
 800285c:	0040      	lsls	r0, r0, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800285e:	4202      	tst	r2, r0
 8002860:	d0f3      	beq.n	800284a <HAL_SPI_IRQHandler+0x1e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002862:	0688      	lsls	r0, r1, #26
 8002864:	d5f1      	bpl.n	800284a <HAL_SPI_IRQHandler+0x1e>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002866:	0650      	lsls	r0, r2, #25
 8002868:	d50f      	bpl.n	800288a <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800286a:	0020      	movs	r0, r4
 800286c:	3051      	adds	r0, #81	; 0x51
 800286e:	7800      	ldrb	r0, [r0, #0]
 8002870:	2803      	cmp	r0, #3
 8002872:	d050      	beq.n	8002916 <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002874:	2004      	movs	r0, #4
 8002876:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002878:	4328      	orrs	r0, r5
 800287a:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800287c:	2000      	movs	r0, #0
 800287e:	9000      	str	r0, [sp, #0]
 8002880:	68d8      	ldr	r0, [r3, #12]
 8002882:	9000      	str	r0, [sp, #0]
 8002884:	6898      	ldr	r0, [r3, #8]
 8002886:	9000      	str	r0, [sp, #0]
 8002888:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800288a:	0690      	lsls	r0, r2, #26
 800288c:	d50c      	bpl.n	80028a8 <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800288e:	2001      	movs	r0, #1
 8002890:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002892:	4328      	orrs	r0, r5
 8002894:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002896:	2000      	movs	r0, #0
 8002898:	2540      	movs	r5, #64	; 0x40
 800289a:	9002      	str	r0, [sp, #8]
 800289c:	6898      	ldr	r0, [r3, #8]
 800289e:	9002      	str	r0, [sp, #8]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	43a8      	bics	r0, r5
 80028a4:	6018      	str	r0, [r3, #0]
 80028a6:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80028a8:	05d2      	lsls	r2, r2, #23
 80028aa:	d508      	bpl.n	80028be <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80028ac:	2208      	movs	r2, #8
 80028ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028b0:	4302      	orrs	r2, r0
 80028b2:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80028b4:	2200      	movs	r2, #0
 80028b6:	9203      	str	r2, [sp, #12]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	9203      	str	r2, [sp, #12]
 80028bc:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028be:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80028c0:	2a00      	cmp	r2, #0
 80028c2:	d0c2      	beq.n	800284a <HAL_SPI_IRQHandler+0x1e>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80028c4:	20e0      	movs	r0, #224	; 0xe0
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4382      	bics	r2, r0
 80028ca:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80028cc:	0022      	movs	r2, r4
 80028ce:	38df      	subs	r0, #223	; 0xdf
 80028d0:	3251      	adds	r2, #81	; 0x51
 80028d2:	7010      	strb	r0, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80028d4:	3002      	adds	r0, #2
 80028d6:	4201      	tst	r1, r0
 80028d8:	d025      	beq.n	8002926 <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4382      	bics	r2, r0
        if (hspi->hdmarx != NULL)
 80028de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028e0:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d009      	beq.n	80028fa <HAL_SPI_IRQHandler+0xce>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_SPI_IRQHandler+0x104>)
 80028e8:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80028ea:	f7fe feb7 	bl	800165c <HAL_DMA_Abort_IT>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d003      	beq.n	80028fa <HAL_SPI_IRQHandler+0xce>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028f2:	2340      	movs	r3, #64	; 0x40
 80028f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80028f6:	4313      	orrs	r3, r2
 80028f8:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80028fa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d0a4      	beq.n	800284a <HAL_SPI_IRQHandler+0x1e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_SPI_IRQHandler+0x104>)
 8002902:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002904:	f7fe feaa 	bl	800165c <HAL_DMA_Abort_IT>
 8002908:	2800      	cmp	r0, #0
 800290a:	d09e      	beq.n	800284a <HAL_SPI_IRQHandler+0x1e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002910:	4313      	orrs	r3, r2
 8002912:	6563      	str	r3, [r4, #84]	; 0x54
 8002914:	e799      	b.n	800284a <HAL_SPI_IRQHandler+0x1e>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002916:	2200      	movs	r2, #0
 8002918:	9201      	str	r2, [sp, #4]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	9201      	str	r2, [sp, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	9b01      	ldr	r3, [sp, #4]
        return;
 8002924:	e791      	b.n	800284a <HAL_SPI_IRQHandler+0x1e>
        HAL_SPI_ErrorCallback(hspi);
 8002926:	0020      	movs	r0, r4
 8002928:	f7ff ff7e 	bl	8002828 <HAL_SPI_ErrorCallback>
 800292c:	e78d      	b.n	800284a <HAL_SPI_IRQHandler+0x1e>
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	08002935 	.word	0x08002935

08002934 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8002934:	2300      	movs	r3, #0
{
 8002936:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002938:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800293a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800293c:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800293e:	f7ff ff73 	bl	8002828 <HAL_SPI_ErrorCallback>
}
 8002942:	bd10      	pop	{r4, pc}

08002944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002944:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002946:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294a:	2201      	movs	r2, #1
 800294c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002950:	6801      	ldr	r1, [r0, #0]
 8002952:	4d12      	ldr	r5, [pc, #72]	; (800299c <UART_EndRxTransfer+0x58>)
 8002954:	680b      	ldr	r3, [r1, #0]
 8002956:	402b      	ands	r3, r5
 8002958:	600b      	str	r3, [r1, #0]
 800295a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002962:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002966:	6801      	ldr	r1, [r0, #0]
 8002968:	688b      	ldr	r3, [r1, #8]
 800296a:	4393      	bics	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
 800296e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002972:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002974:	4293      	cmp	r3, r2
 8002976:	d10a      	bne.n	800298e <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002978:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002980:	2410      	movs	r4, #16
 8002982:	6802      	ldr	r2, [r0, #0]
 8002984:	6813      	ldr	r3, [r2, #0]
 8002986:	43a3      	bics	r3, r4
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800298e:	2220      	movs	r2, #32
 8002990:	1d03      	adds	r3, r0, #4
 8002992:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002994:	2300      	movs	r3, #0
 8002996:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002998:	6683      	str	r3, [r0, #104]	; 0x68
}
 800299a:	bd30      	pop	{r4, r5, pc}
 800299c:	fffffedf 	.word	0xfffffedf

080029a0 <HAL_UART_Transmit_DMA>:
{
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80029a4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80029a6:	0004      	movs	r4, r0
    return HAL_BUSY;
 80029a8:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80029aa:	2a20      	cmp	r2, #32
 80029ac:	d130      	bne.n	8002a10 <HAL_UART_Transmit_DMA+0x70>
      return HAL_ERROR;
 80029ae:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80029b0:	2900      	cmp	r1, #0
 80029b2:	d02d      	beq.n	8002a10 <HAL_UART_Transmit_DMA+0x70>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d02b      	beq.n	8002a10 <HAL_UART_Transmit_DMA+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	68a0      	ldr	r0, [r4, #8]
 80029bc:	0152      	lsls	r2, r2, #5
 80029be:	4290      	cmp	r0, r2
 80029c0:	d106      	bne.n	80029d0 <HAL_UART_Transmit_DMA+0x30>
 80029c2:	6922      	ldr	r2, [r4, #16]
 80029c4:	2a00      	cmp	r2, #0
 80029c6:	d103      	bne.n	80029d0 <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 80029c8:	3201      	adds	r2, #1
      return HAL_ERROR;
 80029ca:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 80029cc:	4211      	tst	r1, r2
 80029ce:	d11f      	bne.n	8002a10 <HAL_UART_Transmit_DMA+0x70>
    huart->TxXferSize  = Size;
 80029d0:	0022      	movs	r2, r4
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	0025      	movs	r5, r4
    huart->TxXferSize  = Size;
 80029d4:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 80029d6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 80029da:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 80029dc:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029de:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 80029e0:	6f20      	ldr	r0, [r4, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	3508      	adds	r5, #8
 80029e4:	67ee      	str	r6, [r5, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e6:	67e2      	str	r2, [r4, #124]	; 0x7c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80029e8:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 80029ea:	42b0      	cmp	r0, r6
 80029ec:	d011      	beq.n	8002a12 <HAL_UART_Transmit_DMA+0x72>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80029ee:	4f11      	ldr	r7, [pc, #68]	; (8002a34 <HAL_UART_Transmit_DMA+0x94>)
      huart->hdmatx->XferAbortCallback = NULL;
 80029f0:	6386      	str	r6, [r0, #56]	; 0x38
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80029f2:	62c7      	str	r7, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80029f4:	4f10      	ldr	r7, [pc, #64]	; (8002a38 <HAL_UART_Transmit_DMA+0x98>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80029f6:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80029f8:	6307      	str	r7, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80029fa:	4f10      	ldr	r7, [pc, #64]	; (8002a3c <HAL_UART_Transmit_DMA+0x9c>)
 80029fc:	6347      	str	r7, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80029fe:	f7fe fdcd 	bl	800159c <HAL_DMA_Start_IT>
 8002a02:	42b0      	cmp	r0, r6
 8002a04:	d005      	beq.n	8002a12 <HAL_UART_Transmit_DMA+0x72>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002a06:	2310      	movs	r3, #16
        return HAL_ERROR;
 8002a08:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002a0a:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8002a0c:	18db      	adds	r3, r3, r3
 8002a0e:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8002a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a18:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	337f      	adds	r3, #127	; 0x7f
 8002a26:	6890      	ldr	r0, [r2, #8]
 8002a28:	4303      	orrs	r3, r0
 8002a2a:	6093      	str	r3, [r2, #8]
 8002a2c:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8002a30:	2000      	movs	r0, #0
 8002a32:	e7ed      	b.n	8002a10 <HAL_UART_Transmit_DMA+0x70>
 8002a34:	08002a41 	.word	0x08002a41
 8002a38:	08002a93 	.word	0x08002a93
 8002a3c:	08002a9f 	.word	0x08002a9f

08002a40 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a40:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002a42:	681b      	ldr	r3, [r3, #0]
{
 8002a44:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2320      	movs	r3, #32
 8002a4a:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002a4e:	4019      	ands	r1, r3
 8002a50:	421a      	tst	r2, r3
 8002a52:	d11a      	bne.n	8002a8a <UART_DMATransmitCplt+0x4a>
  {
    huart->TxXferCount = 0U;
 8002a54:	0003      	movs	r3, r0
 8002a56:	3352      	adds	r3, #82	; 0x52
 8002a58:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a5a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a64:	2580      	movs	r5, #128	; 0x80
 8002a66:	6801      	ldr	r1, [r0, #0]
 8002a68:	688b      	ldr	r3, [r1, #8]
 8002a6a:	43ab      	bics	r3, r5
 8002a6c:	608b      	str	r3, [r1, #8]
 8002a6e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a72:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a76:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a7a:	2340      	movs	r3, #64	; 0x40
 8002a7c:	6802      	ldr	r2, [r0, #0]
 8002a7e:	6810      	ldr	r0, [r2, #0]
 8002a80:	4303      	orrs	r3, r0
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_TxCpltCallback(huart);
 8002a8a:	f7fe fb65 	bl	8001158 <HAL_UART_TxCpltCallback>
}
 8002a8e:	e7fb      	b.n	8002a88 <UART_DMATransmitCplt+0x48>

08002a90 <HAL_UART_TxHalfCpltCallback>:
 8002a90:	4770      	bx	lr

08002a92 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a92:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002a94:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002a96:	f7ff fffb 	bl	8002a90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a9a:	bd10      	pop	{r4, pc}

08002a9c <HAL_UART_RxCpltCallback>:
 8002a9c:	4770      	bx	lr

08002a9e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a9e:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002aa0:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002aa2:	1d23      	adds	r3, r4, #4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002aa4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002aa6:	6fd9      	ldr	r1, [r3, #124]	; 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	d513      	bpl.n	8002ad8 <UART_DMAError+0x3a>
 8002ab0:	2a21      	cmp	r2, #33	; 0x21
 8002ab2:	d111      	bne.n	8002ad8 <UART_DMAError+0x3a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002ab4:	0023      	movs	r3, r4
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	3352      	adds	r3, #82	; 0x52
 8002aba:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ac6:	25c0      	movs	r5, #192	; 0xc0
 8002ac8:	6822      	ldr	r2, [r4, #0]
 8002aca:	6813      	ldr	r3, [r2, #0]
 8002acc:	43ab      	bics	r3, r5
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	67e3      	str	r3, [r4, #124]	; 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	065b      	lsls	r3, r3, #25
 8002ade:	d508      	bpl.n	8002af2 <UART_DMAError+0x54>
 8002ae0:	2922      	cmp	r1, #34	; 0x22
 8002ae2:	d106      	bne.n	8002af2 <UART_DMAError+0x54>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002ae4:	0023      	movs	r3, r4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8002aea:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8002aec:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8002aee:	f7ff ff29 	bl	8002944 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002af2:	0022      	movs	r2, r4
 8002af4:	2310      	movs	r3, #16
 8002af6:	3208      	adds	r2, #8
 8002af8:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002afa:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002afc:	430b      	orrs	r3, r1
 8002afe:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8002b00:	f7fe fb3e 	bl	8001180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b04:	bd70      	pop	{r4, r5, r6, pc}

08002b06 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b06:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	0002      	movs	r2, r0
{
 8002b0c:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002b0e:	325a      	adds	r2, #90	; 0x5a
 8002b10:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002b12:	3a08      	subs	r2, #8
 8002b14:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b16:	f7fe fb33 	bl	8001180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b1a:	bd10      	pop	{r4, pc}

08002b1c <HAL_UART_IRQHandler>:
{
 8002b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b1e:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b20:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b22:	4bab      	ldr	r3, [pc, #684]	; (8002dd0 <HAL_UART_IRQHandler+0x2b4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b24:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b26:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b28:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 8002b2a:	4219      	tst	r1, r3
 8002b2c:	d10b      	bne.n	8002b46 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b2e:	2320      	movs	r3, #32
 8002b30:	4219      	tst	r1, r3
 8002b32:	d100      	bne.n	8002b36 <HAL_UART_IRQHandler+0x1a>
 8002b34:	e080      	b.n	8002c38 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b36:	421e      	tst	r6, r3
 8002b38:	d100      	bne.n	8002b3c <HAL_UART_IRQHandler+0x20>
 8002b3a:	e07d      	b.n	8002c38 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8002b3c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      huart->TxISR(huart);
 8002b3e:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d16f      	bne.n	8002c24 <HAL_UART_IRQHandler+0x108>
 8002b44:	e06f      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b46:	2301      	movs	r3, #1
 8002b48:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b4a:	4aa2      	ldr	r2, [pc, #648]	; (8002dd4 <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b4c:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b4e:	4032      	ands	r2, r6
 8002b50:	433a      	orrs	r2, r7
 8002b52:	d100      	bne.n	8002b56 <HAL_UART_IRQHandler+0x3a>
 8002b54:	e070      	b.n	8002c38 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b56:	0025      	movs	r5, r4
 8002b58:	3508      	adds	r5, #8
 8002b5a:	4219      	tst	r1, r3
 8002b5c:	d005      	beq.n	8002b6a <HAL_UART_IRQHandler+0x4e>
 8002b5e:	05f2      	lsls	r2, r6, #23
 8002b60:	d503      	bpl.n	8002b6a <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b62:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b64:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002b66:	4313      	orrs	r3, r2
 8002b68:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	4219      	tst	r1, r3
 8002b6e:	d006      	beq.n	8002b7e <HAL_UART_IRQHandler+0x62>
 8002b70:	2f00      	cmp	r7, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b74:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b76:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002b78:	18db      	adds	r3, r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b7e:	2304      	movs	r3, #4
 8002b80:	4219      	tst	r1, r3
 8002b82:	d006      	beq.n	8002b92 <HAL_UART_IRQHandler+0x76>
 8002b84:	2f00      	cmp	r7, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b88:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b8a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002b8c:	3b02      	subs	r3, #2
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b92:	2308      	movs	r3, #8
 8002b94:	4219      	tst	r1, r3
 8002b96:	d007      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b98:	2220      	movs	r2, #32
 8002b9a:	4032      	ands	r2, r6
 8002b9c:	433a      	orrs	r2, r7
 8002b9e:	d003      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba0:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ba2:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	4219      	tst	r1, r3
 8002bae:	d006      	beq.n	8002bbe <HAL_UART_IRQHandler+0xa2>
 8002bb0:	0172      	lsls	r2, r6, #5
 8002bb2:	d504      	bpl.n	8002bbe <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bb4:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bbe:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d030      	beq.n	8002c26 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	4219      	tst	r1, r3
 8002bc8:	d006      	beq.n	8002bd8 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bca:	421e      	tst	r6, r3
 8002bcc:	d004      	beq.n	8002bd8 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8002bce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8002bd4:	0020      	movs	r0, r4
 8002bd6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bd8:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002bda:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bdc:	2740      	movs	r7, #64	; 0x40
 8002bde:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002be0:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002be2:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002be4:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8002be6:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002be8:	431e      	orrs	r6, r3
 8002bea:	d021      	beq.n	8002c30 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8002bec:	f7ff feaa 	bl	8002944 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	423b      	tst	r3, r7
 8002bf6:	d017      	beq.n	8002c28 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	6822      	ldr	r2, [r4, #0]
 8002c04:	6893      	ldr	r3, [r2, #8]
 8002c06:	43bb      	bics	r3, r7
 8002c08:	6093      	str	r3, [r2, #8]
 8002c0a:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002c0e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002c10:	2800      	cmp	r0, #0
 8002c12:	d009      	beq.n	8002c28 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c14:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <HAL_UART_IRQHandler+0x2bc>)
 8002c16:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c18:	f7fe fd20 	bl	800165c <HAL_DMA_Abort_IT>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c20:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002c22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002c24:	4798      	blx	r3
}
 8002c26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002c28:	0020      	movs	r0, r4
 8002c2a:	f7fe faa9 	bl	8001180 <HAL_UART_ErrorCallback>
 8002c2e:	e7fa      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002c30:	f7fe faa6 	bl	8001180 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	67ee      	str	r6, [r5, #124]	; 0x7c
 8002c36:	e7f6      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d000      	beq.n	8002c40 <HAL_UART_IRQHandler+0x124>
 8002c3e:	e09a      	b.n	8002d76 <HAL_UART_IRQHandler+0x25a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c40:	2210      	movs	r2, #16
 8002c42:	4211      	tst	r1, r2
 8002c44:	d100      	bne.n	8002c48 <HAL_UART_IRQHandler+0x12c>
 8002c46:	e096      	b.n	8002d76 <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c48:	4216      	tst	r6, r2
 8002c4a:	d100      	bne.n	8002c4e <HAL_UART_IRQHandler+0x132>
 8002c4c:	e093      	b.n	8002d76 <HAL_UART_IRQHandler+0x25a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c4e:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	6881      	ldr	r1, [r0, #8]
 8002c52:	2640      	movs	r6, #64	; 0x40
 8002c54:	000f      	movs	r7, r1
 8002c56:	4037      	ands	r7, r6
 8002c58:	4231      	tst	r1, r6
 8002c5a:	d053      	beq.n	8002d04 <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c5c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002c5e:	6808      	ldr	r0, [r1, #0]
 8002c60:	6841      	ldr	r1, [r0, #4]
 8002c62:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8002c64:	2900      	cmp	r1, #0
 8002c66:	d0de      	beq.n	8002c26 <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c68:	0025      	movs	r5, r4
 8002c6a:	3558      	adds	r5, #88	; 0x58
 8002c6c:	882d      	ldrh	r5, [r5, #0]
 8002c6e:	428d      	cmp	r5, r1
 8002c70:	d9d9      	bls.n	8002c26 <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 8002c72:	0025      	movs	r5, r4
 8002c74:	355a      	adds	r5, #90	; 0x5a
 8002c76:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c78:	6801      	ldr	r1, [r0, #0]
 8002c7a:	2020      	movs	r0, #32
 8002c7c:	000d      	movs	r5, r1
 8002c7e:	4005      	ands	r5, r0
 8002c80:	9501      	str	r5, [sp, #4]
 8002c82:	4201      	tst	r1, r0
 8002c84:	d130      	bne.n	8002ce8 <HAL_UART_IRQHandler+0x1cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c86:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c8e:	6825      	ldr	r5, [r4, #0]
 8002c90:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_UART_IRQHandler+0x2c0>)
 8002c92:	6829      	ldr	r1, [r5, #0]
 8002c94:	4011      	ands	r1, r2
 8002c96:	6029      	str	r1, [r5, #0]
 8002c98:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c9c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca4:	6825      	ldr	r5, [r4, #0]
 8002ca6:	68a9      	ldr	r1, [r5, #8]
 8002ca8:	4399      	bics	r1, r3
 8002caa:	60a9      	str	r1, [r5, #8]
 8002cac:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb0:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cb8:	0021      	movs	r1, r4
 8002cba:	c980      	ldmia	r1!, {r7}
 8002cbc:	68bd      	ldr	r5, [r7, #8]
 8002cbe:	43b5      	bics	r5, r6
 8002cc0:	60bd      	str	r5, [r7, #8]
 8002cc2:	f38c 8810 	msr	PRIMASK, ip
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc6:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	67c8      	str	r0, [r1, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cca:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ccc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	6821      	ldr	r1, [r4, #0]
 8002cd8:	680b      	ldr	r3, [r1, #0]
 8002cda:	4393      	bics	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
 8002cde:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ce2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002ce4:	f7fe fc9a 	bl	800161c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ce8:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cea:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cec:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cee:	0023      	movs	r3, r4
 8002cf0:	3258      	adds	r2, #88	; 0x58
 8002cf2:	335a      	adds	r3, #90	; 0x5a
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	8811      	ldrh	r1, [r2, #0]
 8002cf8:	1ac9      	subs	r1, r1, r3
 8002cfa:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cfc:	0020      	movs	r0, r4
 8002cfe:	f7fe f9fd 	bl	80010fc <HAL_UARTEx_RxEventCallback>
 8002d02:	e790      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d04:	0025      	movs	r5, r4
 8002d06:	0021      	movs	r1, r4
 8002d08:	355a      	adds	r5, #90	; 0x5a
 8002d0a:	8828      	ldrh	r0, [r5, #0]
      if ((huart->RxXferCount > 0U)
 8002d0c:	882d      	ldrh	r5, [r5, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d0e:	3158      	adds	r1, #88	; 0x58
 8002d10:	8809      	ldrh	r1, [r1, #0]
 8002d12:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8002d14:	2d00      	cmp	r5, #0
 8002d16:	d100      	bne.n	8002d1a <HAL_UART_IRQHandler+0x1fe>
 8002d18:	e785      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d1a:	1a09      	subs	r1, r1, r0
 8002d1c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002d1e:	2900      	cmp	r1, #0
 8002d20:	d100      	bne.n	8002d24 <HAL_UART_IRQHandler+0x208>
 8002d22:	e780      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d24:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d28:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d2c:	6825      	ldr	r5, [r4, #0]
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	; (8002de0 <HAL_UART_IRQHandler+0x2c4>)
 8002d30:	6828      	ldr	r0, [r5, #0]
 8002d32:	4010      	ands	r0, r2
 8002d34:	6028      	str	r0, [r5, #0]
 8002d36:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d42:	0020      	movs	r0, r4
 8002d44:	c840      	ldmia	r0!, {r6}
 8002d46:	68b5      	ldr	r5, [r6, #8]
 8002d48:	439d      	bics	r5, r3
 8002d4a:	60b5      	str	r5, [r6, #8]
 8002d4c:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8002d50:	2520      	movs	r5, #32
 8002d52:	67c5      	str	r5, [r0, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d54:	6627      	str	r7, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8002d56:	66a7      	str	r7, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d58:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	3232      	adds	r2, #50	; 0x32
 8002d64:	6803      	ldr	r3, [r0, #0]
 8002d66:	32ff      	adds	r2, #255	; 0xff
 8002d68:	4393      	bics	r3, r2
 8002d6a:	6003      	str	r3, [r0, #0]
 8002d6c:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d70:	2302      	movs	r3, #2
 8002d72:	6663      	str	r3, [r4, #100]	; 0x64
 8002d74:	e7c2      	b.n	8002cfc <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	035b      	lsls	r3, r3, #13
 8002d7a:	4219      	tst	r1, r3
 8002d7c:	d006      	beq.n	8002d8c <HAL_UART_IRQHandler+0x270>
 8002d7e:	026d      	lsls	r5, r5, #9
 8002d80:	d504      	bpl.n	8002d8c <HAL_UART_IRQHandler+0x270>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d82:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002d84:	0020      	movs	r0, r4
 8002d86:	f000 fc93 	bl	80036b0 <HAL_UARTEx_WakeupCallback>
    return;
 8002d8a:	e74c      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	4219      	tst	r1, r3
 8002d90:	d003      	beq.n	8002d9a <HAL_UART_IRQHandler+0x27e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d92:	421e      	tst	r6, r3
 8002d94:	d001      	beq.n	8002d9a <HAL_UART_IRQHandler+0x27e>
    if (huart->TxISR != NULL)
 8002d96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002d98:	e6d1      	b.n	8002b3e <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	4211      	tst	r1, r2
 8002d9e:	d100      	bne.n	8002da2 <HAL_UART_IRQHandler+0x286>
 8002da0:	e741      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
 8002da2:	4216      	tst	r6, r2
 8002da4:	d100      	bne.n	8002da8 <HAL_UART_IRQHandler+0x28c>
 8002da6:	e73e      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	2301      	movs	r3, #1
 8002dae:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002db2:	6821      	ldr	r1, [r4, #0]
 8002db4:	680b      	ldr	r3, [r1, #0]
 8002db6:	4393      	bics	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
 8002dba:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002dc2:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dc4:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002dc6:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8002dc8:	f7fe f9c6 	bl	8001158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dcc:	e72b      	b.n	8002c26 <HAL_UART_IRQHandler+0x10a>
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	0000080f 	.word	0x0000080f
 8002dd4:	04000120 	.word	0x04000120
 8002dd8:	08002b07 	.word	0x08002b07
 8002ddc:	fffffeff 	.word	0xfffffeff
 8002de0:	fffffedf 	.word	0xfffffedf

08002de4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 8002de6:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002de8:	1d01      	adds	r1, r0, #4
 8002dea:	6fcc      	ldr	r4, [r1, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 8002dec:	335c      	adds	r3, #92	; 0x5c
 8002dee:	881a      	ldrh	r2, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002df0:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002df2:	2c22      	cmp	r4, #34	; 0x22
 8002df4:	d15a      	bne.n	8002eac <UART_RxISR_8BIT+0xc8>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002df8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002dfa:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8002dfc:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002dfe:	7023      	strb	r3, [r4, #0]
    huart->pRxBuffPtr++;
 8002e00:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002e02:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8002e04:	3301      	adds	r3, #1
 8002e06:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002e08:	8813      	ldrh	r3, [r2, #0]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8002e10:	8813      	ldrh	r3, [r2, #0]
 8002e12:	b29c      	uxth	r4, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d145      	bne.n	8002ea4 <UART_RxISR_8BIT+0xc0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e18:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e22:	6805      	ldr	r5, [r0, #0]
 8002e24:	4f24      	ldr	r7, [pc, #144]	; (8002eb8 <UART_RxISR_8BIT+0xd4>)
 8002e26:	682a      	ldr	r2, [r5, #0]
 8002e28:	403a      	ands	r2, r7
 8002e2a:	602a      	str	r2, [r5, #0]
 8002e2c:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e30:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e38:	6805      	ldr	r5, [r0, #0]
 8002e3a:	68aa      	ldr	r2, [r5, #8]
 8002e3c:	439a      	bics	r2, r3
 8002e3e:	60aa      	str	r2, [r5, #8]
 8002e40:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e44:	2220      	movs	r2, #32
 8002e46:	67ca      	str	r2, [r1, #124]	; 0x7c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e48:	6802      	ldr	r2, [r0, #0]
 8002e4a:	491c      	ldr	r1, [pc, #112]	; (8002ebc <UART_RxISR_8BIT+0xd8>)
      huart->RxISR = NULL;
 8002e4c:	6684      	str	r4, [r0, #104]	; 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e4e:	6644      	str	r4, [r0, #100]	; 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e50:	428a      	cmp	r2, r1
 8002e52:	d00d      	beq.n	8002e70 <UART_RxISR_8BIT+0x8c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e54:	6852      	ldr	r2, [r2, #4]
 8002e56:	0212      	lsls	r2, r2, #8
 8002e58:	d50a      	bpl.n	8002e70 <UART_RxISR_8BIT+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5e:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e62:	6802      	ldr	r2, [r0, #0]
 8002e64:	4c16      	ldr	r4, [pc, #88]	; (8002ec0 <UART_RxISR_8BIT+0xdc>)
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	4023      	ands	r3, r4
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e70:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d117      	bne.n	8002ea6 <UART_RxISR_8BIT+0xc2>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e76:	2200      	movs	r2, #0
 8002e78:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e7a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e82:	6801      	ldr	r1, [r0, #0]
 8002e84:	330f      	adds	r3, #15
 8002e86:	680a      	ldr	r2, [r1, #0]
 8002e88:	439a      	bics	r2, r3
 8002e8a:	600a      	str	r2, [r1, #0]
 8002e8c:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e90:	6802      	ldr	r2, [r0, #0]
 8002e92:	69d1      	ldr	r1, [r2, #28]
 8002e94:	4219      	tst	r1, r3
 8002e96:	d000      	beq.n	8002e9a <UART_RxISR_8BIT+0xb6>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e98:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	3358      	adds	r3, #88	; 0x58
 8002e9e:	8819      	ldrh	r1, [r3, #0]
 8002ea0:	f7fe f92c 	bl	80010fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8002ea6:	f7ff fdf9 	bl	8002a9c <HAL_UART_RxCpltCallback>
 8002eaa:	e7fb      	b.n	8002ea4 <UART_RxISR_8BIT+0xc0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002eac:	2208      	movs	r2, #8
 8002eae:	6999      	ldr	r1, [r3, #24]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	619a      	str	r2, [r3, #24]
}
 8002eb4:	e7f6      	b.n	8002ea4 <UART_RxISR_8BIT+0xc0>
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	fffffedf 	.word	0xfffffedf
 8002ebc:	40004800 	.word	0x40004800
 8002ec0:	fbffffff 	.word	0xfbffffff

08002ec4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002ec6:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ec8:	1d02      	adds	r2, r0, #4
 8002eca:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 8002ecc:	335c      	adds	r3, #92	; 0x5c
 8002ece:	881c      	ldrh	r4, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ed0:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ed2:	2922      	cmp	r1, #34	; 0x22
 8002ed4:	d159      	bne.n	8002f8a <UART_RxISR_16BIT+0xc6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ed6:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002ed8:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8002eda:	4021      	ands	r1, r4
 8002edc:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8002ede:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002ee4:	315a      	adds	r1, #90	; 0x5a
 8002ee6:	880b      	ldrh	r3, [r1, #0]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 8002eee:	880b      	ldrh	r3, [r1, #0]
 8002ef0:	b29c      	uxth	r4, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d145      	bne.n	8002f82 <UART_RxISR_16BIT+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efa:	3301      	adds	r3, #1
 8002efc:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f00:	6805      	ldr	r5, [r0, #0]
 8002f02:	4f24      	ldr	r7, [pc, #144]	; (8002f94 <UART_RxISR_16BIT+0xd0>)
 8002f04:	6829      	ldr	r1, [r5, #0]
 8002f06:	4039      	ands	r1, r7
 8002f08:	6029      	str	r1, [r5, #0]
 8002f0a:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f12:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f16:	6805      	ldr	r5, [r0, #0]
 8002f18:	68a9      	ldr	r1, [r5, #8]
 8002f1a:	4399      	bics	r1, r3
 8002f1c:	60a9      	str	r1, [r5, #8]
 8002f1e:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f22:	2120      	movs	r1, #32
 8002f24:	67d1      	str	r1, [r2, #124]	; 0x7c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f26:	6802      	ldr	r2, [r0, #0]
 8002f28:	491b      	ldr	r1, [pc, #108]	; (8002f98 <UART_RxISR_16BIT+0xd4>)
      huart->RxISR = NULL;
 8002f2a:	6684      	str	r4, [r0, #104]	; 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f2c:	6644      	str	r4, [r0, #100]	; 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f2e:	428a      	cmp	r2, r1
 8002f30:	d00d      	beq.n	8002f4e <UART_RxISR_16BIT+0x8a>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f32:	6852      	ldr	r2, [r2, #4]
 8002f34:	0212      	lsls	r2, r2, #8
 8002f36:	d50a      	bpl.n	8002f4e <UART_RxISR_16BIT+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f38:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3c:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f40:	6802      	ldr	r2, [r0, #0]
 8002f42:	4c16      	ldr	r4, [pc, #88]	; (8002f9c <UART_RxISR_16BIT+0xd8>)
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	4023      	ands	r3, r4
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d117      	bne.n	8002f84 <UART_RxISR_16BIT+0xc0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	2200      	movs	r2, #0
 8002f56:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f58:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5c:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f60:	6801      	ldr	r1, [r0, #0]
 8002f62:	330f      	adds	r3, #15
 8002f64:	680a      	ldr	r2, [r1, #0]
 8002f66:	439a      	bics	r2, r3
 8002f68:	600a      	str	r2, [r1, #0]
 8002f6a:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002f6e:	6802      	ldr	r2, [r0, #0]
 8002f70:	69d1      	ldr	r1, [r2, #28]
 8002f72:	4219      	tst	r1, r3
 8002f74:	d000      	beq.n	8002f78 <UART_RxISR_16BIT+0xb4>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f76:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f78:	0003      	movs	r3, r0
 8002f7a:	3358      	adds	r3, #88	; 0x58
 8002f7c:	8819      	ldrh	r1, [r3, #0]
 8002f7e:	f7fe f8bd 	bl	80010fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8002f84:	f7ff fd8a 	bl	8002a9c <HAL_UART_RxCpltCallback>
 8002f88:	e7fb      	b.n	8002f82 <UART_RxISR_16BIT+0xbe>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	6999      	ldr	r1, [r3, #24]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	619a      	str	r2, [r3, #24]
}
 8002f92:	e7f6      	b.n	8002f82 <UART_RxISR_16BIT+0xbe>
 8002f94:	fffffedf 	.word	0xfffffedf
 8002f98:	40004800 	.word	0x40004800
 8002f9c:	fbffffff 	.word	0xfbffffff

08002fa0 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	6802      	ldr	r2, [r0, #0]
 8002fa4:	6991      	ldr	r1, [r2, #24]
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	6193      	str	r3, [r2, #24]
}
 8002faa:	4770      	bx	lr

08002fac <UART_SetConfig>:
{
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb0:	6925      	ldr	r5, [r4, #16]
 8002fb2:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fb4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb6:	4329      	orrs	r1, r5
 8002fb8:	6965      	ldr	r5, [r4, #20]
 8002fba:	69c3      	ldr	r3, [r0, #28]
 8002fbc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fbe:	6810      	ldr	r0, [r2, #0]
 8002fc0:	4d69      	ldr	r5, [pc, #420]	; (8003168 <UART_SetConfig+0x1bc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc2:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc4:	4028      	ands	r0, r5
 8002fc6:	4301      	orrs	r1, r0
 8002fc8:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fca:	6851      	ldr	r1, [r2, #4]
 8002fcc:	4867      	ldr	r0, [pc, #412]	; (800316c <UART_SetConfig+0x1c0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fce:	4d68      	ldr	r5, [pc, #416]	; (8003170 <UART_SetConfig+0x1c4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd0:	4001      	ands	r1, r0
 8002fd2:	68e0      	ldr	r0, [r4, #12]
 8002fd4:	4301      	orrs	r1, r0
 8002fd6:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fda:	42aa      	cmp	r2, r5
 8002fdc:	d001      	beq.n	8002fe2 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002fde:	6a21      	ldr	r1, [r4, #32]
 8002fe0:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fe2:	6891      	ldr	r1, [r2, #8]
 8002fe4:	4e63      	ldr	r6, [pc, #396]	; (8003174 <UART_SetConfig+0x1c8>)
 8002fe6:	4031      	ands	r1, r6
 8002fe8:	4301      	orrs	r1, r0
 8002fea:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fec:	4962      	ldr	r1, [pc, #392]	; (8003178 <UART_SetConfig+0x1cc>)
 8002fee:	428a      	cmp	r2, r1
 8002ff0:	d113      	bne.n	800301a <UART_SetConfig+0x6e>
 8002ff2:	250c      	movs	r5, #12
 8002ff4:	4a61      	ldr	r2, [pc, #388]	; (800317c <UART_SetConfig+0x1d0>)
 8002ff6:	4862      	ldr	r0, [pc, #392]	; (8003180 <UART_SetConfig+0x1d4>)
 8002ff8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002ffa:	4029      	ands	r1, r5
 8002ffc:	5c40      	ldrb	r0, [r0, r1]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ffe:	2180      	movs	r1, #128	; 0x80
 8003000:	0209      	lsls	r1, r1, #8
 8003002:	428b      	cmp	r3, r1
 8003004:	d000      	beq.n	8003008 <UART_SetConfig+0x5c>
 8003006:	e07e      	b.n	8003106 <UART_SetConfig+0x15a>
    switch (clocksource)
 8003008:	2808      	cmp	r0, #8
 800300a:	d819      	bhi.n	8003040 <UART_SetConfig+0x94>
 800300c:	f7fd f886 	bl	800011c <__gnu_thumb1_case_uqi>
 8003010:	18595651 	.word	0x18595651
 8003014:	18181878 	.word	0x18181878
 8003018:	63          	.byte	0x63
 8003019:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301a:	42aa      	cmp	r2, r5
 800301c:	d000      	beq.n	8003020 <UART_SetConfig+0x74>
 800301e:	e09c      	b.n	800315a <UART_SetConfig+0x1ae>
 8003020:	21c0      	movs	r1, #192	; 0xc0
 8003022:	2080      	movs	r0, #128	; 0x80
 8003024:	4a55      	ldr	r2, [pc, #340]	; (800317c <UART_SetConfig+0x1d0>)
 8003026:	0109      	lsls	r1, r1, #4
 8003028:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800302a:	0100      	lsls	r0, r0, #4
 800302c:	400b      	ands	r3, r1
 800302e:	4283      	cmp	r3, r0
 8003030:	d016      	beq.n	8003060 <UART_SetConfig+0xb4>
 8003032:	d807      	bhi.n	8003044 <UART_SetConfig+0x98>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <UART_SetConfig+0xa2>
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	00d2      	lsls	r2, r2, #3
 800303c:	4293      	cmp	r3, r2
 800303e:	d035      	beq.n	80030ac <UART_SetConfig+0x100>
    switch (clocksource)
 8003040:	2001      	movs	r0, #1
 8003042:	e009      	b.n	8003058 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003044:	428b      	cmp	r3, r1
 8003046:	d1fb      	bne.n	8003040 <UART_SetConfig+0x94>
 8003048:	2080      	movs	r0, #128	; 0x80
 800304a:	0200      	lsls	r0, r0, #8
 800304c:	e012      	b.n	8003074 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800304e:	f7fe ff8d 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003052:	2800      	cmp	r0, #0
 8003054:	d10e      	bne.n	8003074 <UART_SetConfig+0xc8>
 8003056:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800305c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003060:	2310      	movs	r3, #16
 8003062:	6810      	ldr	r0, [r2, #0]
 8003064:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003066:	4243      	negs	r3, r0
 8003068:	4158      	adcs	r0, r3
 800306a:	4b46      	ldr	r3, [pc, #280]	; (8003184 <UART_SetConfig+0x1d8>)
 800306c:	4240      	negs	r0, r0
 800306e:	4018      	ands	r0, r3
 8003070:	4b45      	ldr	r3, [pc, #276]	; (8003188 <UART_SetConfig+0x1dc>)
 8003072:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003074:	2203      	movs	r2, #3
 8003076:	6863      	ldr	r3, [r4, #4]
 8003078:	435a      	muls	r2, r3
 800307a:	4282      	cmp	r2, r0
 800307c:	d8e0      	bhi.n	8003040 <UART_SetConfig+0x94>
          (pclk > (4096U * huart->Init.BaudRate)))
 800307e:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003080:	4282      	cmp	r2, r0
 8003082:	d3dd      	bcc.n	8003040 <UART_SetConfig+0x94>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003084:	2700      	movs	r7, #0
 8003086:	0e02      	lsrs	r2, r0, #24
 8003088:	0201      	lsls	r1, r0, #8
 800308a:	085e      	lsrs	r6, r3, #1
 800308c:	1989      	adds	r1, r1, r6
 800308e:	417a      	adcs	r2, r7
 8003090:	0008      	movs	r0, r1
 8003092:	0011      	movs	r1, r2
 8003094:	001a      	movs	r2, r3
 8003096:	003b      	movs	r3, r7
 8003098:	f7fd f8d6 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <UART_SetConfig+0x1e0>)
 800309e:	18c2      	adds	r2, r0, r3
 80030a0:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <UART_SetConfig+0x1e4>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d8cc      	bhi.n	8003040 <UART_SetConfig+0x94>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	60d8      	str	r0, [r3, #12]
 80030aa:	e7d4      	b.n	8003056 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 80030ac:	f7fe fbfa 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
        break;
 80030b0:	e7cf      	b.n	8003052 <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b2:	f7fe ff5b 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80030b6:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80030b8:	d0cd      	beq.n	8003056 <UART_SetConfig+0xaa>
 80030ba:	e00c      	b.n	80030d6 <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80030bc:	f7fe ff66 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 80030c0:	e7f9      	b.n	80030b6 <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c2:	6813      	ldr	r3, [r2, #0]
 80030c4:	2210      	movs	r2, #16
 80030c6:	4013      	ands	r3, r2
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030c8:	425a      	negs	r2, r3
 80030ca:	4153      	adcs	r3, r2
 80030cc:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <UART_SetConfig+0x1d8>)
 80030ce:	425b      	negs	r3, r3
 80030d0:	4013      	ands	r3, r2
 80030d2:	4a2d      	ldr	r2, [pc, #180]	; (8003188 <UART_SetConfig+0x1dc>)
 80030d4:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030d6:	6861      	ldr	r1, [r4, #4]
 80030d8:	0058      	lsls	r0, r3, #1
 80030da:	084b      	lsrs	r3, r1, #1
 80030dc:	18c0      	adds	r0, r0, r3
 80030de:	f7fd f827 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e2:	0002      	movs	r2, r0
 80030e4:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <UART_SetConfig+0x1e8>)
 80030e6:	3a10      	subs	r2, #16
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d8a9      	bhi.n	8003040 <UART_SetConfig+0x94>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ec:	230f      	movs	r3, #15
 80030ee:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030f0:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030f2:	439a      	bics	r2, r3
 80030f4:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030f6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	4303      	orrs	r3, r0
 80030fc:	60d3      	str	r3, [r2, #12]
 80030fe:	e7aa      	b.n	8003056 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8003100:	f7fe fbd0 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8003104:	e7d7      	b.n	80030b6 <UART_SetConfig+0x10a>
    switch (clocksource)
 8003106:	2808      	cmp	r0, #8
 8003108:	d89a      	bhi.n	8003040 <UART_SetConfig+0x94>
 800310a:	f7fc fffd 	bl	8000108 <__gnu_thumb1_case_sqi>
 800310e:	0a05      	.short	0x0a05
 8003110:	9920990d 	.word	0x9920990d
 8003114:	9999      	.short	0x9999
 8003116:	23          	.byte	0x23
 8003117:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7fe ff28 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800311c:	2800      	cmp	r0, #0
 800311e:	d09a      	beq.n	8003056 <UART_SetConfig+0xaa>
 8003120:	e00c      	b.n	800313c <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003122:	f7fe ff33 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
        break;
 8003126:	e7f9      	b.n	800311c <UART_SetConfig+0x170>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003128:	2310      	movs	r3, #16
 800312a:	6810      	ldr	r0, [r2, #0]
 800312c:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800312e:	4243      	negs	r3, r0
 8003130:	4158      	adcs	r0, r3
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <UART_SetConfig+0x1d8>)
 8003134:	4240      	negs	r0, r0
 8003136:	4018      	ands	r0, r3
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <UART_SetConfig+0x1dc>)
 800313a:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800313c:	6861      	ldr	r1, [r4, #4]
 800313e:	084b      	lsrs	r3, r1, #1
 8003140:	1818      	adds	r0, r3, r0
 8003142:	f7fc fff5 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003146:	0002      	movs	r2, r0
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <UART_SetConfig+0x1e8>)
 800314a:	3a10      	subs	r2, #16
 800314c:	e7a9      	b.n	80030a2 <UART_SetConfig+0xf6>
        pclk = HAL_RCC_GetSysClockFreq();
 800314e:	f7fe fba9 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
        break;
 8003152:	e7e3      	b.n	800311c <UART_SetConfig+0x170>
    switch (clocksource)
 8003154:	2080      	movs	r0, #128	; 0x80
 8003156:	0200      	lsls	r0, r0, #8
 8003158:	e7f0      	b.n	800313c <UART_SetConfig+0x190>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	2001      	movs	r0, #1
 800315e:	0212      	lsls	r2, r2, #8
 8003160:	4293      	cmp	r3, r2
 8003162:	d100      	bne.n	8003166 <UART_SetConfig+0x1ba>
 8003164:	e778      	b.n	8003058 <UART_SetConfig+0xac>
 8003166:	e76b      	b.n	8003040 <UART_SetConfig+0x94>
 8003168:	efff69f3 	.word	0xefff69f3
 800316c:	ffffcfff 	.word	0xffffcfff
 8003170:	40004800 	.word	0x40004800
 8003174:	fffff4ff 	.word	0xfffff4ff
 8003178:	40004400 	.word	0x40004400
 800317c:	40021000 	.word	0x40021000
 8003180:	080037d5 	.word	0x080037d5
 8003184:	00b71b00 	.word	0x00b71b00
 8003188:	003d0900 	.word	0x003d0900
 800318c:	fffffd00 	.word	0xfffffd00
 8003190:	000ffcff 	.word	0x000ffcff
 8003194:	0000ffef 	.word	0x0000ffef

08003198 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003198:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800319a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800319c:	07da      	lsls	r2, r3, #31
 800319e:	d506      	bpl.n	80031ae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031a0:	6801      	ldr	r1, [r0, #0]
 80031a2:	4c28      	ldr	r4, [pc, #160]	; (8003244 <UART_AdvFeatureConfig+0xac>)
 80031a4:	684a      	ldr	r2, [r1, #4]
 80031a6:	4022      	ands	r2, r4
 80031a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80031aa:	4322      	orrs	r2, r4
 80031ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ae:	079a      	lsls	r2, r3, #30
 80031b0:	d506      	bpl.n	80031c0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031b2:	6801      	ldr	r1, [r0, #0]
 80031b4:	4c24      	ldr	r4, [pc, #144]	; (8003248 <UART_AdvFeatureConfig+0xb0>)
 80031b6:	684a      	ldr	r2, [r1, #4]
 80031b8:	4022      	ands	r2, r4
 80031ba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80031bc:	4322      	orrs	r2, r4
 80031be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c0:	075a      	lsls	r2, r3, #29
 80031c2:	d506      	bpl.n	80031d2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031c4:	6801      	ldr	r1, [r0, #0]
 80031c6:	4c21      	ldr	r4, [pc, #132]	; (800324c <UART_AdvFeatureConfig+0xb4>)
 80031c8:	684a      	ldr	r2, [r1, #4]
 80031ca:	4022      	ands	r2, r4
 80031cc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80031ce:	4322      	orrs	r2, r4
 80031d0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031d2:	071a      	lsls	r2, r3, #28
 80031d4:	d506      	bpl.n	80031e4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031d6:	6801      	ldr	r1, [r0, #0]
 80031d8:	4c1d      	ldr	r4, [pc, #116]	; (8003250 <UART_AdvFeatureConfig+0xb8>)
 80031da:	684a      	ldr	r2, [r1, #4]
 80031dc:	4022      	ands	r2, r4
 80031de:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80031e0:	4322      	orrs	r2, r4
 80031e2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031e4:	06da      	lsls	r2, r3, #27
 80031e6:	d506      	bpl.n	80031f6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031e8:	6801      	ldr	r1, [r0, #0]
 80031ea:	4c1a      	ldr	r4, [pc, #104]	; (8003254 <UART_AdvFeatureConfig+0xbc>)
 80031ec:	688a      	ldr	r2, [r1, #8]
 80031ee:	4022      	ands	r2, r4
 80031f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80031f2:	4322      	orrs	r2, r4
 80031f4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031f6:	069a      	lsls	r2, r3, #26
 80031f8:	d506      	bpl.n	8003208 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031fa:	6801      	ldr	r1, [r0, #0]
 80031fc:	4c16      	ldr	r4, [pc, #88]	; (8003258 <UART_AdvFeatureConfig+0xc0>)
 80031fe:	688a      	ldr	r2, [r1, #8]
 8003200:	4022      	ands	r2, r4
 8003202:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003204:	4322      	orrs	r2, r4
 8003206:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003208:	065a      	lsls	r2, r3, #25
 800320a:	d510      	bpl.n	800322e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800320c:	6801      	ldr	r1, [r0, #0]
 800320e:	4d13      	ldr	r5, [pc, #76]	; (800325c <UART_AdvFeatureConfig+0xc4>)
 8003210:	684a      	ldr	r2, [r1, #4]
 8003212:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003214:	402a      	ands	r2, r5
 8003216:	4322      	orrs	r2, r4
 8003218:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800321a:	2280      	movs	r2, #128	; 0x80
 800321c:	0352      	lsls	r2, r2, #13
 800321e:	4294      	cmp	r4, r2
 8003220:	d105      	bne.n	800322e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003222:	684a      	ldr	r2, [r1, #4]
 8003224:	4c0e      	ldr	r4, [pc, #56]	; (8003260 <UART_AdvFeatureConfig+0xc8>)
 8003226:	4022      	ands	r2, r4
 8003228:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800322a:	4322      	orrs	r2, r4
 800322c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	d506      	bpl.n	8003240 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003232:	6802      	ldr	r2, [r0, #0]
 8003234:	490b      	ldr	r1, [pc, #44]	; (8003264 <UART_AdvFeatureConfig+0xcc>)
 8003236:	6853      	ldr	r3, [r2, #4]
 8003238:	400b      	ands	r3, r1
 800323a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800323c:	430b      	orrs	r3, r1
 800323e:	6053      	str	r3, [r2, #4]
}
 8003240:	bd30      	pop	{r4, r5, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	fffdffff 	.word	0xfffdffff
 8003248:	fffeffff 	.word	0xfffeffff
 800324c:	fffbffff 	.word	0xfffbffff
 8003250:	ffff7fff 	.word	0xffff7fff
 8003254:	ffffefff 	.word	0xffffefff
 8003258:	ffffdfff 	.word	0xffffdfff
 800325c:	ffefffff 	.word	0xffefffff
 8003260:	ff9fffff 	.word	0xff9fffff
 8003264:	fff7ffff 	.word	0xfff7ffff

08003268 <UART_WaitOnFlagUntilTimeout>:
{
 8003268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800326a:	0004      	movs	r4, r0
 800326c:	000d      	movs	r5, r1
 800326e:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003270:	2608      	movs	r6, #8
{
 8003272:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003274:	6822      	ldr	r2, [r4, #0]
 8003276:	69d3      	ldr	r3, [r2, #28]
 8003278:	402b      	ands	r3, r5
 800327a:	1b5b      	subs	r3, r3, r5
 800327c:	4259      	negs	r1, r3
 800327e:	414b      	adcs	r3, r1
 8003280:	42bb      	cmp	r3, r7
 8003282:	d001      	beq.n	8003288 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8003284:	2000      	movs	r0, #0
 8003286:	e021      	b.n	80032cc <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8003288:	9b08      	ldr	r3, [sp, #32]
 800328a:	3301      	adds	r3, #1
 800328c:	d0f3      	beq.n	8003276 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328e:	f7fe f8d9 	bl	8001444 <HAL_GetTick>
 8003292:	9b00      	ldr	r3, [sp, #0]
 8003294:	1ac0      	subs	r0, r0, r3
 8003296:	9b08      	ldr	r3, [sp, #32]
 8003298:	4298      	cmp	r0, r3
 800329a:	d828      	bhi.n	80032ee <UART_WaitOnFlagUntilTimeout+0x86>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d026      	beq.n	80032ee <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032a0:	2104      	movs	r1, #4
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	420a      	tst	r2, r1
 80032a8:	d0e4      	beq.n	8003274 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	0011      	movs	r1, r2
 80032ae:	4031      	ands	r1, r6
 80032b0:	9101      	str	r1, [sp, #4]
 80032b2:	4232      	tst	r2, r6
 80032b4:	d00b      	beq.n	80032ce <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 80032b6:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032b8:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 80032ba:	f7ff fb43 	bl	8002944 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032be:	0023      	movs	r3, r4
 80032c0:	3308      	adds	r3, #8
 80032c2:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 80032c4:	2300      	movs	r3, #0
           return HAL_ERROR;
 80032c6:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80032c8:	3478      	adds	r4, #120	; 0x78
 80032ca:	7023      	strb	r3, [r4, #0]
}
 80032cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	69d9      	ldr	r1, [r3, #28]
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	4211      	tst	r1, r2
 80032d6:	d0cd      	beq.n	8003274 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032d8:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80032da:	0020      	movs	r0, r4
 80032dc:	f7ff fb32 	bl	8002944 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032e0:	0023      	movs	r3, r4
 80032e2:	2220      	movs	r2, #32
 80032e4:	3308      	adds	r3, #8
 80032e6:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80032e8:	9b01      	ldr	r3, [sp, #4]
 80032ea:	3478      	adds	r4, #120	; 0x78
 80032ec:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80032ee:	2003      	movs	r0, #3
 80032f0:	e7ec      	b.n	80032cc <UART_WaitOnFlagUntilTimeout+0x64>
	...

080032f4 <HAL_UART_Receive>:
{
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	0017      	movs	r7, r2
 80032f8:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 80032fa:	1d02      	adds	r2, r0, #4
{
 80032fc:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 80032fe:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 8003300:	0004      	movs	r4, r0
 8003302:	000e      	movs	r6, r1
    return HAL_BUSY;
 8003304:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003306:	2b20      	cmp	r3, #32
 8003308:	d160      	bne.n	80033cc <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 800330a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800330c:	2900      	cmp	r1, #0
 800330e:	d05d      	beq.n	80033cc <HAL_UART_Receive+0xd8>
 8003310:	2f00      	cmp	r7, #0
 8003312:	d05b      	beq.n	80033cc <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	68a1      	ldr	r1, [r4, #8]
 8003318:	015b      	lsls	r3, r3, #5
 800331a:	4299      	cmp	r1, r3
 800331c:	d104      	bne.n	8003328 <HAL_UART_Receive+0x34>
 800331e:	6923      	ldr	r3, [r4, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003324:	4206      	tst	r6, r0
 8003326:	d151      	bne.n	80033cc <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	0023      	movs	r3, r4
 800332a:	2500      	movs	r5, #0
 800332c:	3308      	adds	r3, #8
 800332e:	67dd      	str	r5, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003330:	2322      	movs	r3, #34	; 0x22
 8003332:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003334:	6625      	str	r5, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 8003336:	f7fe f885 	bl	8001444 <HAL_GetTick>
    huart->RxXferSize  = Size;
 800333a:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 800333c:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 800333e:	3358      	adds	r3, #88	; 0x58
 8003340:	801f      	strh	r7, [r3, #0]
    huart->RxXferCount = Size;
 8003342:	3302      	adds	r3, #2
 8003344:	9303      	str	r3, [sp, #12]
 8003346:	801f      	strh	r7, [r3, #0]
    UART_MASK_COMPUTATION(huart);
 8003348:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800334a:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 800334c:	0152      	lsls	r2, r2, #5
 800334e:	4293      	cmp	r3, r2
 8003350:	d11c      	bne.n	800338c <HAL_UART_Receive+0x98>
 8003352:	6925      	ldr	r5, [r4, #16]
 8003354:	1e69      	subs	r1, r5, #1
 8003356:	418d      	sbcs	r5, r1
 8003358:	21ff      	movs	r1, #255	; 0xff
 800335a:	426d      	negs	r5, r5
 800335c:	438d      	bics	r5, r1
 800335e:	4925      	ldr	r1, [pc, #148]	; (80033f4 <HAL_UART_Receive+0x100>)
 8003360:	186d      	adds	r5, r5, r1
 8003362:	0021      	movs	r1, r4
 8003364:	315c      	adds	r1, #92	; 0x5c
      pdata16bits = NULL;
 8003366:	2700      	movs	r7, #0
    UART_MASK_COMPUTATION(huart);
 8003368:	800d      	strh	r5, [r1, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336a:	4293      	cmp	r3, r2
 800336c:	d104      	bne.n	8003378 <HAL_UART_Receive+0x84>
 800336e:	6923      	ldr	r3, [r4, #16]
 8003370:	42bb      	cmp	r3, r7
 8003372:	d101      	bne.n	8003378 <HAL_UART_Receive+0x84>
 8003374:	0037      	movs	r7, r6
      pdata8bits  = NULL;
 8003376:	001e      	movs	r6, r3
    while (huart->RxXferCount > 0U)
 8003378:	0023      	movs	r3, r4
 800337a:	335a      	adds	r3, #90	; 0x5a
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b298      	uxth	r0, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d115      	bne.n	80033b0 <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8003384:	3404      	adds	r4, #4
 8003386:	3320      	adds	r3, #32
 8003388:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 800338a:	e01f      	b.n	80033cc <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <HAL_UART_Receive+0xa8>
 8003390:	6921      	ldr	r1, [r4, #16]
 8003392:	257f      	movs	r5, #127	; 0x7f
 8003394:	2900      	cmp	r1, #0
 8003396:	d1e4      	bne.n	8003362 <HAL_UART_Receive+0x6e>
 8003398:	3580      	adds	r5, #128	; 0x80
 800339a:	e7e2      	b.n	8003362 <HAL_UART_Receive+0x6e>
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	0549      	lsls	r1, r1, #21
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d1de      	bne.n	8003362 <HAL_UART_Receive+0x6e>
 80033a4:	6921      	ldr	r1, [r4, #16]
 80033a6:	257f      	movs	r5, #127	; 0x7f
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d0da      	beq.n	8003362 <HAL_UART_Receive+0x6e>
 80033ac:	3d40      	subs	r5, #64	; 0x40
 80033ae:	e7d8      	b.n	8003362 <HAL_UART_Receive+0x6e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033b0:	9b05      	ldr	r3, [sp, #20]
 80033b2:	2200      	movs	r2, #0
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	2120      	movs	r1, #32
 80033b8:	0020      	movs	r0, r4
 80033ba:	9b04      	ldr	r3, [sp, #16]
 80033bc:	f7ff ff54 	bl	8003268 <UART_WaitOnFlagUntilTimeout>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 80033c4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80033c6:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80033c8:	3404      	adds	r4, #4
 80033ca:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80033cc:	b007      	add	sp, #28
 80033ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 80033d6:	2e00      	cmp	r6, #0
 80033d8:	d108      	bne.n	80033ec <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033da:	803b      	strh	r3, [r7, #0]
        pdata16bits++;
 80033dc:	3702      	adds	r7, #2
      huart->RxXferCount--;
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	9a03      	ldr	r2, [sp, #12]
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]
 80033ea:	e7c5      	b.n	8003378 <HAL_UART_Receive+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033ec:	7033      	strb	r3, [r6, #0]
        pdata8bits++;
 80033ee:	3601      	adds	r6, #1
 80033f0:	e7f5      	b.n	80033de <HAL_UART_Receive+0xea>
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	000001ff 	.word	0x000001ff

080033f8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f8:	0003      	movs	r3, r0
{
 80033fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	2500      	movs	r5, #0
{
 80033fe:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	3308      	adds	r3, #8
 8003402:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003404:	f7fe f81e 	bl	8001444 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003408:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800340a:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	071b      	lsls	r3, r3, #28
 8003410:	d51d      	bpl.n	800344e <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <UART_CheckIdleState+0xb8>)
 8003416:	002a      	movs	r2, r5
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	0389      	lsls	r1, r1, #14
 800341c:	0003      	movs	r3, r0
 800341e:	0020      	movs	r0, r4
 8003420:	f7ff ff22 	bl	8003268 <UART_WaitOnFlagUntilTimeout>
 8003424:	42a8      	cmp	r0, r5
 8003426:	d012      	beq.n	800344e <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003428:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	2301      	movs	r3, #1
 800342e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003432:	2080      	movs	r0, #128	; 0x80
 8003434:	6822      	ldr	r2, [r4, #0]
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	4383      	bics	r3, r0
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003440:	2320      	movs	r3, #32
 8003442:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003444:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8003446:	2300      	movs	r3, #0
 8003448:	3478      	adds	r4, #120	; 0x78
 800344a:	7023      	strb	r3, [r4, #0]
}
 800344c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800344e:	0025      	movs	r5, r4
 8003450:	cd08      	ldmia	r5!, {r3}
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	075b      	lsls	r3, r3, #29
 8003456:	d523      	bpl.n	80034a0 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <UART_CheckIdleState+0xb8>)
 800345c:	2200      	movs	r2, #0
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	0020      	movs	r0, r4
 8003462:	0033      	movs	r3, r6
 8003464:	03c9      	lsls	r1, r1, #15
 8003466:	f7ff feff 	bl	8003268 <UART_WaitOnFlagUntilTimeout>
 800346a:	2800      	cmp	r0, #0
 800346c:	d018      	beq.n	80034a0 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003472:	2201      	movs	r2, #1
 8003474:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003478:	6821      	ldr	r1, [r4, #0]
 800347a:	4e0e      	ldr	r6, [pc, #56]	; (80034b4 <UART_CheckIdleState+0xbc>)
 800347c:	680b      	ldr	r3, [r1, #0]
 800347e:	4033      	ands	r3, r6
 8003480:	600b      	str	r3, [r1, #0]
 8003482:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003486:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348e:	6821      	ldr	r1, [r4, #0]
 8003490:	688b      	ldr	r3, [r1, #8]
 8003492:	4393      	bics	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
 8003496:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800349a:	2320      	movs	r3, #32
 800349c:	67eb      	str	r3, [r5, #124]	; 0x7c
 800349e:	e7d1      	b.n	8003444 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 80034a0:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80034a4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034a6:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a8:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034aa:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 80034ac:	e7cb      	b.n	8003446 <UART_CheckIdleState+0x4e>
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	01ffffff 	.word	0x01ffffff
 80034b4:	fffffedf 	.word	0xfffffedf

080034b8 <HAL_UART_Init>:
{
 80034b8:	b510      	push	{r4, lr}
 80034ba:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80034be:	2001      	movs	r0, #1
}
 80034c0:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80034c8:	0002      	movs	r2, r0
 80034ca:	3278      	adds	r2, #120	; 0x78
 80034cc:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80034ce:	f7fd febf 	bl	8001250 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80034d2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80034d4:	2101      	movs	r1, #1
 80034d6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80034d8:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80034da:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034dc:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80034de:	438b      	bics	r3, r1
 80034e0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034e2:	f7ff fd63 	bl	8002fac <UART_SetConfig>
 80034e6:	2801      	cmp	r0, #1
 80034e8:	d0e9      	beq.n	80034be <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80034f0:	0020      	movs	r0, r4
 80034f2:	f7ff fe51 	bl	8003198 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	4907      	ldr	r1, [pc, #28]	; (8003518 <HAL_UART_Init+0x60>)
 80034fa:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80034fc:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fe:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003500:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	438a      	bics	r2, r1
 8003508:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800350a:	2201      	movs	r2, #1
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003512:	f7ff ff71 	bl	80033f8 <UART_CheckIdleState>
 8003516:	e7d3      	b.n	80034c0 <HAL_UART_Init+0x8>
 8003518:	ffffb7ff 	.word	0xffffb7ff

0800351c <HAL_MultiProcessor_Init>:
{
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	0004      	movs	r4, r0
 8003520:	000e      	movs	r6, r1
 8003522:	0015      	movs	r5, r2
  if (huart == NULL)
 8003524:	2800      	cmp	r0, #0
 8003526:	d101      	bne.n	800352c <HAL_MultiProcessor_Init+0x10>
    return HAL_ERROR;
 8003528:	2001      	movs	r0, #1
}
 800352a:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800352c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <HAL_MultiProcessor_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8003532:	0002      	movs	r2, r0
 8003534:	3278      	adds	r2, #120	; 0x78
 8003536:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003538:	f7fd fe8a 	bl	8001250 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800353c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800353e:	2101      	movs	r1, #1
 8003540:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003542:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8003544:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003546:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003548:	438b      	bics	r3, r1
 800354a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800354c:	f7ff fd2e 	bl	8002fac <UART_SetConfig>
 8003550:	2801      	cmp	r0, #1
 8003552:	d0e9      	beq.n	8003528 <HAL_MultiProcessor_Init+0xc>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_MultiProcessor_Init+0x44>
    UART_AdvFeatureConfig(huart);
 800355a:	0020      	movs	r0, r4
 800355c:	f7ff fe1c 	bl	8003198 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	490f      	ldr	r1, [pc, #60]	; (80035a0 <HAL_MultiProcessor_Init+0x84>)
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003568:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800356a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	438a      	bics	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	4295      	cmp	r5, r2
 8003578:	d105      	bne.n	8003586 <HAL_MultiProcessor_Init+0x6a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	0636      	lsls	r6, r6, #24
 800357e:	0209      	lsls	r1, r1, #8
 8003580:	0a09      	lsrs	r1, r1, #8
 8003582:	4331      	orrs	r1, r6
 8003584:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4906      	ldr	r1, [pc, #24]	; (80035a4 <HAL_MultiProcessor_Init+0x88>)
  return (UART_CheckIdleState(huart));
 800358a:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800358c:	400a      	ands	r2, r1
 800358e:	432a      	orrs	r2, r5
 8003590:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8003592:	2201      	movs	r2, #1
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800359a:	f7ff ff2d 	bl	80033f8 <UART_CheckIdleState>
 800359e:	e7c4      	b.n	800352a <HAL_MultiProcessor_Init+0xe>
 80035a0:	ffffb7ff 	.word	0xffffb7ff
 80035a4:	fffff7ff 	.word	0xfffff7ff

080035a8 <HAL_MultiProcessor_EnableMuteMode>:
  __HAL_LOCK(huart);
 80035a8:	0001      	movs	r1, r0
{
 80035aa:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 80035ac:	3178      	adds	r1, #120	; 0x78
 80035ae:	780a      	ldrb	r2, [r1, #0]
{
 80035b0:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80035b2:	2002      	movs	r0, #2
 80035b4:	2a01      	cmp	r2, #1
 80035b6:	d014      	beq.n	80035e2 <HAL_MultiProcessor_EnableMuteMode+0x3a>
 80035b8:	2201      	movs	r2, #1
 80035ba:	700a      	strb	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80035bc:	2124      	movs	r1, #36	; 0x24
 80035be:	67d9      	str	r1, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	0192      	lsls	r2, r2, #6
 80035ce:	680c      	ldr	r4, [r1, #0]
 80035d0:	4322      	orrs	r2, r4
 80035d2:	600a      	str	r2, [r1, #0]
 80035d4:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 80035d8:	2220      	movs	r2, #32
  return (UART_CheckIdleState(huart));
 80035da:	0018      	movs	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80035dc:	67da      	str	r2, [r3, #124]	; 0x7c
  return (UART_CheckIdleState(huart));
 80035de:	f7ff ff0b 	bl	80033f8 <UART_CheckIdleState>
}
 80035e2:	bd10      	pop	{r4, pc}

080035e4 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80035e4:	0003      	movs	r3, r0
 80035e6:	3358      	adds	r3, #88	; 0x58
{
 80035e8:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80035ea:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 80035ec:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80035ee:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 80035f0:	2180      	movs	r1, #128	; 0x80
  huart->RxISR       = NULL;
 80035f2:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 80035f4:	6882      	ldr	r2, [r0, #8]
  huart->RxISR       = NULL;
 80035f6:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 80035f8:	0149      	lsls	r1, r1, #5
 80035fa:	428a      	cmp	r2, r1
 80035fc:	d138      	bne.n	8003670 <UART_Start_Receive_IT+0x8c>
 80035fe:	6903      	ldr	r3, [r0, #16]
 8003600:	1e5a      	subs	r2, r3, #1
 8003602:	4193      	sbcs	r3, r2
 8003604:	22ff      	movs	r2, #255	; 0xff
 8003606:	425b      	negs	r3, r3
 8003608:	4393      	bics	r3, r2
 800360a:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <UART_Start_Receive_IT+0xc0>)
 800360c:	189b      	adds	r3, r3, r2
 800360e:	0002      	movs	r2, r0
 8003610:	325c      	adds	r2, #92	; 0x5c
 8003612:	8013      	strh	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	0003      	movs	r3, r0
 8003616:	2200      	movs	r2, #0
 8003618:	3308      	adds	r3, #8
 800361a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800361c:	1d03      	adds	r3, r0, #4
 800361e:	3222      	adds	r2, #34	; 0x22
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003626:	2301      	movs	r3, #1
 8003628:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362c:	6802      	ldr	r2, [r0, #0]
 800362e:	6894      	ldr	r4, [r2, #8]
 8003630:	4323      	orrs	r3, r4
 8003632:	6093      	str	r3, [r2, #8]
 8003634:	f381 8810 	msr	PRIMASK, r1
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	6884      	ldr	r4, [r0, #8]
 800363c:	6902      	ldr	r2, [r0, #16]
    huart->RxISR = UART_RxISR_8BIT;
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <UART_Start_Receive_IT+0xc4>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003640:	0149      	lsls	r1, r1, #5
 8003642:	428c      	cmp	r4, r1
 8003644:	d102      	bne.n	800364c <UART_Start_Receive_IT+0x68>
 8003646:	2a00      	cmp	r2, #0
 8003648:	d100      	bne.n	800364c <UART_Start_Receive_IT+0x68>
    huart->RxISR = UART_RxISR_16BIT;
 800364a:	4b18      	ldr	r3, [pc, #96]	; (80036ac <UART_Start_Receive_IT+0xc8>)
 800364c:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 800364e:	2301      	movs	r3, #1
 8003650:	2a00      	cmp	r2, #0
 8003652:	d01f      	beq.n	8003694 <UART_Start_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003654:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003658:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800365c:	6802      	ldr	r2, [r0, #0]
 800365e:	3320      	adds	r3, #32
 8003660:	6810      	ldr	r0, [r2, #0]
 8003662:	33ff      	adds	r3, #255	; 0xff
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003664:	4303      	orrs	r3, r0
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	f381 8810 	msr	PRIMASK, r1
}
 800366c:	2000      	movs	r0, #0
 800366e:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8003670:	2a00      	cmp	r2, #0
 8003672:	d105      	bne.n	8003680 <UART_Start_Receive_IT+0x9c>
 8003674:	6902      	ldr	r2, [r0, #16]
 8003676:	237f      	movs	r3, #127	; 0x7f
 8003678:	2a00      	cmp	r2, #0
 800367a:	d1c8      	bne.n	800360e <UART_Start_Receive_IT+0x2a>
 800367c:	3380      	adds	r3, #128	; 0x80
 800367e:	e7c6      	b.n	800360e <UART_Start_Receive_IT+0x2a>
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	0549      	lsls	r1, r1, #21
 8003684:	428a      	cmp	r2, r1
 8003686:	d1c2      	bne.n	800360e <UART_Start_Receive_IT+0x2a>
 8003688:	6902      	ldr	r2, [r0, #16]
 800368a:	237f      	movs	r3, #127	; 0x7f
 800368c:	2a00      	cmp	r2, #0
 800368e:	d0be      	beq.n	800360e <UART_Start_Receive_IT+0x2a>
 8003690:	3b40      	subs	r3, #64	; 0x40
 8003692:	e7bc      	b.n	800360e <UART_Start_Receive_IT+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003694:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003698:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800369c:	6802      	ldr	r2, [r0, #0]
 800369e:	2320      	movs	r3, #32
 80036a0:	6810      	ldr	r0, [r2, #0]
 80036a2:	e7df      	b.n	8003664 <UART_Start_Receive_IT+0x80>
 80036a4:	000001ff 	.word	0x000001ff
 80036a8:	08002de5 	.word	0x08002de5
 80036ac:	08002ec5 	.word	0x08002ec5

080036b0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036b0:	4770      	bx	lr

080036b2 <HAL_MultiProcessorEx_AddressLength_Set>:
  *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
  *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
 80036b2:	0003      	movs	r3, r0
 80036b4:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if (huart == NULL)
  {
    return HAL_ERROR;
 80036b6:	2001      	movs	r0, #1
{
 80036b8:	000c      	movs	r4, r1
  if (huart == NULL)
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d010      	beq.n	80036e0 <HAL_MultiProcessorEx_AddressLength_Set+0x2e>
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 80036be:	2224      	movs	r2, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 80036c0:	2510      	movs	r5, #16
  huart->gState = HAL_UART_STATE_BUSY;
 80036c2:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	6811      	ldr	r1, [r2, #0]
 80036c8:	4381      	bics	r1, r0
 80036ca:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 80036cc:	6851      	ldr	r1, [r2, #4]
 80036ce:	43a9      	bics	r1, r5
 80036d0:	4321      	orrs	r1, r4
 80036d2:	6051      	str	r1, [r2, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	4308      	orrs	r0, r1
 80036d8:	6010      	str	r0, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 80036da:	0018      	movs	r0, r3
 80036dc:	f7ff fe8c 	bl	80033f8 <UART_CheckIdleState>
}
 80036e0:	bd70      	pop	{r4, r5, r6, pc}

080036e2 <HAL_UARTEx_ReceiveToIdle_IT>:
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036e2:	1d03      	adds	r3, r0, #4
 80036e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 80036e6:	b570      	push	{r4, r5, r6, lr}
 80036e8:	0004      	movs	r4, r0

    return status;
  }
  else
  {
    return HAL_BUSY;
 80036ea:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d102      	bne.n	80036f6 <HAL_UARTEx_ReceiveToIdle_IT+0x14>
    if ((pData == NULL) || (Size == 0U))
 80036f0:	2900      	cmp	r1, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_UARTEx_ReceiveToIdle_IT+0x16>
      return HAL_ERROR;
 80036f4:	2001      	movs	r0, #1
  }
}
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 80036f8:	2a00      	cmp	r2, #0
 80036fa:	d0fb      	beq.n	80036f4 <HAL_UARTEx_ReceiveToIdle_IT+0x12>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fc:	2080      	movs	r0, #128	; 0x80
 80036fe:	68a5      	ldr	r5, [r4, #8]
 8003700:	2301      	movs	r3, #1
 8003702:	0140      	lsls	r0, r0, #5
 8003704:	4285      	cmp	r5, r0
 8003706:	d104      	bne.n	8003712 <HAL_UARTEx_ReceiveToIdle_IT+0x30>
 8003708:	6920      	ldr	r0, [r4, #16]
 800370a:	2800      	cmp	r0, #0
 800370c:	d101      	bne.n	8003712 <HAL_UARTEx_ReceiveToIdle_IT+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 800370e:	4219      	tst	r1, r3
 8003710:	d1f0      	bne.n	80036f4 <HAL_UARTEx_ReceiveToIdle_IT+0x12>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003712:	6623      	str	r3, [r4, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003714:	2300      	movs	r3, #0
    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003716:	0020      	movs	r0, r4
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003718:	6663      	str	r3, [r4, #100]	; 0x64
    status =  UART_Start_Receive_IT(huart, pData, Size);
 800371a:	f7ff ff63 	bl	80035e4 <UART_Start_Receive_IT>
    if (status == HAL_OK)
 800371e:	2800      	cmp	r0, #0
 8003720:	d1e9      	bne.n	80036f6 <HAL_UARTEx_ReceiveToIdle_IT+0x14>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003722:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003724:	2a01      	cmp	r2, #1
 8003726:	d1e5      	bne.n	80036f4 <HAL_UARTEx_ReceiveToIdle_IT+0x12>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003728:	2310      	movs	r3, #16
 800372a:	6821      	ldr	r1, [r4, #0]
 800372c:	620b      	str	r3, [r1, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	6814      	ldr	r4, [r2, #0]
 800373a:	4323      	orrs	r3, r4
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	f381 8810 	msr	PRIMASK, r1
}
 8003742:	e7d8      	b.n	80036f6 <HAL_UARTEx_ReceiveToIdle_IT+0x14>

08003744 <memset>:
 8003744:	0003      	movs	r3, r0
 8003746:	1882      	adds	r2, r0, r2
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <memset+0xa>
 800374c:	4770      	bx	lr
 800374e:	7019      	strb	r1, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	e7f9      	b.n	8003748 <memset+0x4>

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	2600      	movs	r6, #0
 8003758:	4c0c      	ldr	r4, [pc, #48]	; (800378c <__libc_init_array+0x38>)
 800375a:	4d0d      	ldr	r5, [pc, #52]	; (8003790 <__libc_init_array+0x3c>)
 800375c:	1b64      	subs	r4, r4, r5
 800375e:	10a4      	asrs	r4, r4, #2
 8003760:	42a6      	cmp	r6, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	2600      	movs	r6, #0
 8003766:	f000 f819 	bl	800379c <_init>
 800376a:	4c0a      	ldr	r4, [pc, #40]	; (8003794 <__libc_init_array+0x40>)
 800376c:	4d0a      	ldr	r5, [pc, #40]	; (8003798 <__libc_init_array+0x44>)
 800376e:	1b64      	subs	r4, r4, r5
 8003770:	10a4      	asrs	r4, r4, #2
 8003772:	42a6      	cmp	r6, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	00b3      	lsls	r3, r6, #2
 800377a:	58eb      	ldr	r3, [r5, r3]
 800377c:	4798      	blx	r3
 800377e:	3601      	adds	r6, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	00b3      	lsls	r3, r6, #2
 8003784:	58eb      	ldr	r3, [r5, r3]
 8003786:	4798      	blx	r3
 8003788:	3601      	adds	r6, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	080037ec 	.word	0x080037ec
 8003790:	080037ec 	.word	0x080037ec
 8003794:	080037f0 	.word	0x080037f0
 8003798:	080037ec 	.word	0x080037ec

0800379c <_init>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr

080037a8 <_fini>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr
