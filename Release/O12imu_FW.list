
O12imu_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000263c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080026fc  080026fc  000126fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800272c  0800272c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800272c  0800272c  0001272c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002734  08002734  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002738  08002738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800273c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08002748  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000158  08002748  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e028  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025a3  00000000  00000000  0003e09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000a951  00000000  00000000  00040642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001108  00000000  00000000  0004af98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f6c  00000000  00000000  0004c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000132af  00000000  00000000  0004d00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000084e3  00000000  00000000  000602bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a4c  00000000  00000000  000687a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0006c1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026e4 	.word	0x080026e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080026e4 	.word	0x080026e4

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	0008      	movs	r0, r1
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f834 	bl	80002e4 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_lmul>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	46ce      	mov	lr, r9
 800028c:	4699      	mov	r9, r3
 800028e:	0c03      	lsrs	r3, r0, #16
 8000290:	469c      	mov	ip, r3
 8000292:	0413      	lsls	r3, r2, #16
 8000294:	4647      	mov	r7, r8
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0404      	lsls	r4, r0, #16
 80002a0:	0c24      	lsrs	r4, r4, #16
 80002a2:	b580      	push	{r7, lr}
 80002a4:	0007      	movs	r7, r0
 80002a6:	0c10      	lsrs	r0, r2, #16
 80002a8:	434b      	muls	r3, r1
 80002aa:	4365      	muls	r5, r4
 80002ac:	4341      	muls	r1, r0
 80002ae:	4360      	muls	r0, r4
 80002b0:	0c2c      	lsrs	r4, r5, #16
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	1820      	adds	r0, r4, r0
 80002b6:	468c      	mov	ip, r1
 80002b8:	4283      	cmp	r3, r0
 80002ba:	d903      	bls.n	80002c4 <__aeabi_lmul+0x3c>
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	025b      	lsls	r3, r3, #9
 80002c0:	4698      	mov	r8, r3
 80002c2:	44c4      	add	ip, r8
 80002c4:	4649      	mov	r1, r9
 80002c6:	4379      	muls	r1, r7
 80002c8:	4356      	muls	r6, r2
 80002ca:	0c03      	lsrs	r3, r0, #16
 80002cc:	042d      	lsls	r5, r5, #16
 80002ce:	0c2d      	lsrs	r5, r5, #16
 80002d0:	1989      	adds	r1, r1, r6
 80002d2:	4463      	add	r3, ip
 80002d4:	0400      	lsls	r0, r0, #16
 80002d6:	1940      	adds	r0, r0, r5
 80002d8:	18c9      	adds	r1, r1, r3
 80002da:	bcc0      	pop	{r6, r7}
 80002dc:	46b9      	mov	r9, r7
 80002de:	46b0      	mov	r8, r6
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__udivmoddi4>:
 80002e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e6:	4657      	mov	r7, sl
 80002e8:	464e      	mov	r6, r9
 80002ea:	4645      	mov	r5, r8
 80002ec:	46de      	mov	lr, fp
 80002ee:	b5e0      	push	{r5, r6, r7, lr}
 80002f0:	0004      	movs	r4, r0
 80002f2:	000d      	movs	r5, r1
 80002f4:	4692      	mov	sl, r2
 80002f6:	4699      	mov	r9, r3
 80002f8:	b083      	sub	sp, #12
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d830      	bhi.n	8000360 <__udivmoddi4+0x7c>
 80002fe:	d02d      	beq.n	800035c <__udivmoddi4+0x78>
 8000300:	4649      	mov	r1, r9
 8000302:	4650      	mov	r0, sl
 8000304:	f000 f8d8 	bl	80004b8 <__clzdi2>
 8000308:	0029      	movs	r1, r5
 800030a:	0006      	movs	r6, r0
 800030c:	0020      	movs	r0, r4
 800030e:	f000 f8d3 	bl	80004b8 <__clzdi2>
 8000312:	1a33      	subs	r3, r6, r0
 8000314:	4698      	mov	r8, r3
 8000316:	3b20      	subs	r3, #32
 8000318:	d434      	bmi.n	8000384 <__udivmoddi4+0xa0>
 800031a:	469b      	mov	fp, r3
 800031c:	4653      	mov	r3, sl
 800031e:	465a      	mov	r2, fp
 8000320:	4093      	lsls	r3, r2
 8000322:	4642      	mov	r2, r8
 8000324:	001f      	movs	r7, r3
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	001e      	movs	r6, r3
 800032c:	42af      	cmp	r7, r5
 800032e:	d83b      	bhi.n	80003a8 <__udivmoddi4+0xc4>
 8000330:	42af      	cmp	r7, r5
 8000332:	d100      	bne.n	8000336 <__udivmoddi4+0x52>
 8000334:	e079      	b.n	800042a <__udivmoddi4+0x146>
 8000336:	465b      	mov	r3, fp
 8000338:	1ba4      	subs	r4, r4, r6
 800033a:	41bd      	sbcs	r5, r7
 800033c:	2b00      	cmp	r3, #0
 800033e:	da00      	bge.n	8000342 <__udivmoddi4+0x5e>
 8000340:	e076      	b.n	8000430 <__udivmoddi4+0x14c>
 8000342:	2200      	movs	r2, #0
 8000344:	2300      	movs	r3, #0
 8000346:	9200      	str	r2, [sp, #0]
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	2301      	movs	r3, #1
 800034c:	465a      	mov	r2, fp
 800034e:	4093      	lsls	r3, r2
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	4642      	mov	r2, r8
 8000356:	4093      	lsls	r3, r2
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	e029      	b.n	80003b0 <__udivmoddi4+0xcc>
 800035c:	4282      	cmp	r2, r0
 800035e:	d9cf      	bls.n	8000300 <__udivmoddi4+0x1c>
 8000360:	2200      	movs	r2, #0
 8000362:	2300      	movs	r3, #0
 8000364:	9200      	str	r2, [sp, #0]
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <__udivmoddi4+0x8e>
 800036e:	601c      	str	r4, [r3, #0]
 8000370:	605d      	str	r5, [r3, #4]
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	b003      	add	sp, #12
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	46bb      	mov	fp, r7
 800037c:	46b2      	mov	sl, r6
 800037e:	46a9      	mov	r9, r5
 8000380:	46a0      	mov	r8, r4
 8000382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000384:	4642      	mov	r2, r8
 8000386:	469b      	mov	fp, r3
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	4652      	mov	r2, sl
 800038e:	40da      	lsrs	r2, r3
 8000390:	4641      	mov	r1, r8
 8000392:	0013      	movs	r3, r2
 8000394:	464a      	mov	r2, r9
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	4642      	mov	r2, r8
 800039c:	431f      	orrs	r7, r3
 800039e:	4653      	mov	r3, sl
 80003a0:	4093      	lsls	r3, r2
 80003a2:	001e      	movs	r6, r3
 80003a4:	42af      	cmp	r7, r5
 80003a6:	d9c3      	bls.n	8000330 <__udivmoddi4+0x4c>
 80003a8:	2200      	movs	r2, #0
 80003aa:	2300      	movs	r3, #0
 80003ac:	9200      	str	r2, [sp, #0]
 80003ae:	9301      	str	r3, [sp, #4]
 80003b0:	4643      	mov	r3, r8
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0d8      	beq.n	8000368 <__udivmoddi4+0x84>
 80003b6:	07fb      	lsls	r3, r7, #31
 80003b8:	0872      	lsrs	r2, r6, #1
 80003ba:	431a      	orrs	r2, r3
 80003bc:	4646      	mov	r6, r8
 80003be:	087b      	lsrs	r3, r7, #1
 80003c0:	e00e      	b.n	80003e0 <__udivmoddi4+0xfc>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d101      	bne.n	80003ca <__udivmoddi4+0xe6>
 80003c6:	42a2      	cmp	r2, r4
 80003c8:	d80c      	bhi.n	80003e4 <__udivmoddi4+0x100>
 80003ca:	1aa4      	subs	r4, r4, r2
 80003cc:	419d      	sbcs	r5, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2100      	movs	r1, #0
 80003d6:	3e01      	subs	r6, #1
 80003d8:	1824      	adds	r4, r4, r0
 80003da:	414d      	adcs	r5, r1
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d006      	beq.n	80003ee <__udivmoddi4+0x10a>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d9ee      	bls.n	80003c2 <__udivmoddi4+0xde>
 80003e4:	3e01      	subs	r6, #1
 80003e6:	1924      	adds	r4, r4, r4
 80003e8:	416d      	adcs	r5, r5
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d1f8      	bne.n	80003e0 <__udivmoddi4+0xfc>
 80003ee:	9800      	ldr	r0, [sp, #0]
 80003f0:	9901      	ldr	r1, [sp, #4]
 80003f2:	465b      	mov	r3, fp
 80003f4:	1900      	adds	r0, r0, r4
 80003f6:	4169      	adcs	r1, r5
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db24      	blt.n	8000446 <__udivmoddi4+0x162>
 80003fc:	002b      	movs	r3, r5
 80003fe:	465a      	mov	r2, fp
 8000400:	4644      	mov	r4, r8
 8000402:	40d3      	lsrs	r3, r2
 8000404:	002a      	movs	r2, r5
 8000406:	40e2      	lsrs	r2, r4
 8000408:	001c      	movs	r4, r3
 800040a:	465b      	mov	r3, fp
 800040c:	0015      	movs	r5, r2
 800040e:	2b00      	cmp	r3, #0
 8000410:	db2a      	blt.n	8000468 <__udivmoddi4+0x184>
 8000412:	0026      	movs	r6, r4
 8000414:	409e      	lsls	r6, r3
 8000416:	0033      	movs	r3, r6
 8000418:	0026      	movs	r6, r4
 800041a:	4647      	mov	r7, r8
 800041c:	40be      	lsls	r6, r7
 800041e:	0032      	movs	r2, r6
 8000420:	1a80      	subs	r0, r0, r2
 8000422:	4199      	sbcs	r1, r3
 8000424:	9000      	str	r0, [sp, #0]
 8000426:	9101      	str	r1, [sp, #4]
 8000428:	e79e      	b.n	8000368 <__udivmoddi4+0x84>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d8bc      	bhi.n	80003a8 <__udivmoddi4+0xc4>
 800042e:	e782      	b.n	8000336 <__udivmoddi4+0x52>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	2100      	movs	r1, #0
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	2200      	movs	r2, #0
 800043a:	9100      	str	r1, [sp, #0]
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	2201      	movs	r2, #1
 8000440:	40da      	lsrs	r2, r3
 8000442:	9201      	str	r2, [sp, #4]
 8000444:	e785      	b.n	8000352 <__udivmoddi4+0x6e>
 8000446:	4642      	mov	r2, r8
 8000448:	2320      	movs	r3, #32
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	002a      	movs	r2, r5
 800044e:	4646      	mov	r6, r8
 8000450:	409a      	lsls	r2, r3
 8000452:	0023      	movs	r3, r4
 8000454:	40f3      	lsrs	r3, r6
 8000456:	4644      	mov	r4, r8
 8000458:	4313      	orrs	r3, r2
 800045a:	002a      	movs	r2, r5
 800045c:	40e2      	lsrs	r2, r4
 800045e:	001c      	movs	r4, r3
 8000460:	465b      	mov	r3, fp
 8000462:	0015      	movs	r5, r2
 8000464:	2b00      	cmp	r3, #0
 8000466:	dad4      	bge.n	8000412 <__udivmoddi4+0x12e>
 8000468:	4642      	mov	r2, r8
 800046a:	002f      	movs	r7, r5
 800046c:	2320      	movs	r3, #32
 800046e:	0026      	movs	r6, r4
 8000470:	4097      	lsls	r7, r2
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	40de      	lsrs	r6, r3
 8000476:	003b      	movs	r3, r7
 8000478:	4333      	orrs	r3, r6
 800047a:	e7cd      	b.n	8000418 <__udivmoddi4+0x134>

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <__clzdi2>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	2900      	cmp	r1, #0
 80004bc:	d103      	bne.n	80004c6 <__clzdi2+0xe>
 80004be:	f7ff ffdd 	bl	800047c <__clzsi2>
 80004c2:	3020      	adds	r0, #32
 80004c4:	e002      	b.n	80004cc <__clzdi2+0x14>
 80004c6:	0008      	movs	r0, r1
 80004c8:	f7ff ffd8 	bl	800047c <__clzsi2>
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <lsm6dsv_read_reg>:
  *
  */
int32_t __weak lsm6dsv_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80004d0:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80004d2:	6844      	ldr	r4, [r0, #4]
 80004d4:	68c0      	ldr	r0, [r0, #12]
 80004d6:	47a0      	blx	r4

  return ret;
}
 80004d8:	bd10      	pop	{r4, pc}

080004da <lsm6dsv_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80004da:	b510      	push	{r4, lr}
 80004dc:	000a      	movs	r2, r1
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_WHO_AM_I, val, 1);
 80004de:	2301      	movs	r3, #1
 80004e0:	210f      	movs	r1, #15
 80004e2:	f7ff fff5 	bl	80004d0 <lsm6dsv_read_reg>

  return ret;
}
 80004e6:	bd10      	pop	{r4, pc}

080004e8 <platform_delay>:
 * @brief  platform specific delay (platform dependent)
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms) {
 80004e8:	b510      	push	{r4, lr}
    HAL_Delay(ms);
 80004ea:	f000 fabd 	bl	8000a68 <HAL_Delay>
}
 80004ee:	bd10      	pop	{r4, pc}

080004f0 <platform_write>:
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80004f2:	26fa      	movs	r6, #250	; 0xfa
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80004f4:	0004      	movs	r4, r0
 80004f6:	b085      	sub	sp, #20
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 80004f8:	4d0f      	ldr	r5, [pc, #60]	; (8000538 <platform_write+0x48>)
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	ab02      	add	r3, sp, #8
 80004fe:	1ddf      	adds	r7, r3, #7
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8000500:	0028      	movs	r0, r5
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8000502:	9201      	str	r2, [sp, #4]
 8000504:	71d9      	strb	r1, [r3, #7]
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000506:	00b6      	lsls	r6, r6, #2
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2102      	movs	r1, #2
 800050c:	f000 fc90 	bl	8000e30 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000510:	0033      	movs	r3, r6
 8000512:	0039      	movs	r1, r7
 8000514:	2201      	movs	r2, #1
 8000516:	0020      	movs	r0, r4
 8000518:	f001 f9e5 	bl	80018e6 <HAL_SPI_Transmit>
    spi_status = HAL_SPI_Transmit(handle, (uint8_t *)bufp, len, 1000);
 800051c:	0033      	movs	r3, r6
 800051e:	9a02      	ldr	r2, [sp, #8]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	0020      	movs	r0, r4
 8000524:	f001 f9df 	bl	80018e6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8000528:	0028      	movs	r0, r5
 800052a:	2201      	movs	r2, #1
 800052c:	2102      	movs	r1, #2
 800052e:	f000 fc7f 	bl	8000e30 <HAL_GPIO_WritePin>
}
 8000532:	2000      	movs	r0, #0
 8000534:	b005      	add	sp, #20
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	50000400 	.word	0x50000400

0800053c <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	9302      	str	r3, [sp, #8]
 8000542:	ab02      	add	r3, sp, #8
 8000544:	1ddf      	adds	r7, r3, #7
    reg |= 0x80;
 8000546:	2380      	movs	r3, #128	; 0x80
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000548:	26fa      	movs	r6, #250	; 0xfa
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 800054a:	0004      	movs	r4, r0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800054c:	4d0f      	ldr	r5, [pc, #60]	; (800058c <platform_read+0x50>)
    reg |= 0x80;
 800054e:	425b      	negs	r3, r3
 8000550:	430b      	orrs	r3, r1
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000552:	0028      	movs	r0, r5
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8000554:	9201      	str	r2, [sp, #4]
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000556:	00b6      	lsls	r6, r6, #2
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2102      	movs	r1, #2
    reg |= 0x80;
 800055c:	703b      	strb	r3, [r7, #0]
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800055e:	f000 fc67 	bl	8000e30 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000562:	0033      	movs	r3, r6
 8000564:	0039      	movs	r1, r7
 8000566:	2201      	movs	r2, #1
 8000568:	0020      	movs	r0, r4
 800056a:	f001 f9bc 	bl	80018e6 <HAL_SPI_Transmit>
    spi_status = HAL_SPI_Receive(handle, bufp, len, 1000);
 800056e:	0033      	movs	r3, r6
 8000570:	9a02      	ldr	r2, [sp, #8]
 8000572:	9901      	ldr	r1, [sp, #4]
 8000574:	0020      	movs	r0, r4
 8000576:	f001 fb79 	bl	8001c6c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800057a:	0028      	movs	r0, r5
 800057c:	2201      	movs	r2, #1
 800057e:	2102      	movs	r1, #2
 8000580:	f000 fc56 	bl	8000e30 <HAL_GPIO_WritePin>
}
 8000584:	2000      	movs	r0, #0
 8000586:	b005      	add	sp, #20
 8000588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	50000400 	.word	0x50000400

08000590 <SystemClock_Config>:
{
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000594:	2220      	movs	r2, #32
 8000596:	2100      	movs	r1, #0
 8000598:	a80c      	add	r0, sp, #48	; 0x30
 800059a:	f002 f876 	bl	800268a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059e:	2214      	movs	r2, #20
 80005a0:	2100      	movs	r1, #0
 80005a2:	4668      	mov	r0, sp
 80005a4:	f002 f871 	bl	800268a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	2218      	movs	r2, #24
 80005aa:	2100      	movs	r1, #0
 80005ac:	a805      	add	r0, sp, #20
 80005ae:	f002 f86c 	bl	800268a <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b2:	491c      	ldr	r1, [pc, #112]	; (8000624 <SystemClock_Config+0x94>)
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <SystemClock_Config+0x98>)
 80005b6:	680a      	ldr	r2, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ba:	401a      	ands	r2, r3
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	4313      	orrs	r3, r2
 80005c2:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	02db      	lsls	r3, r3, #11
 80005d0:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005d2:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005d6:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005da:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005e0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f000 fc73 	bl	8000ecc <HAL_RCC_OscConfig>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ea:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80005ec:	e7fe      	b.n	80005ec <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005fa:	0029      	movs	r1, r5
 80005fc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000600:	f000 feb2 	bl	8001368 <HAL_RCC_ClockConfig>
 8000604:	2800      	cmp	r0, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x7c>
 8000608:	b672      	cpsid	i
    while (1) {
 800060a:	e7fe      	b.n	800060a <SystemClock_Config+0x7a>
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800060c:	2304      	movs	r3, #4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060e:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000610:	9405      	str	r4, [sp, #20]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000612:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000614:	f000 ff96 	bl	8001544 <HAL_RCCEx_PeriphCLKConfig>
 8000618:	2800      	cmp	r0, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x90>
 800061c:	b672      	cpsid	i
    while (1) {
 800061e:	e7fe      	b.n	800061e <SystemClock_Config+0x8e>
}
 8000620:	b019      	add	sp, #100	; 0x64
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	40007000 	.word	0x40007000
 8000628:	ffffe7ff 	.word	0xffffe7ff

0800062c <main>:
{
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000630:	f000 f9f4 	bl	8000a1c <HAL_Init>
  SystemClock_Config();
 8000634:	f7ff ffac 	bl	8000590 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	2214      	movs	r2, #20
 800063a:	2100      	movs	r1, #0
 800063c:	a805      	add	r0, sp, #20
 800063e:	f002 f824 	bl	800268a <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2702      	movs	r7, #2
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000648:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4d58      	ldr	r5, [pc, #352]	; (80007ac <main+0x180>)
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 800064c:	4858      	ldr	r0, [pc, #352]	; (80007b0 <main+0x184>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000650:	01c9      	lsls	r1, r1, #7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4313      	orrs	r3, r2
 8000654:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000656:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4013      	ands	r3, r2
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4333      	orrs	r3, r6
 8000666:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000668:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800066a:	4033      	ands	r3, r6
 800066c:	9303      	str	r3, [sp, #12]
 800066e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000672:	433b      	orrs	r3, r7
 8000674:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000676:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000678:	403b      	ands	r3, r7
 800067a:	9304      	str	r3, [sp, #16]
 800067c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 800067e:	f000 fbd7 	bl	8000e30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000682:	20a0      	movs	r0, #160	; 0xa0
 8000684:	2200      	movs	r2, #0
 8000686:	0031      	movs	r1, r6
 8000688:	05c0      	lsls	r0, r0, #23
 800068a:	f000 fbd1 	bl	8000e30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	0039      	movs	r1, r7
 8000692:	4848      	ldr	r0, [pc, #288]	; (80007b4 <main+0x188>)
 8000694:	f000 fbcc 	bl	8000e30 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = UART_DE_Pin;
 8000698:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 800069a:	4845      	ldr	r0, [pc, #276]	; (80007b0 <main+0x184>)
  GPIO_InitStruct.Pin = UART_DE_Pin;
 800069c:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 800069e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = UART_DE_Pin;
 80006a0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f000 fb14 	bl	8000cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	20a0      	movs	r0, #160	; 0xa0
 80006ae:	a905      	add	r1, sp, #20
 80006b0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f000 fb0b 	bl	8000cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80006c0:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <main+0x18c>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	a905      	add	r1, sp, #20
 80006c4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80006c6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f000 fb02 	bl	8000cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80006d0:	4838      	ldr	r0, [pc, #224]	; (80007b4 <main+0x188>)
 80006d2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80006d4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f000 fafa 	bl	8000cd4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006e2:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e4:	4333      	orrs	r3, r6
 80006e6:	632b      	str	r3, [r5, #48]	; 0x30
 80006e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006ea:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ec:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006ee:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006f4:	f000 f9ca 	bl	8000a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f000 f9f1 	bl	8000ae0 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80006fe:	482f      	ldr	r0, [pc, #188]	; (80007bc <main+0x190>)
 8000700:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <main+0x194>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 8000704:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 1000000;
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <main+0x198>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	60c4      	str	r4, [r0, #12]
  huart2.Init.BaudRate = 1000000;
 800070a:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	f001 ff83 	bl	8002624 <HAL_UART_Init>
 800071e:	42a0      	cmp	r0, r4
 8000720:	d001      	beq.n	8000726 <main+0xfa>
 8000722:	b672      	cpsid	i
    while (1) {
 8000724:	e7fe      	b.n	8000724 <main+0xf8>
  hspi1.Instance = SPI1;
 8000726:	4c28      	ldr	r4, [pc, #160]	; (80007c8 <main+0x19c>)
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <main+0x1a0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	60a0      	str	r0, [r4, #8]
  hspi1.Instance = SPI1;
 800072c:	6023      	str	r3, [r4, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072e:	2382      	movs	r3, #130	; 0x82
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	6063      	str	r3, [r4, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000734:	33fc      	adds	r3, #252	; 0xfc
 8000736:	61a3      	str	r3, [r4, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000738:	3be1      	subs	r3, #225	; 0xe1
 800073a:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800073c:	60e0      	str	r0, [r4, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800073e:	61e3      	str	r3, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000740:	6220      	str	r0, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000742:	6260      	str	r0, [r4, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	62a0      	str	r0, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000746:	3b19      	subs	r3, #25
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000748:	0020      	movs	r0, r4
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800074a:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800074c:	6166      	str	r6, [r4, #20]
  hspi1.Init.CRCPolynomial = 7;
 800074e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000750:	f001 f86e 	bl	8001830 <HAL_SPI_Init>
 8000754:	1e02      	subs	r2, r0, #0
 8000756:	d001      	beq.n	800075c <main+0x130>
 8000758:	b672      	cpsid	i
    while (1) {
 800075a:	e7fe      	b.n	800075a <main+0x12e>
    HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, 0);
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	4814      	ldr	r0, [pc, #80]	; (80007b0 <main+0x184>)
 8000760:	01c9      	lsls	r1, r1, #7
 8000762:	f000 fb65 	bl	8000e30 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1); //CS high means I2c activated
 8000766:	0032      	movs	r2, r6
 8000768:	0039      	movs	r1, r7
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <main+0x188>)
 800076c:	f000 fb60 	bl	8000e30 <HAL_GPIO_WritePin>
    dev_ctx.write_reg = platform_write;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <main+0x1a4>)
    HAL_Delay(ms);
 8000772:	200a      	movs	r0, #10
    dev_ctx.write_reg = platform_write;
 8000774:	9305      	str	r3, [sp, #20]
    dev_ctx.read_reg = platform_read;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <main+0x1a8>)
    	if(whoamI != LSM6DSV_ID) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000778:	25a0      	movs	r5, #160	; 0xa0
    dev_ctx.read_reg = platform_read;
 800077a:	9306      	str	r3, [sp, #24]
    dev_ctx.mdelay = platform_delay;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <main+0x1ac>)
    dev_ctx.handle = &SENSOR_BUS;
 800077e:	9408      	str	r4, [sp, #32]
    dev_ctx.mdelay = platform_delay;
 8000780:	9307      	str	r3, [sp, #28]
    HAL_Delay(ms);
 8000782:	f000 f971 	bl	8000a68 <HAL_Delay>
    	if(whoamI != LSM6DSV_ID) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000786:	05ed      	lsls	r5, r5, #23
 8000788:	4c14      	ldr	r4, [pc, #80]	; (80007dc <main+0x1b0>)
 800078a:	7823      	ldrb	r3, [r4, #0]
 800078c:	2b70      	cmp	r3, #112	; 0x70
 800078e:	d004      	beq.n	800079a <main+0x16e>
 8000790:	2201      	movs	r2, #1
 8000792:	0028      	movs	r0, r5
 8000794:	0011      	movs	r1, r2
 8000796:	f000 fb4b 	bl	8000e30 <HAL_GPIO_WritePin>
    	lsm6dsv_device_id_get(&dev_ctx, &whoamI);
 800079a:	0021      	movs	r1, r4
 800079c:	a805      	add	r0, sp, #20
 800079e:	f7ff fe9c 	bl	80004da <lsm6dsv_device_id_get>
    	HAL_Delay(10);
 80007a2:	200a      	movs	r0, #10
 80007a4:	f000 f960 	bl	8000a68 <HAL_Delay>
    	if(whoamI != LSM6DSV_ID) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80007a8:	e7ee      	b.n	8000788 <main+0x15c>
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40021000 	.word	0x40021000
 80007b0:	50000800 	.word	0x50000800
 80007b4:	50000400 	.word	0x50000400
 80007b8:	00000202 	.word	0x00000202
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	40004400 	.word	0x40004400
 80007c4:	000f4240 	.word	0x000f4240
 80007c8:	20000070 	.word	0x20000070
 80007cc:	40013000 	.word	0x40013000
 80007d0:	080004f1 	.word	0x080004f1
 80007d4:	0800053d 	.word	0x0800053d
 80007d8:	080004e9 	.word	0x080004e9
 80007dc:	20000150 	.word	0x20000150

080007e0 <Error_Handler>:
 80007e0:	b672      	cpsid	i
    while (1) {
 80007e2:	e7fe      	b.n	80007e2 <Error_Handler+0x2>

080007e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e4:	2201      	movs	r2, #1
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_MspInit+0x18>)
 80007e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80007f2:	0552      	lsls	r2, r2, #21
 80007f4:	430a      	orrs	r2, r1
 80007f6:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f8:	4770      	bx	lr
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000800:	b510      	push	{r4, lr}
 8000802:	0004      	movs	r4, r0
 8000804:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	2214      	movs	r2, #20
 8000808:	2100      	movs	r1, #0
 800080a:	a801      	add	r0, sp, #4
 800080c:	f001 ff3d 	bl	800268a <memset>
  if(hspi->Instance==SPI1)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_SPI_MspInit+0x60>)
 8000812:	6822      	ldr	r2, [r4, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d120      	bne.n	800085a <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_SPI_MspInit+0x64>)
 800081c:	0152      	lsls	r2, r2, #5
 800081e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000822:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000826:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	430a      	orrs	r2, r1
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	400b      	ands	r3, r1
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000838:	23e0      	movs	r3, #224	; 0xe0
 800083a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	3bde      	subs	r3, #222	; 0xde
 800083e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f000 fa45 	bl	8000cd4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2019      	movs	r0, #25
 800084e:	0011      	movs	r1, r2
 8000850:	f000 f91c 	bl	8000a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000854:	2019      	movs	r0, #25
 8000856:	f000 f943 	bl	8000ae0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800085a:	b006      	add	sp, #24
 800085c:	bd10      	pop	{r4, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40013000 	.word	0x40013000
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	0005      	movs	r5, r0
 800086c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	2214      	movs	r2, #20
 8000870:	2100      	movs	r1, #0
 8000872:	a801      	add	r0, sp, #4
 8000874:	f001 ff09 	bl	800268a <memset>
  if(huart->Instance==USART2)
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_UART_MspInit+0x90>)
 800087a:	682a      	ldr	r2, [r5, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d138      	bne.n	80008f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <HAL_UART_MspInit+0x94>)
 8000884:	0292      	lsls	r2, r2, #10
 8000886:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	481d      	ldr	r0, [pc, #116]	; (8000900 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	430a      	orrs	r2, r1
 800088c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2202      	movs	r2, #2
 8000890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000892:	4311      	orrs	r1, r2
 8000894:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4013      	ands	r3, r2
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a0:	23c0      	movs	r3, #192	; 0xc0
 80008a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	3bbf      	subs	r3, #191	; 0xbf
 80008a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	189b      	adds	r3, r3, r2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f000 fa11 	bl	8000cd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80008b2:	4c14      	ldr	r4, [pc, #80]	; (8000904 <HAL_UART_MspInit+0x9c>)
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_UART_MspInit+0xa0>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008b6:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80008b8:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008be:	330c      	adds	r3, #12
 80008c0:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c2:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008c4:	0020      	movs	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c6:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008c8:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ca:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008cc:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008ce:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008d0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008d2:	f000 f92b 	bl	8000b2c <HAL_DMA_Init>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d001      	beq.n	80008de <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 80008da:	f7ff ff81 	bl	80007e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	201c      	movs	r0, #28
 80008e2:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008e4:	672c      	str	r4, [r5, #112]	; 0x70
 80008e6:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008e8:	f000 f8d0 	bl	8000a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ec:	201c      	movs	r0, #28
 80008ee:	f000 f8f7 	bl	8000ae0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f2:	b007      	add	sp, #28
 80008f4:	bd30      	pop	{r4, r5, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40004400 	.word	0x40004400
 80008fc:	40021000 	.word	0x40021000
 8000900:	50000400 	.word	0x50000400
 8000904:	20000028 	.word	0x20000028
 8000908:	4002001c 	.word	0x4002001c

0800090c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler>

0800090e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler>

08000910 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f895 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bd10      	pop	{r4, pc}

0800091c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800091c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800091e:	4802      	ldr	r0, [pc, #8]	; (8000928 <DMA1_Channel2_3_IRQHandler+0xc>)
 8000920:	f000 f98d 	bl	8000c3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000924:	bd10      	pop	{r4, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	20000028 	.word	0x20000028

0800092c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800092c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800092e:	4802      	ldr	r0, [pc, #8]	; (8000938 <SPI1_IRQHandler+0xc>)
 8000930:	f001 fa48 	bl	8001dc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000934:	bd10      	pop	{r4, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000070 	.word	0x20000070

0800093c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800093c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800093e:	4802      	ldr	r0, [pc, #8]	; (8000948 <USART2_IRQHandler+0xc>)
 8000940:	f001 fb08 	bl	8001f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000944:	bd10      	pop	{r4, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	200000c8 	.word	0x200000c8

0800094c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	4770      	bx	lr
	...

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000950:	4813      	ldr	r0, [pc, #76]	; (80009a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000952:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000954:	f7ff fffa 	bl	800094c <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000958:	4812      	ldr	r0, [pc, #72]	; (80009a4 <LoopForever+0x6>)
    LDR R1, [R0]
 800095a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800095c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <LoopForever+0xa>)
    CMP R1, R2
 8000960:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000962:	d105      	bne.n	8000970 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000966:	4912      	ldr	r1, [pc, #72]	; (80009b0 <LoopForever+0x12>)
    STR R1, [R0]
 8000968:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800096a:	4812      	ldr	r0, [pc, #72]	; (80009b4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800096c:	4912      	ldr	r1, [pc, #72]	; (80009b8 <LoopForever+0x1a>)
    STR R1, [R0]
 800096e:	6001      	str	r1, [r0, #0]

08000970 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <LoopForever+0x1e>)
  ldr r1, =_edata
 8000972:	4913      	ldr	r1, [pc, #76]	; (80009c0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <LoopForever+0x26>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000988:	4c10      	ldr	r4, [pc, #64]	; (80009cc <LoopForever+0x2e>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f001 fe81 	bl	800269c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099a:	f7ff fe47 	bl	800062c <main>

0800099e <LoopForever>:

LoopForever:
    b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
   ldr   r0, =_estack
 80009a0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80009a4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009a8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80009ac:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80009b0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009b4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009b8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c4:	0800273c 	.word	0x0800273c
  ldr r2, =_sbss
 80009c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009cc:	20000158 	.word	0x20000158

080009d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_COMP_IRQHandler>
	...

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	20fa      	movs	r0, #250	; 0xfa
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_InitTick+0x3c>)
 80009dc:	0080      	lsls	r0, r0, #2
 80009de:	7819      	ldrb	r1, [r3, #0]
 80009e0:	f7ff fba6 	bl	8000130 <__udivsi3>
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <HAL_InitTick+0x40>)
 80009e6:	0001      	movs	r1, r0
 80009e8:	6820      	ldr	r0, [r4, #0]
 80009ea:	f7ff fba1 	bl	8000130 <__udivsi3>
 80009ee:	f000 f883 	bl	8000af8 <HAL_SYSTICK_Config>
 80009f2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80009f4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d109      	bne.n	8000a0e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	2d03      	cmp	r5, #3
 80009fc:	d807      	bhi.n	8000a0e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fe:	3802      	subs	r0, #2
 8000a00:	0022      	movs	r2, r4
 8000a02:	0029      	movs	r1, r5
 8000a04:	f000 f842 	bl	8000a8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	0020      	movs	r0, r4
 8000a0a:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_InitTick+0x44>)
 8000a0c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	20000004 	.word	0x20000004
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008

08000a1c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_Init+0x24>)
{
 8000a20:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a22:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a24:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a26:	430b      	orrs	r3, r1
 8000a28:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	f7ff ffd3 	bl	80009d4 <HAL_InitTick>
 8000a2e:	1e04      	subs	r4, r0, #0
 8000a30:	d103      	bne.n	8000a3a <HAL_Init+0x1e>
    HAL_MspInit();
 8000a32:	f7ff fed7 	bl	80007e4 <HAL_MspInit>
}
 8000a36:	0020      	movs	r0, r4
 8000a38:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000a3a:	2401      	movs	r4, #1
 8000a3c:	e7fb      	b.n	8000a36 <HAL_Init+0x1a>
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40022000 	.word	0x40022000

08000a44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <HAL_IncTick+0x10>)
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_IncTick+0x14>)
 8000a48:	6811      	ldr	r1, [r2, #0]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	185b      	adds	r3, r3, r1
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	4770      	bx	lr
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	20000154 	.word	0x20000154
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <HAL_GetTick+0x8>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
}
 8000a60:	4770      	bx	lr
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20000154 	.word	0x20000154

08000a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff fff6 	bl	8000a5c <HAL_GetTick>
 8000a70:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	1c63      	adds	r3, r4, #1
 8000a74:	d002      	beq.n	8000a7c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_Delay+0x20>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a7c:	f7ff ffee 	bl	8000a5c <HAL_GetTick>
 8000a80:	1b40      	subs	r0, r0, r5
 8000a82:	42a0      	cmp	r0, r4
 8000a84:	d3fa      	bcc.n	8000a7c <HAL_Delay+0x14>
  {
  }
}
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8e:	25ff      	movs	r5, #255	; 0xff
 8000a90:	2403      	movs	r4, #3
 8000a92:	002a      	movs	r2, r5
 8000a94:	4004      	ands	r4, r0
 8000a96:	00e4      	lsls	r4, r4, #3
 8000a98:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9a:	0189      	lsls	r1, r1, #6
 8000a9c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa0:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa2:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	db0a      	blt.n	8000abe <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	24c0      	movs	r4, #192	; 0xc0
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_NVIC_SetPriority+0x4c>)
 8000aac:	0880      	lsrs	r0, r0, #2
 8000aae:	0080      	lsls	r0, r0, #2
 8000ab0:	18c0      	adds	r0, r0, r3
 8000ab2:	00a4      	lsls	r4, r4, #2
 8000ab4:	5903      	ldr	r3, [r0, r4]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000abc:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000abe:	200f      	movs	r0, #15
 8000ac0:	4003      	ands	r3, r0
 8000ac2:	3b08      	subs	r3, #8
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <HAL_NVIC_SetPriority+0x50>)
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	181b      	adds	r3, r3, r0
 8000acc:	69d8      	ldr	r0, [r3, #28]
 8000ace:	4002      	ands	r2, r0
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	61da      	str	r2, [r3, #28]
 8000ad4:	e7f2      	b.n	8000abc <HAL_NVIC_SetPriority+0x30>
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	db05      	blt.n	8000af0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae4:	231f      	movs	r3, #31
 8000ae6:	4018      	ands	r0, r3
 8000ae8:	3b1e      	subs	r3, #30
 8000aea:	4083      	lsls	r3, r0
 8000aec:	4a01      	ldr	r2, [pc, #4]	; (8000af4 <HAL_NVIC_EnableIRQ+0x14>)
 8000aee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000af0:	4770      	bx	lr
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	1e43      	subs	r3, r0, #1
 8000afc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d20d      	bcs.n	8000b20 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0c:	6a03      	ldr	r3, [r0, #32]
 8000b0e:	0609      	lsls	r1, r1, #24
 8000b10:	021b      	lsls	r3, r3, #8
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	430b      	orrs	r3, r1
 8000b16:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b20:	4770      	bx	lr
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	e000e010 	.word	0xe000e010
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000b30:	2001      	movs	r0, #1
  if(hdma == NULL)
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d035      	beq.n	8000ba2 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b36:	6825      	ldr	r5, [r4, #0]
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_DMA_Init+0x78>)
 8000b3a:	2114      	movs	r1, #20
 8000b3c:	18e8      	adds	r0, r5, r3
 8000b3e:	f7ff faf7 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b44:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8000b46:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b4c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b4e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b50:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b54:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b56:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8000b58:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b5a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8000b5c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b5e:	433b      	orrs	r3, r7
 8000b60:	6967      	ldr	r7, [r4, #20]
 8000b62:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b64:	69a7      	ldr	r7, [r4, #24]
 8000b66:	433b      	orrs	r3, r7
 8000b68:	69e7      	ldr	r7, [r4, #28]
 8000b6a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b6c:	6a27      	ldr	r7, [r4, #32]
 8000b6e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8000b70:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b72:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	01db      	lsls	r3, r3, #7
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d00c      	beq.n	8000b96 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b7c:	251c      	movs	r5, #28
 8000b7e:	4028      	ands	r0, r5
 8000b80:	3d0d      	subs	r5, #13
 8000b82:	4085      	lsls	r5, r0
 8000b84:	490a      	ldr	r1, [pc, #40]	; (8000bb0 <HAL_DMA_Init+0x84>)
 8000b86:	680b      	ldr	r3, [r1, #0]
 8000b88:	43ab      	bics	r3, r5
 8000b8a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b8c:	6863      	ldr	r3, [r4, #4]
 8000b8e:	680d      	ldr	r5, [r1, #0]
 8000b90:	4083      	lsls	r3, r0
 8000b92:	432b      	orrs	r3, r5
 8000b94:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b96:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000b98:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b9a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b9c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8000b9e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000ba0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8000ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba4:	bffdfff8 	.word	0xbffdfff8
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	ffff800f 	.word	0xffff800f
 8000bb0:	400200a8 	.word	0x400200a8

08000bb4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bb4:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bb6:	1d84      	adds	r4, r0, #6
 8000bb8:	7fe2      	ldrb	r2, [r4, #31]
{
 8000bba:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bbc:	2a02      	cmp	r2, #2
 8000bbe:	d006      	beq.n	8000bce <HAL_DMA_Abort+0x1a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 8000bc4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	3305      	adds	r3, #5
 8000bca:	77da      	strb	r2, [r3, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8000bcc:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bce:	6802      	ldr	r2, [r0, #0]
 8000bd0:	200e      	movs	r0, #14
 8000bd2:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bd4:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd6:	4381      	bics	r1, r0
 8000bd8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	6810      	ldr	r0, [r2, #0]
 8000bde:	4388      	bics	r0, r1
 8000be0:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000be4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000be6:	402a      	ands	r2, r5
 8000be8:	000d      	movs	r5, r1
 8000bea:	4095      	lsls	r5, r2
 8000bec:	6045      	str	r5, [r0, #4]
    return status;
 8000bee:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000bf0:	77e1      	strb	r1, [r4, #31]
    return status;
 8000bf2:	e7e8      	b.n	8000bc6 <HAL_DMA_Abort+0x12>

08000bf4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bf4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bf6:	1d84      	adds	r4, r0, #6
 8000bf8:	7fe3      	ldrb	r3, [r4, #31]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d004      	beq.n	8000c08 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000c02:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c08:	210e      	movs	r1, #14
 8000c0a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c0c:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	438a      	bics	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000c14:	2201      	movs	r2, #1
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	4391      	bics	r1, r2
 8000c1a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c1c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c1e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000c20:	402b      	ands	r3, r5
 8000c22:	0015      	movs	r5, r2
 8000c24:	409d      	lsls	r5, r3
 8000c26:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000c28:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000c2a:	2400      	movs	r4, #0
 8000c2c:	1d43      	adds	r3, r0, #5
 8000c2e:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8000c30:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8000c32:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000c34:	42a2      	cmp	r2, r4
 8000c36:	d0e5      	beq.n	8000c04 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000c38:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000c3a:	0023      	movs	r3, r4
 8000c3c:	e7e2      	b.n	8000c04 <HAL_DMA_Abort_IT+0x10>

08000c3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000c40:	261c      	movs	r6, #28
 8000c42:	2704      	movs	r7, #4
 8000c44:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c46:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000c48:	4032      	ands	r2, r6
 8000c4a:	003e      	movs	r6, r7
 8000c4c:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c4e:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000c50:	6803      	ldr	r3, [r0, #0]
 8000c52:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000c54:	4235      	tst	r5, r6
 8000c56:	d00d      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x36>
 8000c58:	423c      	tst	r4, r7
 8000c5a:	d00b      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	0692      	lsls	r2, r2, #26
 8000c60:	d402      	bmi.n	8000c68 <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	43ba      	bics	r2, r7
 8000c66:	601a      	str	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000c68:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000c6a:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d019      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x66>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000c72:	e017      	b.n	8000ca4 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000c74:	2702      	movs	r7, #2
 8000c76:	003e      	movs	r6, r7
 8000c78:	4096      	lsls	r6, r2
 8000c7a:	4235      	tst	r5, r6
 8000c7c:	d013      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x68>
 8000c7e:	423c      	tst	r4, r7
 8000c80:	d011      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	0692      	lsls	r2, r2, #26
 8000c86:	d406      	bmi.n	8000c96 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000c88:	240a      	movs	r4, #10
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	43a2      	bics	r2, r4
 8000c8e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000c90:	2201      	movs	r2, #1
 8000c92:	1d83      	adds	r3, r0, #6
 8000c94:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8000c96:	2200      	movs	r2, #0
 8000c98:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c9a:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000c9c:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8000c9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d1e5      	bne.n	8000c70 <HAL_DMA_IRQHandler+0x32>
}
 8000ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000ca6:	2608      	movs	r6, #8
 8000ca8:	0037      	movs	r7, r6
 8000caa:	4097      	lsls	r7, r2
 8000cac:	423d      	tst	r5, r7
 8000cae:	d0f9      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x66>
 8000cb0:	4234      	tst	r4, r6
 8000cb2:	d0f7      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb4:	250e      	movs	r5, #14
 8000cb6:	681c      	ldr	r4, [r3, #0]
 8000cb8:	43ac      	bics	r4, r5
 8000cba:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	001c      	movs	r4, r3
 8000cc0:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8000cc2:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000cc4:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cc6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000cc8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	1d43      	adds	r3, r0, #5
 8000cce:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8000cd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000cd2:	e7e5      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x62>

08000cd4 <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8000cd4:	2300      	movs	r3, #0
{
 8000cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd8:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cda:	680a      	ldr	r2, [r1, #0]
 8000cdc:	0014      	movs	r4, r2
 8000cde:	40dc      	lsrs	r4, r3
 8000ce0:	d101      	bne.n	8000ce6 <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8000ce2:	b005      	add	sp, #20
 8000ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ce6:	2501      	movs	r5, #1
 8000ce8:	0014      	movs	r4, r2
 8000cea:	409d      	lsls	r5, r3
 8000cec:	402c      	ands	r4, r5
 8000cee:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 8000cf0:	422a      	tst	r2, r5
 8000cf2:	d100      	bne.n	8000cf6 <HAL_GPIO_Init+0x22>
 8000cf4:	e090      	b.n	8000e18 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf6:	684a      	ldr	r2, [r1, #4]
 8000cf8:	005f      	lsls	r7, r3, #1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4664      	mov	r4, ip
 8000d00:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d02:	2403      	movs	r4, #3
 8000d04:	40bc      	lsls	r4, r7
 8000d06:	43e4      	mvns	r4, r4
 8000d08:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d0a:	1e54      	subs	r4, r2, #1
 8000d0c:	2c01      	cmp	r4, #1
 8000d0e:	d82e      	bhi.n	8000d6e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000d10:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d12:	9c01      	ldr	r4, [sp, #4]
 8000d14:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d16:	68cc      	ldr	r4, [r1, #12]
 8000d18:	40bc      	lsls	r4, r7
 8000d1a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000d1c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d1e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d20:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d22:	43ac      	bics	r4, r5
 8000d24:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d26:	4664      	mov	r4, ip
 8000d28:	0924      	lsrs	r4, r4, #4
 8000d2a:	4034      	ands	r4, r6
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000d30:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d32:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d34:	9c01      	ldr	r4, [sp, #4]
 8000d36:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	688c      	ldr	r4, [r1, #8]
 8000d3a:	40bc      	lsls	r4, r7
 8000d3c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000d3e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d40:	2a02      	cmp	r2, #2
 8000d42:	d116      	bne.n	8000d72 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d44:	2507      	movs	r5, #7
 8000d46:	260f      	movs	r6, #15
 8000d48:	401d      	ands	r5, r3
 8000d4a:	00ad      	lsls	r5, r5, #2
 8000d4c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8000d4e:	08dc      	lsrs	r4, r3, #3
 8000d50:	00a4      	lsls	r4, r4, #2
 8000d52:	1904      	adds	r4, r0, r4
 8000d54:	9402      	str	r4, [sp, #8]
 8000d56:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d58:	9603      	str	r6, [sp, #12]
 8000d5a:	0026      	movs	r6, r4
 8000d5c:	9c03      	ldr	r4, [sp, #12]
 8000d5e:	43a6      	bics	r6, r4
 8000d60:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d62:	690e      	ldr	r6, [r1, #16]
 8000d64:	40ae      	lsls	r6, r5
 8000d66:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000d68:	9c02      	ldr	r4, [sp, #8]
 8000d6a:	6226      	str	r6, [r4, #32]
 8000d6c:	e001      	b.n	8000d72 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6e:	2a03      	cmp	r2, #3
 8000d70:	d1df      	bne.n	8000d32 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d72:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000d74:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d76:	9d01      	ldr	r5, [sp, #4]
 8000d78:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d7c:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 8000d7e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d80:	4662      	mov	r2, ip
 8000d82:	02a4      	lsls	r4, r4, #10
 8000d84:	4222      	tst	r2, r4
 8000d86:	d047      	beq.n	8000e18 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d88:	2501      	movs	r5, #1
 8000d8a:	4c24      	ldr	r4, [pc, #144]	; (8000e1c <HAL_GPIO_Init+0x148>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d8c:	27a0      	movs	r7, #160	; 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d90:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	432a      	orrs	r2, r5
 8000d94:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d96:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <HAL_GPIO_Init+0x14c>)
 8000d98:	089c      	lsrs	r4, r3, #2
 8000d9a:	00a4      	lsls	r4, r4, #2
 8000d9c:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d9e:	220f      	movs	r2, #15
 8000da0:	3502      	adds	r5, #2
 8000da2:	401d      	ands	r5, r3
 8000da4:	00ad      	lsls	r5, r5, #2
 8000da6:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8000da8:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000daa:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dac:	2200      	movs	r2, #0
 8000dae:	42b8      	cmp	r0, r7
 8000db0:	d008      	beq.n	8000dc4 <HAL_GPIO_Init+0xf0>
 8000db2:	4f1c      	ldr	r7, [pc, #112]	; (8000e24 <HAL_GPIO_Init+0x150>)
 8000db4:	3201      	adds	r2, #1
 8000db6:	42b8      	cmp	r0, r7
 8000db8:	d004      	beq.n	8000dc4 <HAL_GPIO_Init+0xf0>
 8000dba:	4f1b      	ldr	r7, [pc, #108]	; (8000e28 <HAL_GPIO_Init+0x154>)
 8000dbc:	3201      	adds	r2, #1
 8000dbe:	42b8      	cmp	r0, r7
 8000dc0:	d000      	beq.n	8000dc4 <HAL_GPIO_Init+0xf0>
 8000dc2:	3204      	adds	r2, #4
 8000dc4:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dc6:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dc8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dca:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000dcc:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 8000dce:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000dd0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000dd2:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000dd6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dd8:	02ff      	lsls	r7, r7, #11
 8000dda:	d401      	bmi.n	8000de0 <HAL_GPIO_Init+0x10c>
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	0035      	movs	r5, r6
 8000dde:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000de2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000de4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000de6:	9d00      	ldr	r5, [sp, #0]
 8000de8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dea:	02bf      	lsls	r7, r7, #10
 8000dec:	d401      	bmi.n	8000df2 <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 8000dee:	0035      	movs	r5, r6
 8000df0:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000df2:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000df4:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000df6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000df8:	9d00      	ldr	r5, [sp, #0]
 8000dfa:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dfc:	03bf      	lsls	r7, r7, #14
 8000dfe:	d401      	bmi.n	8000e04 <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 8000e00:	0035      	movs	r5, r6
 8000e02:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e04:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000e06:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000e08:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000e0a:	9e00      	ldr	r6, [sp, #0]
 8000e0c:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e0e:	03ff      	lsls	r7, r7, #15
 8000e10:	d401      	bmi.n	8000e16 <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8000e12:	4025      	ands	r5, r4
 8000e14:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000e16:	6016      	str	r6, [r2, #0]
    position++;
 8000e18:	3301      	adds	r3, #1
 8000e1a:	e75e      	b.n	8000cda <HAL_GPIO_Init+0x6>
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000
 8000e24:	50000400 	.word	0x50000400
 8000e28:	50000800 	.word	0x50000800
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e34:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e36:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000e38:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000e3a:	e7fc      	b.n	8000e36 <HAL_GPIO_WritePin+0x6>

08000e3c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e3c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8000e40:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8000e42:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e44:	4022      	ands	r2, r4
 8000e46:	2a08      	cmp	r2, #8
 8000e48:	d031      	beq.n	8000eae <HAL_RCC_GetSysClockFreq+0x72>
 8000e4a:	2a0c      	cmp	r2, #12
 8000e4c:	d009      	beq.n	8000e62 <HAL_RCC_GetSysClockFreq+0x26>
 8000e4e:	2a04      	cmp	r2, #4
 8000e50:	d125      	bne.n	8000e9e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000e52:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000e56:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8000e58:	17c0      	asrs	r0, r0, #31
 8000e5a:	4018      	ands	r0, r3
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_RCC_GetSysClockFreq+0x80>)
 8000e5e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000e62:	02a2      	lsls	r2, r4, #10
 8000e64:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000e66:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000e68:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e6a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000e6c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e6e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000e70:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e72:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000e74:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e76:	4211      	tst	r1, r2
 8000e78:	d009      	beq.n	8000e8e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0x88>)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f7ff fa02 	bl	8000288 <__aeabi_lmul>
 8000e84:	0022      	movs	r2, r4
 8000e86:	2300      	movs	r3, #0
 8000e88:	f7ff f9de 	bl	8000248 <__aeabi_uldivmod>
 8000e8c:	e7e8      	b.n	8000e60 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2310      	movs	r3, #16
 8000e92:	421a      	tst	r2, r3
 8000e94:	d001      	beq.n	8000e9a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8000e96:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000e98:	e7f0      	b.n	8000e7c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_RCC_GetSysClockFreq+0x80>)
 8000e9c:	e7ee      	b.n	8000e7c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000e9e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000ea0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000ea2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000ea4:	041b      	lsls	r3, r3, #16
 8000ea6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4098      	lsls	r0, r3
      break;
 8000eac:	e7d8      	b.n	8000e60 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0x88>)
 8000eb0:	e7d6      	b.n	8000e60 <HAL_RCC_GetSysClockFreq+0x24>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	ff48e500 	.word	0xff48e500
 8000ebc:	00f42400 	.word	0x00f42400
 8000ec0:	08002714 	.word	0x08002714
 8000ec4:	007a1200 	.word	0x007a1200
 8000ec8:	003d0900 	.word	0x003d0900

08000ecc <HAL_RCC_OscConfig>:
{
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	0005      	movs	r5, r0
 8000ed0:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d055      	beq.n	8000f82 <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	4cc0      	ldr	r4, [pc, #768]	; (80011dc <HAL_RCC_OscConfig+0x310>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000edc:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ede:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ee0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	025b      	lsls	r3, r3, #9
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	07d2      	lsls	r2, r2, #31
 8000eec:	d43d      	bmi.n	8000f6a <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	079b      	lsls	r3, r3, #30
 8000ef2:	d500      	bpl.n	8000ef6 <HAL_RCC_OscConfig+0x2a>
 8000ef4:	e086      	b.n	8001004 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	06db      	lsls	r3, r3, #27
 8000efa:	d528      	bpl.n	8000f4e <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d000      	beq.n	8000f02 <HAL_RCC_OscConfig+0x36>
 8000f00:	e0df      	b.n	80010c2 <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	059b      	lsls	r3, r3, #22
 8000f06:	d502      	bpl.n	8000f0e <HAL_RCC_OscConfig+0x42>
 8000f08:	69ab      	ldr	r3, [r5, #24]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d039      	beq.n	8000f82 <HAL_RCC_OscConfig+0xb6>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f0e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f10:	6862      	ldr	r2, [r4, #4]
 8000f12:	49b3      	ldr	r1, [pc, #716]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8000f14:	6a2b      	ldr	r3, [r5, #32]
 8000f16:	400a      	ands	r2, r1
 8000f18:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f1a:	0b5b      	lsrs	r3, r3, #13
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	023f      	lsls	r7, r7, #8
 8000f20:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f22:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f24:	6861      	ldr	r1, [r4, #4]
 8000f26:	69ea      	ldr	r2, [r5, #28]
 8000f28:	0209      	lsls	r1, r1, #8
 8000f2a:	0a09      	lsrs	r1, r1, #8
 8000f2c:	0612      	lsls	r2, r2, #24
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f32:	68e1      	ldr	r1, [r4, #12]
 8000f34:	48ab      	ldr	r0, [pc, #684]	; (80011e4 <HAL_RCC_OscConfig+0x318>)
 8000f36:	060b      	lsls	r3, r1, #24
 8000f38:	0f1b      	lsrs	r3, r3, #28
 8000f3a:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f3c:	4aaa      	ldr	r2, [pc, #680]	; (80011e8 <HAL_RCC_OscConfig+0x31c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f3e:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8000f40:	4baa      	ldr	r3, [pc, #680]	; (80011ec <HAL_RCC_OscConfig+0x320>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f42:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	f7ff fd45 	bl	80009d4 <HAL_InitTick>
        if(status != HAL_OK)
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d130      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f4e:	682b      	ldr	r3, [r5, #0]
 8000f50:	071b      	lsls	r3, r3, #28
 8000f52:	d500      	bpl.n	8000f56 <HAL_RCC_OscConfig+0x8a>
 8000f54:	e0ec      	b.n	8001130 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f56:	682b      	ldr	r3, [r5, #0]
 8000f58:	075b      	lsls	r3, r3, #29
 8000f5a:	d500      	bpl.n	8000f5e <HAL_RCC_OscConfig+0x92>
 8000f5c:	e10e      	b.n	800117c <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d000      	beq.n	8000f66 <HAL_RCC_OscConfig+0x9a>
 8000f64:	e193      	b.n	800128e <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8000f66:	2000      	movs	r0, #0
 8000f68:	e022      	b.n	8000fb0 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f6a:	2e08      	cmp	r6, #8
 8000f6c:	d003      	beq.n	8000f76 <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f6e:	2e0c      	cmp	r6, #12
 8000f70:	d109      	bne.n	8000f86 <HAL_RCC_OscConfig+0xba>
 8000f72:	2f00      	cmp	r7, #0
 8000f74:	d007      	beq.n	8000f86 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	039b      	lsls	r3, r3, #14
 8000f7a:	d5b8      	bpl.n	8000eee <HAL_RCC_OscConfig+0x22>
 8000f7c:	686b      	ldr	r3, [r5, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1b5      	bne.n	8000eee <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8000f82:	2001      	movs	r0, #1
 8000f84:	e014      	b.n	8000fb0 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f86:	686a      	ldr	r2, [r5, #4]
 8000f88:	428a      	cmp	r2, r1
 8000f8a:	d113      	bne.n	8000fb4 <HAL_RCC_OscConfig+0xe8>
 8000f8c:	6822      	ldr	r2, [r4, #0]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f92:	f7ff fd63 	bl	8000a5c <HAL_GetTick>
 8000f96:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	0292      	lsls	r2, r2, #10
 8000f9e:	4213      	tst	r3, r2
 8000fa0:	d1a5      	bne.n	8000eee <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa2:	f7ff fd5b 	bl	8000a5c <HAL_GetTick>
 8000fa6:	9b00      	ldr	r3, [sp, #0]
 8000fa8:	1ac0      	subs	r0, r0, r3
 8000faa:	2864      	cmp	r0, #100	; 0x64
 8000fac:	d9f4      	bls.n	8000f98 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000fae:	2003      	movs	r0, #3
}
 8000fb0:	b005      	add	sp, #20
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb4:	21a0      	movs	r1, #160	; 0xa0
 8000fb6:	02c9      	lsls	r1, r1, #11
 8000fb8:	428a      	cmp	r2, r1
 8000fba:	d105      	bne.n	8000fc8 <HAL_RCC_OscConfig+0xfc>
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	6821      	ldr	r1, [r4, #0]
 8000fc0:	02d2      	lsls	r2, r2, #11
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	6022      	str	r2, [r4, #0]
 8000fc6:	e7e1      	b.n	8000f8c <HAL_RCC_OscConfig+0xc0>
 8000fc8:	6821      	ldr	r1, [r4, #0]
 8000fca:	4889      	ldr	r0, [pc, #548]	; (80011f0 <HAL_RCC_OscConfig+0x324>)
 8000fcc:	4001      	ands	r1, r0
 8000fce:	6021      	str	r1, [r4, #0]
 8000fd0:	6821      	ldr	r1, [r4, #0]
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	9303      	str	r3, [sp, #12]
 8000fd6:	9b03      	ldr	r3, [sp, #12]
 8000fd8:	4986      	ldr	r1, [pc, #536]	; (80011f4 <HAL_RCC_OscConfig+0x328>)
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	400b      	ands	r3, r1
 8000fde:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d1d6      	bne.n	8000f92 <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fd3a 	bl	8000a5c <HAL_GetTick>
 8000fe8:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	0292      	lsls	r2, r2, #10
 8000ff0:	4213      	tst	r3, r2
 8000ff2:	d100      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x12a>
 8000ff4:	e77b      	b.n	8000eee <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fd31 	bl	8000a5c <HAL_GetTick>
 8000ffa:	9b00      	ldr	r3, [sp, #0]
 8000ffc:	1ac0      	subs	r0, r0, r3
 8000ffe:	2864      	cmp	r0, #100	; 0x64
 8001000:	d9f3      	bls.n	8000fea <HAL_RCC_OscConfig+0x11e>
 8001002:	e7d4      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001004:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001006:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001008:	4213      	tst	r3, r2
 800100a:	d003      	beq.n	8001014 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800100c:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800100e:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001010:	4311      	orrs	r1, r2
 8001012:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001014:	2e04      	cmp	r6, #4
 8001016:	d003      	beq.n	8001020 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001018:	2e0c      	cmp	r6, #12
 800101a:	d124      	bne.n	8001066 <HAL_RCC_OscConfig+0x19a>
 800101c:	2f00      	cmp	r7, #0
 800101e:	d122      	bne.n	8001066 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001020:	6822      	ldr	r2, [r4, #0]
 8001022:	0752      	lsls	r2, r2, #29
 8001024:	d501      	bpl.n	800102a <HAL_RCC_OscConfig+0x15e>
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0ab      	beq.n	8000f82 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102a:	6861      	ldr	r1, [r4, #4]
 800102c:	692a      	ldr	r2, [r5, #16]
 800102e:	4872      	ldr	r0, [pc, #456]	; (80011f8 <HAL_RCC_OscConfig+0x32c>)
 8001030:	0212      	lsls	r2, r2, #8
 8001032:	4001      	ands	r1, r0
 8001034:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001036:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800103a:	6822      	ldr	r2, [r4, #0]
 800103c:	438a      	bics	r2, r1
 800103e:	4313      	orrs	r3, r2
 8001040:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001042:	f7ff fefb 	bl	8000e3c <HAL_RCC_GetSysClockFreq>
 8001046:	68e3      	ldr	r3, [r4, #12]
 8001048:	4a66      	ldr	r2, [pc, #408]	; (80011e4 <HAL_RCC_OscConfig+0x318>)
 800104a:	061b      	lsls	r3, r3, #24
 800104c:	0f1b      	lsrs	r3, r3, #28
 800104e:	5cd3      	ldrb	r3, [r2, r3]
 8001050:	4965      	ldr	r1, [pc, #404]	; (80011e8 <HAL_RCC_OscConfig+0x31c>)
 8001052:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8001054:	4b65      	ldr	r3, [pc, #404]	; (80011ec <HAL_RCC_OscConfig+0x320>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001056:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f7ff fcbb 	bl	80009d4 <HAL_InitTick>
      if(status != HAL_OK)
 800105e:	2800      	cmp	r0, #0
 8001060:	d100      	bne.n	8001064 <HAL_RCC_OscConfig+0x198>
 8001062:	e748      	b.n	8000ef6 <HAL_RCC_OscConfig+0x2a>
 8001064:	e7a4      	b.n	8000fb0 <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 8001066:	2b00      	cmp	r3, #0
 8001068:	d019      	beq.n	800109e <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800106a:	2109      	movs	r1, #9
 800106c:	6822      	ldr	r2, [r4, #0]
 800106e:	438a      	bics	r2, r1
 8001070:	4313      	orrs	r3, r2
 8001072:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001074:	f7ff fcf2 	bl	8000a5c <HAL_GetTick>
 8001078:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800107a:	2204      	movs	r2, #4
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	4213      	tst	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	6862      	ldr	r2, [r4, #4]
 8001084:	692b      	ldr	r3, [r5, #16]
 8001086:	495c      	ldr	r1, [pc, #368]	; (80011f8 <HAL_RCC_OscConfig+0x32c>)
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	400a      	ands	r2, r1
 800108c:	4313      	orrs	r3, r2
 800108e:	6063      	str	r3, [r4, #4]
 8001090:	e731      	b.n	8000ef6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fce3 	bl	8000a5c <HAL_GetTick>
 8001096:	1bc0      	subs	r0, r0, r7
 8001098:	2802      	cmp	r0, #2
 800109a:	d9ee      	bls.n	800107a <HAL_RCC_OscConfig+0x1ae>
 800109c:	e787      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 800109e:	2201      	movs	r2, #1
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	4393      	bics	r3, r2
 80010a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010a6:	f7ff fcd9 	bl	8000a5c <HAL_GetTick>
 80010aa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ac:	2204      	movs	r2, #4
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	4213      	tst	r3, r2
 80010b2:	d100      	bne.n	80010b6 <HAL_RCC_OscConfig+0x1ea>
 80010b4:	e71f      	b.n	8000ef6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fcd1 	bl	8000a5c <HAL_GetTick>
 80010ba:	1bc0      	subs	r0, r0, r7
 80010bc:	2802      	cmp	r0, #2
 80010be:	d9f5      	bls.n	80010ac <HAL_RCC_OscConfig+0x1e0>
 80010c0:	e775      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010c2:	69ab      	ldr	r3, [r5, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d020      	beq.n	800110a <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	6822      	ldr	r2, [r4, #0]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4313      	orrs	r3, r2
 80010d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010d2:	f7ff fcc3 	bl	8000a5c <HAL_GetTick>
 80010d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	4213      	tst	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e2:	6863      	ldr	r3, [r4, #4]
 80010e4:	4a3e      	ldr	r2, [pc, #248]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	6a2a      	ldr	r2, [r5, #32]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ee:	6862      	ldr	r2, [r4, #4]
 80010f0:	69eb      	ldr	r3, [r5, #28]
 80010f2:	0212      	lsls	r2, r2, #8
 80010f4:	061b      	lsls	r3, r3, #24
 80010f6:	0a12      	lsrs	r2, r2, #8
 80010f8:	4313      	orrs	r3, r2
 80010fa:	6063      	str	r3, [r4, #4]
 80010fc:	e727      	b.n	8000f4e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010fe:	f7ff fcad 	bl	8000a5c <HAL_GetTick>
 8001102:	1bc0      	subs	r0, r0, r7
 8001104:	2802      	cmp	r0, #2
 8001106:	d9e7      	bls.n	80010d8 <HAL_RCC_OscConfig+0x20c>
 8001108:	e751      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	4a3b      	ldr	r2, [pc, #236]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 800110e:	4013      	ands	r3, r2
 8001110:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001112:	f7ff fca3 	bl	8000a5c <HAL_GetTick>
 8001116:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4213      	tst	r3, r2
 8001120:	d100      	bne.n	8001124 <HAL_RCC_OscConfig+0x258>
 8001122:	e714      	b.n	8000f4e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001124:	f7ff fc9a 	bl	8000a5c <HAL_GetTick>
 8001128:	1bc0      	subs	r0, r0, r7
 800112a:	2802      	cmp	r0, #2
 800112c:	d9f4      	bls.n	8001118 <HAL_RCC_OscConfig+0x24c>
 800112e:	e73e      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001130:	696a      	ldr	r2, [r5, #20]
 8001132:	2301      	movs	r3, #1
 8001134:	2a00      	cmp	r2, #0
 8001136:	d010      	beq.n	800115a <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 8001138:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800113a:	4313      	orrs	r3, r2
 800113c:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800113e:	f7ff fc8d 	bl	8000a5c <HAL_GetTick>
 8001142:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001144:	2202      	movs	r2, #2
 8001146:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001148:	4213      	tst	r3, r2
 800114a:	d000      	beq.n	800114e <HAL_RCC_OscConfig+0x282>
 800114c:	e703      	b.n	8000f56 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff fc85 	bl	8000a5c <HAL_GetTick>
 8001152:	1bc0      	subs	r0, r0, r7
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f5      	bls.n	8001144 <HAL_RCC_OscConfig+0x278>
 8001158:	e729      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 800115a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800115c:	439a      	bics	r2, r3
 800115e:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001160:	f7ff fc7c 	bl	8000a5c <HAL_GetTick>
 8001164:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001166:	2202      	movs	r2, #2
 8001168:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800116a:	4213      	tst	r3, r2
 800116c:	d100      	bne.n	8001170 <HAL_RCC_OscConfig+0x2a4>
 800116e:	e6f2      	b.n	8000f56 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fc74 	bl	8000a5c <HAL_GetTick>
 8001174:	1bc0      	subs	r0, r0, r7
 8001176:	2802      	cmp	r0, #2
 8001178:	d9f5      	bls.n	8001166 <HAL_RCC_OscConfig+0x29a>
 800117a:	e718      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800117e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001180:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001182:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001184:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001186:	421a      	tst	r2, r3
 8001188:	d104      	bne.n	8001194 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800118c:	4313      	orrs	r3, r2
 800118e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001190:	2301      	movs	r3, #1
 8001192:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	4f1a      	ldr	r7, [pc, #104]	; (8001200 <HAL_RCC_OscConfig+0x334>)
 8001198:	0052      	lsls	r2, r2, #1
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	4213      	tst	r3, r2
 800119e:	d008      	beq.n	80011b2 <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	68ab      	ldr	r3, [r5, #8]
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12c      	bne.n	8001204 <HAL_RCC_OscConfig+0x338>
 80011aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80011ac:	4313      	orrs	r3, r2
 80011ae:	6523      	str	r3, [r4, #80]	; 0x50
 80011b0:	e04d      	b.n	800124e <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	0052      	lsls	r2, r2, #1
 80011b8:	4313      	orrs	r3, r2
 80011ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80011bc:	f7ff fc4e 	bl	8000a5c <HAL_GetTick>
 80011c0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	0052      	lsls	r2, r2, #1
 80011c8:	4213      	tst	r3, r2
 80011ca:	d1e9      	bne.n	80011a0 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011cc:	f7ff fc46 	bl	8000a5c <HAL_GetTick>
 80011d0:	9b01      	ldr	r3, [sp, #4]
 80011d2:	1ac0      	subs	r0, r0, r3
 80011d4:	2864      	cmp	r0, #100	; 0x64
 80011d6:	d9f4      	bls.n	80011c2 <HAL_RCC_OscConfig+0x2f6>
 80011d8:	e6e9      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40021000 	.word	0x40021000
 80011e0:	ffff1fff 	.word	0xffff1fff
 80011e4:	080026fc 	.word	0x080026fc
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000008 	.word	0x20000008
 80011f0:	fffeffff 	.word	0xfffeffff
 80011f4:	fffbffff 	.word	0xfffbffff
 80011f8:	ffffe0ff 	.word	0xffffe0ff
 80011fc:	fffffeff 	.word	0xfffffeff
 8001200:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001204:	2b00      	cmp	r3, #0
 8001206:	d116      	bne.n	8001236 <HAL_RCC_OscConfig+0x36a>
 8001208:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800120a:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_RCC_OscConfig+0x484>)
 800120c:	4013      	ands	r3, r2
 800120e:	6523      	str	r3, [r4, #80]	; 0x50
 8001210:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001212:	4a50      	ldr	r2, [pc, #320]	; (8001354 <HAL_RCC_OscConfig+0x488>)
 8001214:	4013      	ands	r3, r2
 8001216:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001218:	f7ff fc20 	bl	8000a5c <HAL_GetTick>
 800121c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4213      	tst	r3, r2
 8001226:	d01a      	beq.n	800125e <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001228:	f7ff fc18 	bl	8000a5c <HAL_GetTick>
 800122c:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_RCC_OscConfig+0x48c>)
 800122e:	1bc0      	subs	r0, r0, r7
 8001230:	4298      	cmp	r0, r3
 8001232:	d9f4      	bls.n	800121e <HAL_RCC_OscConfig+0x352>
 8001234:	e6bb      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001236:	21a0      	movs	r1, #160	; 0xa0
 8001238:	00c9      	lsls	r1, r1, #3
 800123a:	428b      	cmp	r3, r1
 800123c:	d118      	bne.n	8001270 <HAL_RCC_OscConfig+0x3a4>
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	430b      	orrs	r3, r1
 8001246:	6523      	str	r3, [r4, #80]	; 0x50
 8001248:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800124a:	431a      	orrs	r2, r3
 800124c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800124e:	f7ff fc05 	bl	8000a5c <HAL_GetTick>
 8001252:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	4213      	tst	r3, r2
 800125c:	d010      	beq.n	8001280 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 800125e:	9b00      	ldr	r3, [sp, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d000      	beq.n	8001266 <HAL_RCC_OscConfig+0x39a>
 8001264:	e67b      	b.n	8000f5e <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001266:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001268:	4a3c      	ldr	r2, [pc, #240]	; (800135c <HAL_RCC_OscConfig+0x490>)
 800126a:	4013      	ands	r3, r2
 800126c:	63a3      	str	r3, [r4, #56]	; 0x38
 800126e:	e676      	b.n	8000f5e <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001270:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001272:	4a37      	ldr	r2, [pc, #220]	; (8001350 <HAL_RCC_OscConfig+0x484>)
 8001274:	4013      	ands	r3, r2
 8001276:	6523      	str	r3, [r4, #80]	; 0x50
 8001278:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800127a:	4a36      	ldr	r2, [pc, #216]	; (8001354 <HAL_RCC_OscConfig+0x488>)
 800127c:	4013      	ands	r3, r2
 800127e:	e796      	b.n	80011ae <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f7ff fbec 	bl	8000a5c <HAL_GetTick>
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <HAL_RCC_OscConfig+0x48c>)
 8001286:	1bc0      	subs	r0, r0, r7
 8001288:	4298      	cmp	r0, r3
 800128a:	d9e3      	bls.n	8001254 <HAL_RCC_OscConfig+0x388>
 800128c:	e68f      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800128e:	2e0c      	cmp	r6, #12
 8001290:	d043      	beq.n	800131a <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001292:	4a33      	ldr	r2, [pc, #204]	; (8001360 <HAL_RCC_OscConfig+0x494>)
 8001294:	2b02      	cmp	r3, #2
 8001296:	d12e      	bne.n	80012f6 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8001298:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800129a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800129c:	4013      	ands	r3, r2
 800129e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012a0:	f7ff fbdc 	bl	8000a5c <HAL_GetTick>
 80012a4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012a6:	04bf      	lsls	r7, r7, #18
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	423b      	tst	r3, r7
 80012ac:	d11d      	bne.n	80012ea <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ae:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80012b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80012b2:	68e2      	ldr	r2, [r4, #12]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	492b      	ldr	r1, [pc, #172]	; (8001364 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012b8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ba:	400a      	ands	r2, r1
 80012bc:	4313      	orrs	r3, r2
 80012be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012c0:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	6822      	ldr	r2, [r4, #0]
 80012ca:	045b      	lsls	r3, r3, #17
 80012cc:	4313      	orrs	r3, r2
 80012ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012d0:	f7ff fbc4 	bl	8000a5c <HAL_GetTick>
 80012d4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	4233      	tst	r3, r6
 80012da:	d000      	beq.n	80012de <HAL_RCC_OscConfig+0x412>
 80012dc:	e643      	b.n	8000f66 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012de:	f7ff fbbd 	bl	8000a5c <HAL_GetTick>
 80012e2:	1b40      	subs	r0, r0, r5
 80012e4:	2802      	cmp	r0, #2
 80012e6:	d9f6      	bls.n	80012d6 <HAL_RCC_OscConfig+0x40a>
 80012e8:	e661      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff fbb7 	bl	8000a5c <HAL_GetTick>
 80012ee:	1b80      	subs	r0, r0, r6
 80012f0:	2802      	cmp	r0, #2
 80012f2:	d9d9      	bls.n	80012a8 <HAL_RCC_OscConfig+0x3dc>
 80012f4:	e65b      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 80012f6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012f8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4013      	ands	r3, r2
 80012fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012fe:	f7ff fbad 	bl	8000a5c <HAL_GetTick>
 8001302:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001304:	04b6      	lsls	r6, r6, #18
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	4233      	tst	r3, r6
 800130a:	d100      	bne.n	800130e <HAL_RCC_OscConfig+0x442>
 800130c:	e62b      	b.n	8000f66 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff fba5 	bl	8000a5c <HAL_GetTick>
 8001312:	1b40      	subs	r0, r0, r5
 8001314:	2802      	cmp	r0, #2
 8001316:	d9f6      	bls.n	8001306 <HAL_RCC_OscConfig+0x43a>
 8001318:	e649      	b.n	8000fae <HAL_RCC_OscConfig+0xe2>
        return HAL_ERROR;
 800131a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800131c:	2b01      	cmp	r3, #1
 800131e:	d100      	bne.n	8001322 <HAL_RCC_OscConfig+0x456>
 8001320:	e646      	b.n	8000fb0 <HAL_RCC_OscConfig+0xe4>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001324:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001326:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001328:	0252      	lsls	r2, r2, #9
 800132a:	401a      	ands	r2, r3
 800132c:	428a      	cmp	r2, r1
 800132e:	d000      	beq.n	8001332 <HAL_RCC_OscConfig+0x466>
 8001330:	e627      	b.n	8000f82 <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001332:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001334:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001336:	0392      	lsls	r2, r2, #14
 8001338:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133a:	428a      	cmp	r2, r1
 800133c:	d000      	beq.n	8001340 <HAL_RCC_OscConfig+0x474>
 800133e:	e620      	b.n	8000f82 <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001340:	22c0      	movs	r2, #192	; 0xc0
 8001342:	0412      	lsls	r2, r2, #16
 8001344:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001346:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001348:	4293      	cmp	r3, r2
 800134a:	d100      	bne.n	800134e <HAL_RCC_OscConfig+0x482>
 800134c:	e60b      	b.n	8000f66 <HAL_RCC_OscConfig+0x9a>
 800134e:	e618      	b.n	8000f82 <HAL_RCC_OscConfig+0xb6>
 8001350:	fffffeff 	.word	0xfffffeff
 8001354:	fffffbff 	.word	0xfffffbff
 8001358:	00001388 	.word	0x00001388
 800135c:	efffffff 	.word	0xefffffff
 8001360:	feffffff 	.word	0xfeffffff
 8001364:	ff02ffff 	.word	0xff02ffff

08001368 <HAL_RCC_ClockConfig>:
{
 8001368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800136a:	1e04      	subs	r4, r0, #0
 800136c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800136e:	d101      	bne.n	8001374 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001370:	2001      	movs	r0, #1
}
 8001372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001374:	2501      	movs	r5, #1
 8001376:	4e5b      	ldr	r6, [pc, #364]	; (80014e4 <HAL_RCC_ClockConfig+0x17c>)
 8001378:	9a01      	ldr	r2, [sp, #4]
 800137a:	6833      	ldr	r3, [r6, #0]
 800137c:	402b      	ands	r3, r5
 800137e:	4293      	cmp	r3, r2
 8001380:	d331      	bcc.n	80013e6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001382:	6822      	ldr	r2, [r4, #0]
 8001384:	0793      	lsls	r3, r2, #30
 8001386:	d443      	bmi.n	8001410 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001388:	07d2      	lsls	r2, r2, #31
 800138a:	d449      	bmi.n	8001420 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800138c:	2501      	movs	r5, #1
 800138e:	6833      	ldr	r3, [r6, #0]
 8001390:	9a01      	ldr	r2, [sp, #4]
 8001392:	402b      	ands	r3, r5
 8001394:	4293      	cmp	r3, r2
 8001396:	d909      	bls.n	80013ac <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001398:	6833      	ldr	r3, [r6, #0]
 800139a:	43ab      	bics	r3, r5
 800139c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800139e:	f7ff fb5d 	bl	8000a5c <HAL_GetTick>
 80013a2:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a4:	6833      	ldr	r3, [r6, #0]
 80013a6:	422b      	tst	r3, r5
 80013a8:	d000      	beq.n	80013ac <HAL_RCC_ClockConfig+0x44>
 80013aa:	e08c      	b.n	80014c6 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	6822      	ldr	r2, [r4, #0]
 80013ae:	4d4e      	ldr	r5, [pc, #312]	; (80014e8 <HAL_RCC_ClockConfig+0x180>)
 80013b0:	0753      	lsls	r3, r2, #29
 80013b2:	d500      	bpl.n	80013b6 <HAL_RCC_ClockConfig+0x4e>
 80013b4:	e08f      	b.n	80014d6 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b6:	0712      	lsls	r2, r2, #28
 80013b8:	d506      	bpl.n	80013c8 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ba:	68ea      	ldr	r2, [r5, #12]
 80013bc:	6923      	ldr	r3, [r4, #16]
 80013be:	494b      	ldr	r1, [pc, #300]	; (80014ec <HAL_RCC_ClockConfig+0x184>)
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	400a      	ands	r2, r1
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013c8:	f7ff fd38 	bl	8000e3c <HAL_RCC_GetSysClockFreq>
 80013cc:	68eb      	ldr	r3, [r5, #12]
 80013ce:	4a48      	ldr	r2, [pc, #288]	; (80014f0 <HAL_RCC_ClockConfig+0x188>)
 80013d0:	061b      	lsls	r3, r3, #24
 80013d2:	0f1b      	lsrs	r3, r3, #28
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
 80013d6:	4947      	ldr	r1, [pc, #284]	; (80014f4 <HAL_RCC_ClockConfig+0x18c>)
 80013d8:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013dc:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f7ff faf8 	bl	80009d4 <HAL_InitTick>
  if(status != HAL_OK)
 80013e4:	e7c5      	b.n	8001372 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e6:	6833      	ldr	r3, [r6, #0]
 80013e8:	9a01      	ldr	r2, [sp, #4]
 80013ea:	43ab      	bics	r3, r5
 80013ec:	4313      	orrs	r3, r2
 80013ee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80013f0:	f7ff fb34 	bl	8000a5c <HAL_GetTick>
 80013f4:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f6:	6833      	ldr	r3, [r6, #0]
 80013f8:	9a01      	ldr	r2, [sp, #4]
 80013fa:	402b      	ands	r3, r5
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d0c0      	beq.n	8001382 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001400:	f7ff fb2c 	bl	8000a5c <HAL_GetTick>
 8001404:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_RCC_ClockConfig+0x194>)
 8001406:	1bc0      	subs	r0, r0, r7
 8001408:	4298      	cmp	r0, r3
 800140a:	d9f4      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800140c:	2003      	movs	r0, #3
 800140e:	e7b0      	b.n	8001372 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	20f0      	movs	r0, #240	; 0xf0
 8001412:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_RCC_ClockConfig+0x180>)
 8001414:	68cb      	ldr	r3, [r1, #12]
 8001416:	4383      	bics	r3, r0
 8001418:	68a0      	ldr	r0, [r4, #8]
 800141a:	4303      	orrs	r3, r0
 800141c:	60cb      	str	r3, [r1, #12]
 800141e:	e7b3      	b.n	8001388 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001420:	4d31      	ldr	r5, [pc, #196]	; (80014e8 <HAL_RCC_ClockConfig+0x180>)
 8001422:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001424:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001426:	2a02      	cmp	r2, #2
 8001428:	d118      	bne.n	800145c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800142a:	039b      	lsls	r3, r3, #14
 800142c:	d5a0      	bpl.n	8001370 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142e:	2103      	movs	r1, #3
 8001430:	68eb      	ldr	r3, [r5, #12]
 8001432:	438b      	bics	r3, r1
 8001434:	4313      	orrs	r3, r2
 8001436:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001438:	f7ff fb10 	bl	8000a5c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800143e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001440:	2b02      	cmp	r3, #2
 8001442:	d118      	bne.n	8001476 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001444:	220c      	movs	r2, #12
 8001446:	68eb      	ldr	r3, [r5, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	2b08      	cmp	r3, #8
 800144c:	d09e      	beq.n	800138c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144e:	f7ff fb05 	bl	8000a5c <HAL_GetTick>
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_RCC_ClockConfig+0x194>)
 8001454:	1bc0      	subs	r0, r0, r7
 8001456:	4298      	cmp	r0, r3
 8001458:	d9f4      	bls.n	8001444 <HAL_RCC_ClockConfig+0xdc>
 800145a:	e7d7      	b.n	800140c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145c:	2a03      	cmp	r2, #3
 800145e:	d102      	bne.n	8001466 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	d4e4      	bmi.n	800142e <HAL_RCC_ClockConfig+0xc6>
 8001464:	e784      	b.n	8001370 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001466:	2a01      	cmp	r2, #1
 8001468:	d102      	bne.n	8001470 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800146a:	075b      	lsls	r3, r3, #29
 800146c:	d4df      	bmi.n	800142e <HAL_RCC_ClockConfig+0xc6>
 800146e:	e77f      	b.n	8001370 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001470:	059b      	lsls	r3, r3, #22
 8001472:	d4dc      	bmi.n	800142e <HAL_RCC_ClockConfig+0xc6>
 8001474:	e77c      	b.n	8001370 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001476:	2b03      	cmp	r3, #3
 8001478:	d10b      	bne.n	8001492 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800147a:	220c      	movs	r2, #12
 800147c:	68eb      	ldr	r3, [r5, #12]
 800147e:	4013      	ands	r3, r2
 8001480:	4293      	cmp	r3, r2
 8001482:	d083      	beq.n	800138c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001484:	f7ff faea 	bl	8000a5c <HAL_GetTick>
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_RCC_ClockConfig+0x194>)
 800148a:	1bc0      	subs	r0, r0, r7
 800148c:	4298      	cmp	r0, r3
 800148e:	d9f4      	bls.n	800147a <HAL_RCC_ClockConfig+0x112>
 8001490:	e7bc      	b.n	800140c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001492:	2b01      	cmp	r3, #1
 8001494:	d011      	beq.n	80014ba <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001496:	220c      	movs	r2, #12
 8001498:	68eb      	ldr	r3, [r5, #12]
 800149a:	4213      	tst	r3, r2
 800149c:	d100      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x138>
 800149e:	e775      	b.n	800138c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f7ff fadc 	bl	8000a5c <HAL_GetTick>
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_RCC_ClockConfig+0x194>)
 80014a6:	1bc0      	subs	r0, r0, r7
 80014a8:	4298      	cmp	r0, r3
 80014aa:	d9f4      	bls.n	8001496 <HAL_RCC_ClockConfig+0x12e>
 80014ac:	e7ae      	b.n	800140c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ae:	f7ff fad5 	bl	8000a5c <HAL_GetTick>
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_RCC_ClockConfig+0x194>)
 80014b4:	1bc0      	subs	r0, r0, r7
 80014b6:	4298      	cmp	r0, r3
 80014b8:	d8a8      	bhi.n	800140c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ba:	220c      	movs	r2, #12
 80014bc:	68eb      	ldr	r3, [r5, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d1f4      	bne.n	80014ae <HAL_RCC_ClockConfig+0x146>
 80014c4:	e762      	b.n	800138c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c6:	f7ff fac9 	bl	8000a5c <HAL_GetTick>
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_RCC_ClockConfig+0x194>)
 80014cc:	1bc0      	subs	r0, r0, r7
 80014ce:	4298      	cmp	r0, r3
 80014d0:	d800      	bhi.n	80014d4 <HAL_RCC_ClockConfig+0x16c>
 80014d2:	e767      	b.n	80013a4 <HAL_RCC_ClockConfig+0x3c>
 80014d4:	e79a      	b.n	800140c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d6:	68eb      	ldr	r3, [r5, #12]
 80014d8:	4909      	ldr	r1, [pc, #36]	; (8001500 <HAL_RCC_ClockConfig+0x198>)
 80014da:	400b      	ands	r3, r1
 80014dc:	68e1      	ldr	r1, [r4, #12]
 80014de:	430b      	orrs	r3, r1
 80014e0:	60eb      	str	r3, [r5, #12]
 80014e2:	e768      	b.n	80013b6 <HAL_RCC_ClockConfig+0x4e>
 80014e4:	40022000 	.word	0x40022000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	ffffc7ff 	.word	0xffffc7ff
 80014f0:	080026fc 	.word	0x080026fc
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000008 	.word	0x20000008
 80014fc:	00001388 	.word	0x00001388
 8001500:	fffff8ff 	.word	0xfffff8ff

08001504 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	4905      	ldr	r1, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800150c:	055b      	lsls	r3, r3, #21
 800150e:	0f5b      	lsrs	r3, r3, #29
 8001510:	5ccb      	ldrb	r3, [r1, r3]
 8001512:	6810      	ldr	r0, [r2, #0]
 8001514:	40d8      	lsrs	r0, r3
}
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000
 800151c:	20000000 	.word	0x20000000
 8001520:	0800270c 	.word	0x0800270c

08001524 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	4905      	ldr	r1, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800152c:	049b      	lsls	r3, r3, #18
 800152e:	0f5b      	lsrs	r3, r3, #29
 8001530:	5ccb      	ldrb	r3, [r1, r3]
 8001532:	6810      	ldr	r0, [r2, #0]
 8001534:	40d8      	lsrs	r0, r3
}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000
 800153c:	20000000 	.word	0x20000000
 8001540:	0800270c 	.word	0x0800270c

08001544 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001544:	6803      	ldr	r3, [r0, #0]
{
 8001546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001548:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800154a:	069b      	lsls	r3, r3, #26
 800154c:	d52b      	bpl.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8001550:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4c51      	ldr	r4, [pc, #324]	; (8001698 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001554:	055b      	lsls	r3, r3, #21
 8001556:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8001558:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	421a      	tst	r2, r3
 800155c:	d104      	bne.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001560:	4313      	orrs	r3, r2
 8001562:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001564:	2301      	movs	r3, #1
 8001566:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	2780      	movs	r7, #128	; 0x80
 800156a:	4e4c      	ldr	r6, [pc, #304]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800156c:	007f      	lsls	r7, r7, #1
 800156e:	6833      	ldr	r3, [r6, #0]
 8001570:	423b      	tst	r3, r7
 8001572:	d03f      	beq.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001574:	20c0      	movs	r0, #192	; 0xc0
 8001576:	22c0      	movs	r2, #192	; 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001578:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800157a:	686b      	ldr	r3, [r5, #4]
 800157c:	0380      	lsls	r0, r0, #14
 800157e:	4059      	eors	r1, r3
 8001580:	0292      	lsls	r2, r2, #10
 8001582:	4201      	tst	r1, r0
 8001584:	d147      	bne.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001586:	6d20      	ldr	r0, [r4, #80]	; 0x50

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001588:	6829      	ldr	r1, [r5, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800158a:	0006      	movs	r6, r0
 800158c:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800158e:	4210      	tst	r0, r2
 8001590:	d14a      	bne.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001592:	682b      	ldr	r3, [r5, #0]
 8001594:	069b      	lsls	r3, r3, #26
 8001596:	d45b      	bmi.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001598:	9b00      	ldr	r3, [sp, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d103      	bne.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015a0:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015a6:	682b      	ldr	r3, [r5, #0]
 80015a8:	079a      	lsls	r2, r3, #30
 80015aa:	d506      	bpl.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015ac:	200c      	movs	r0, #12
 80015ae:	493a      	ldr	r1, [pc, #232]	; (8001698 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80015b0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80015b2:	4382      	bics	r2, r0
 80015b4:	68a8      	ldr	r0, [r5, #8]
 80015b6:	4302      	orrs	r2, r0
 80015b8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80015ba:	075a      	lsls	r2, r3, #29
 80015bc:	d506      	bpl.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80015be:	4936      	ldr	r1, [pc, #216]	; (8001698 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80015c0:	4838      	ldr	r0, [pc, #224]	; (80016a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015c2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80015c4:	4002      	ands	r2, r0
 80015c6:	68e8      	ldr	r0, [r5, #12]
 80015c8:	4302      	orrs	r2, r0
 80015ca:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015cc:	071a      	lsls	r2, r3, #28
 80015ce:	d506      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015d0:	4931      	ldr	r1, [pc, #196]	; (8001698 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80015d2:	4835      	ldr	r0, [pc, #212]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015d4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80015d6:	4002      	ands	r2, r0
 80015d8:	6928      	ldr	r0, [r5, #16]
 80015da:	4302      	orrs	r2, r0
 80015dc:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80015de:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	d517      	bpl.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80015e4:	4a2c      	ldr	r2, [pc, #176]	; (8001698 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80015e6:	4931      	ldr	r1, [pc, #196]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80015e8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80015ea:	400b      	ands	r3, r1
 80015ec:	6969      	ldr	r1, [r5, #20]
 80015ee:	430b      	orrs	r3, r1
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	e00f      	b.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f4:	6833      	ldr	r3, [r6, #0]
 80015f6:	433b      	orrs	r3, r7
 80015f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80015fa:	f7ff fa2f 	bl	8000a5c <HAL_GetTick>
 80015fe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	6833      	ldr	r3, [r6, #0]
 8001602:	423b      	tst	r3, r7
 8001604:	d1b6      	bne.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001606:	f7ff fa29 	bl	8000a5c <HAL_GetTick>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	1ac0      	subs	r0, r0, r3
 800160e:	2864      	cmp	r0, #100	; 0x64
 8001610:	d9f6      	bls.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8001612:	2003      	movs	r0, #3
}
 8001614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001616:	0019      	movs	r1, r3
 8001618:	4011      	ands	r1, r2
 800161a:	4291      	cmp	r1, r2
 800161c:	d1b3      	bne.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800161e:	6821      	ldr	r1, [r4, #0]
          return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001622:	0389      	lsls	r1, r1, #14
 8001624:	d5af      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8001626:	e7f5      	b.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001628:	4013      	ands	r3, r2
 800162a:	42b3      	cmp	r3, r6
 800162c:	d0b1      	beq.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800162e:	0689      	lsls	r1, r1, #26
 8001630:	d5b2      	bpl.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001632:	2180      	movs	r1, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001634:	6d23      	ldr	r3, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001636:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001638:	0309      	lsls	r1, r1, #12
 800163a:	4301      	orrs	r1, r0
 800163c:	6521      	str	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800163e:	6d21      	ldr	r1, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001642:	481c      	ldr	r0, [pc, #112]	; (80016b4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001644:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001646:	4001      	ands	r1, r0
 8001648:	6521      	str	r1, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800164a:	6522      	str	r2, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800164c:	05db      	lsls	r3, r3, #23
 800164e:	d412      	bmi.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001650:	6869      	ldr	r1, [r5, #4]
 8001652:	23c0      	movs	r3, #192	; 0xc0
 8001654:	000a      	movs	r2, r1
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	401a      	ands	r2, r3
 800165a:	429a      	cmp	r2, r3
 800165c:	d107      	bne.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	4815      	ldr	r0, [pc, #84]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8001662:	4003      	ands	r3, r0
 8001664:	20c0      	movs	r0, #192	; 0xc0
 8001666:	0380      	lsls	r0, r0, #14
 8001668:	4001      	ands	r1, r0
 800166a:	430b      	orrs	r3, r1
 800166c:	6023      	str	r3, [r4, #0]
 800166e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001670:	431a      	orrs	r2, r3
 8001672:	6522      	str	r2, [r4, #80]	; 0x50
 8001674:	e790      	b.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8001676:	f7ff f9f1 	bl	8000a5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800167a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800167c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800167e:	00bf      	lsls	r7, r7, #2
 8001680:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001682:	423b      	tst	r3, r7
 8001684:	d000      	beq.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8001686:	e784      	b.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff f9e8 	bl	8000a5c <HAL_GetTick>
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800168e:	1b80      	subs	r0, r0, r6
 8001690:	4298      	cmp	r0, r3
 8001692:	d9f5      	bls.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001694:	e7bd      	b.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40021000 	.word	0x40021000
 800169c:	40007000 	.word	0x40007000
 80016a0:	efffffff 	.word	0xefffffff
 80016a4:	fffff3ff 	.word	0xfffff3ff
 80016a8:	ffffcfff 	.word	0xffffcfff
 80016ac:	fff3ffff 	.word	0xfff3ffff
 80016b0:	fffcffff 	.word	0xfffcffff
 80016b4:	fff7ffff 	.word	0xfff7ffff
 80016b8:	ffcfffff 	.word	0xffcfffff
 80016bc:	00001388 	.word	0x00001388

080016c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	001d      	movs	r5, r3
 80016c4:	0017      	movs	r7, r2
 80016c6:	b085      	sub	sp, #20
 80016c8:	000e      	movs	r6, r1
 80016ca:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80016cc:	f7ff f9c6 	bl	8000a5c <HAL_GetTick>
 80016d0:	19ed      	adds	r5, r5, r7
 80016d2:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80016d4:	f7ff f9c2 	bl	8000a5c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80016da:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	015b      	lsls	r3, r3, #5
 80016e0:	0d1b      	lsrs	r3, r3, #20
 80016e2:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016e4:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80016e6:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016e8:	6893      	ldr	r3, [r2, #8]
 80016ea:	4033      	ands	r3, r6
 80016ec:	429e      	cmp	r6, r3
 80016ee:	d001      	beq.n	80016f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80016f0:	2000      	movs	r0, #0
 80016f2:	e032      	b.n	800175a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 80016f4:	1c7b      	adds	r3, r7, #1
 80016f6:	d0f7      	beq.n	80016e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80016f8:	f7ff f9b0 	bl	8000a5c <HAL_GetTick>
 80016fc:	9b01      	ldr	r3, [sp, #4]
 80016fe:	1ac0      	subs	r0, r0, r3
 8001700:	42a8      	cmp	r0, r5
 8001702:	d32c      	bcc.n	800175e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001704:	21e0      	movs	r1, #224	; 0xe0
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	438a      	bics	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800170e:	2282      	movs	r2, #130	; 0x82
 8001710:	6861      	ldr	r1, [r4, #4]
 8001712:	0052      	lsls	r2, r2, #1
 8001714:	4291      	cmp	r1, r2
 8001716:	d10c      	bne.n	8001732 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	68a2      	ldr	r2, [r4, #8]
 800171c:	0209      	lsls	r1, r1, #8
 800171e:	428a      	cmp	r2, r1
 8001720:	d003      	beq.n	800172a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	00c9      	lsls	r1, r1, #3
 8001726:	428a      	cmp	r2, r1
 8001728:	d103      	bne.n	8001732 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 800172a:	2140      	movs	r1, #64	; 0x40
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	438a      	bics	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001736:	0189      	lsls	r1, r1, #6
 8001738:	428a      	cmp	r2, r1
 800173a:	d106      	bne.n	800174a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 800173c:	6819      	ldr	r1, [r3, #0]
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8001740:	4001      	ands	r1, r0
 8001742:	6019      	str	r1, [r3, #0]
 8001744:	6819      	ldr	r1, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800174a:	0023      	movs	r3, r4
 800174c:	2201      	movs	r2, #1
 800174e:	3351      	adds	r3, #81	; 0x51
 8001750:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8001752:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001754:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001756:	3450      	adds	r4, #80	; 0x50
 8001758:	7023      	strb	r3, [r4, #0]
}
 800175a:	b005      	add	sp, #20
 800175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800175e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	4193      	sbcs	r3, r2
 8001764:	425b      	negs	r3, r3
 8001766:	401d      	ands	r5, r3
      count--;
 8001768:	9b03      	ldr	r3, [sp, #12]
 800176a:	3b01      	subs	r3, #1
 800176c:	e7ba      	b.n	80016e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	20000000 	.word	0x20000000
 8001774:	ffffdfff 	.word	0xffffdfff

08001778 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177a:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800177c:	2282      	movs	r2, #130	; 0x82
{
 800177e:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001780:	6840      	ldr	r0, [r0, #4]
 8001782:	0052      	lsls	r2, r2, #1
 8001784:	4290      	cmp	r0, r2
 8001786:	d11e      	bne.n	80017c6 <SPI_EndRxTransaction+0x4e>
 8001788:	2080      	movs	r0, #128	; 0x80
 800178a:	2580      	movs	r5, #128	; 0x80
 800178c:	68a2      	ldr	r2, [r4, #8]
 800178e:	0200      	lsls	r0, r0, #8
 8001790:	00ed      	lsls	r5, r5, #3
 8001792:	4282      	cmp	r2, r0
 8001794:	d001      	beq.n	800179a <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001796:	42aa      	cmp	r2, r5
 8001798:	d106      	bne.n	80017a8 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800179a:	2740      	movs	r7, #64	; 0x40
 800179c:	6826      	ldr	r6, [r4, #0]
 800179e:	6830      	ldr	r0, [r6, #0]
 80017a0:	43b8      	bics	r0, r7
 80017a2:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80017a4:	42aa      	cmp	r2, r5
 80017a6:	d00e      	beq.n	80017c6 <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80017a8:	000a      	movs	r2, r1
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	0020      	movs	r0, r4
 80017ae:	f7ff ff87 	bl	80016c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d101      	bne.n	80017ba <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017ba:	2320      	movs	r3, #32
 80017bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80017be:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017c0:	4313      	orrs	r3, r2
 80017c2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80017c4:	e7f8      	b.n	80017b8 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80017c6:	000a      	movs	r2, r1
 80017c8:	2101      	movs	r1, #1
 80017ca:	e7ef      	b.n	80017ac <SPI_EndRxTransaction+0x34>

080017cc <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <SPI_EndRxTxTransaction+0x5c>)
{
 80017ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017d0:	0004      	movs	r4, r0
 80017d2:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	4915      	ldr	r1, [pc, #84]	; (800182c <SPI_EndRxTxTransaction+0x60>)
{
 80017d8:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80017da:	f7fe fca9 	bl	8000130 <__udivsi3>
 80017de:	23fa      	movs	r3, #250	; 0xfa
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4343      	muls	r3, r0
 80017e4:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017e6:	2382      	movs	r3, #130	; 0x82
 80017e8:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80017ea:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4299      	cmp	r1, r3
 80017f0:	d10d      	bne.n	800180e <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80017f2:	0033      	movs	r3, r6
 80017f4:	002a      	movs	r2, r5
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0020      	movs	r0, r4
 80017fa:	f7ff ff61 	bl	80016c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80017fe:	2800      	cmp	r0, #0
 8001800:	d00f      	beq.n	8001822 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001802:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8001804:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001806:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001808:	4313      	orrs	r3, r2
 800180a:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 800180c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 800180e:	9b01      	ldr	r3, [sp, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <SPI_EndRxTxTransaction+0x56>
      count--;
 8001814:	9b01      	ldr	r3, [sp, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4213      	tst	r3, r2
 8001820:	d1f5      	bne.n	800180e <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8001822:	2000      	movs	r0, #0
 8001824:	e7f2      	b.n	800180c <SPI_EndRxTxTransaction+0x40>
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	20000000 	.word	0x20000000
 800182c:	016e3600 	.word	0x016e3600

08001830 <HAL_SPI_Init>:
{
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001836:	2c00      	cmp	r4, #0
 8001838:	d050      	beq.n	80018dc <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800183a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800183c:	2b00      	cmp	r3, #0
 800183e:	d14e      	bne.n	80018de <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001840:	2282      	movs	r2, #130	; 0x82
 8001842:	6861      	ldr	r1, [r4, #4]
 8001844:	0052      	lsls	r2, r2, #1
 8001846:	4291      	cmp	r1, r2
 8001848:	d000      	beq.n	800184c <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800184a:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184c:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800184e:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001850:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001852:	3551      	adds	r5, #81	; 0x51
 8001854:	782b      	ldrb	r3, [r5, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 800185c:	0023      	movs	r3, r4
 800185e:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8001860:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001862:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8001864:	f7fe ffcc 	bl	8000800 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001868:	2602      	movs	r6, #2
  __HAL_SPI_DISABLE(hspi);
 800186a:	2240      	movs	r2, #64	; 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800186c:	2082      	movs	r0, #130	; 0x82
 800186e:	2784      	movs	r7, #132	; 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 8001870:	702e      	strb	r6, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001872:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001874:	0040      	lsls	r0, r0, #1
  __HAL_SPI_DISABLE(hspi);
 8001876:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001878:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 800187a:	4393      	bics	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	69a2      	ldr	r2, [r4, #24]
 8001882:	4003      	ands	r3, r0
 8001884:	68a0      	ldr	r0, [r4, #8]
 8001886:	4038      	ands	r0, r7
 8001888:	2780      	movs	r7, #128	; 0x80
 800188a:	4303      	orrs	r3, r0
 800188c:	68e0      	ldr	r0, [r4, #12]
 800188e:	013f      	lsls	r7, r7, #4
 8001890:	4038      	ands	r0, r7
 8001892:	4303      	orrs	r3, r0
 8001894:	6920      	ldr	r0, [r4, #16]
 8001896:	2738      	movs	r7, #56	; 0x38
 8001898:	4030      	ands	r0, r6
 800189a:	4303      	orrs	r3, r0
 800189c:	6960      	ldr	r0, [r4, #20]
 800189e:	3e01      	subs	r6, #1
 80018a0:	4030      	ands	r0, r6
 80018a2:	4303      	orrs	r3, r0
 80018a4:	2080      	movs	r0, #128	; 0x80
 80018a6:	0080      	lsls	r0, r0, #2
 80018a8:	4010      	ands	r0, r2
 80018aa:	4303      	orrs	r3, r0
 80018ac:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80018ae:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018b0:	4038      	ands	r0, r7
 80018b2:	4303      	orrs	r3, r0
 80018b4:	6a20      	ldr	r0, [r4, #32]
 80018b6:	3748      	adds	r7, #72	; 0x48
 80018b8:	4038      	ands	r0, r7
 80018ba:	2780      	movs	r7, #128	; 0x80
 80018bc:	4303      	orrs	r3, r0
 80018be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80018c0:	01bf      	lsls	r7, r7, #6
 80018c2:	4038      	ands	r0, r7
 80018c4:	4303      	orrs	r3, r0
 80018c6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80018c8:	2304      	movs	r3, #4
 80018ca:	2010      	movs	r0, #16
 80018cc:	401a      	ands	r2, r3
 80018ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018d0:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018d2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80018d4:	431a      	orrs	r2, r3
 80018d6:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018d8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018da:	702e      	strb	r6, [r5, #0]
}
 80018dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018e2:	6163      	str	r3, [r4, #20]
 80018e4:	e7b2      	b.n	800184c <HAL_SPI_Init+0x1c>

080018e6 <HAL_SPI_Transmit>:
{
 80018e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e8:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80018ea:	0003      	movs	r3, r0
{
 80018ec:	b085      	sub	sp, #20
 80018ee:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hspi);
 80018f0:	3350      	adds	r3, #80	; 0x50
{
 80018f2:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 80018f4:	781a      	ldrb	r2, [r3, #0]
{
 80018f6:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80018f8:	2702      	movs	r7, #2
 80018fa:	2a01      	cmp	r2, #1
 80018fc:	d100      	bne.n	8001900 <HAL_SPI_Transmit+0x1a>
 80018fe:	e083      	b.n	8001a08 <HAL_SPI_Transmit+0x122>
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001904:	f7ff f8aa 	bl	8000a5c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001908:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800190a:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 800190c:	3351      	adds	r3, #81	; 0x51
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	b2d7      	uxtb	r7, r2
 8001912:	2a01      	cmp	r2, #1
 8001914:	d000      	beq.n	8001918 <HAL_SPI_Transmit+0x32>
 8001916:	e0a7      	b.n	8001a68 <HAL_SPI_Transmit+0x182>
  if ((pData == NULL) || (Size == 0U))
 8001918:	9a00      	ldr	r2, [sp, #0]
 800191a:	2a00      	cmp	r2, #0
 800191c:	d071      	beq.n	8001a02 <HAL_SPI_Transmit+0x11c>
 800191e:	2e00      	cmp	r6, #0
 8001920:	d06f      	beq.n	8001a02 <HAL_SPI_Transmit+0x11c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001922:	2203      	movs	r2, #3
 8001924:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001926:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001928:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800192a:	6322      	str	r2, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001930:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001932:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001934:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001936:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001938:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800193a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800193c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferSize  = Size;
 800193e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 8001940:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001942:	0212      	lsls	r2, r2, #8
 8001944:	4291      	cmp	r1, r2
 8001946:	d108      	bne.n	800195a <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8001948:	2140      	movs	r1, #64	; 0x40
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	438a      	bics	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	01d2      	lsls	r2, r2, #7
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800195a:	2240      	movs	r2, #64	; 0x40
 800195c:	6819      	ldr	r1, [r3, #0]
 800195e:	4211      	tst	r1, r2
 8001960:	d102      	bne.n	8001968 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800196c:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800196e:	0109      	lsls	r1, r1, #4
 8001970:	4288      	cmp	r0, r1
 8001972:	d14c      	bne.n	8001a0e <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001974:	2a00      	cmp	r2, #0
 8001976:	d001      	beq.n	800197c <HAL_SPI_Transmit+0x96>
 8001978:	2e01      	cmp	r6, #1
 800197a:	d109      	bne.n	8001990 <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800197c:	9a00      	ldr	r2, [sp, #0]
 800197e:	8812      	ldrh	r2, [r2, #0]
 8001980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001982:	9b00      	ldr	r3, [sp, #0]
 8001984:	3302      	adds	r3, #2
 8001986:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001988:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800198a:	3b01      	subs	r3, #1
 800198c:	b29b      	uxth	r3, r3
 800198e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001990:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8001992:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001994:	2b00      	cmp	r3, #0
 8001996:	d119      	bne.n	80019cc <HAL_SPI_Transmit+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001998:	0029      	movs	r1, r5
 800199a:	0020      	movs	r0, r4
 800199c:	9a01      	ldr	r2, [sp, #4]
 800199e:	f7ff ff15 	bl	80017cc <SPI_EndRxTxTransaction>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d15d      	bne.n	8001a62 <HAL_SPI_Transmit+0x17c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019a6:	68a3      	ldr	r3, [r4, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d106      	bne.n	80019ba <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019ac:	9303      	str	r3, [sp, #12]
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	9203      	str	r2, [sp, #12]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	9303      	str	r3, [sp, #12]
 80019b8:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019bc:	2a00      	cmp	r2, #0
 80019be:	d120      	bne.n	8001a02 <HAL_SPI_Transmit+0x11c>
    hspi->State = HAL_SPI_STATE_READY;
 80019c0:	0023      	movs	r3, r4
 80019c2:	2101      	movs	r1, #1
 80019c4:	3351      	adds	r3, #81	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019c6:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 80019c8:	7019      	strb	r1, [r3, #0]
 80019ca:	e01a      	b.n	8001a02 <HAL_SPI_Transmit+0x11c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019cc:	6822      	ldr	r2, [r4, #0]
 80019ce:	6893      	ldr	r3, [r2, #8]
 80019d0:	4233      	tst	r3, r6
 80019d2:	d009      	beq.n	80019e8 <HAL_SPI_Transmit+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019d6:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019d8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019da:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019dc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80019de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80019e6:	e7d4      	b.n	8001992 <HAL_SPI_Transmit+0xac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019e8:	f7ff f838 	bl	8000a5c <HAL_GetTick>
 80019ec:	9b01      	ldr	r3, [sp, #4]
 80019ee:	1ac0      	subs	r0, r0, r3
 80019f0:	42a8      	cmp	r0, r5
 80019f2:	d3ce      	bcc.n	8001992 <HAL_SPI_Transmit+0xac>
 80019f4:	1c6b      	adds	r3, r5, #1
 80019f6:	d0cc      	beq.n	8001992 <HAL_SPI_Transmit+0xac>
          hspi->State = HAL_SPI_STATE_READY;
 80019f8:	0023      	movs	r3, r4
 80019fa:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 80019fc:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 80019fe:	3351      	adds	r3, #81	; 0x51
 8001a00:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001a02:	2300      	movs	r3, #0
 8001a04:	3450      	adds	r4, #80	; 0x50
 8001a06:	7023      	strb	r3, [r4, #0]
}
 8001a08:	0038      	movs	r0, r7
 8001a0a:	b005      	add	sp, #20
 8001a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_SPI_Transmit+0x130>
 8001a12:	2e01      	cmp	r6, #1
 8001a14:	d109      	bne.n	8001a2a <HAL_SPI_Transmit+0x144>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a16:	9a00      	ldr	r2, [sp, #0]
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a1e:	3301      	adds	r3, #1
 8001a20:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a2a:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8001a2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0b2      	beq.n	8001998 <HAL_SPI_Transmit+0xb2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	4232      	tst	r2, r6
 8001a38:	d00a      	beq.n	8001a50 <HAL_SPI_Transmit+0x16a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a42:	3301      	adds	r3, #1
 8001a44:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001a4e:	e7ed      	b.n	8001a2c <HAL_SPI_Transmit+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a50:	f7ff f804 	bl	8000a5c <HAL_GetTick>
 8001a54:	9b01      	ldr	r3, [sp, #4]
 8001a56:	1ac0      	subs	r0, r0, r3
 8001a58:	42a8      	cmp	r0, r5
 8001a5a:	d3e7      	bcc.n	8001a2c <HAL_SPI_Transmit+0x146>
 8001a5c:	1c6b      	adds	r3, r5, #1
 8001a5e:	d0e5      	beq.n	8001a2c <HAL_SPI_Transmit+0x146>
 8001a60:	e7ca      	b.n	80019f8 <HAL_SPI_Transmit+0x112>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a62:	2320      	movs	r3, #32
 8001a64:	6563      	str	r3, [r4, #84]	; 0x54
 8001a66:	e79e      	b.n	80019a6 <HAL_SPI_Transmit+0xc0>
    errorcode = HAL_BUSY;
 8001a68:	2702      	movs	r7, #2
 8001a6a:	e7ca      	b.n	8001a02 <HAL_SPI_Transmit+0x11c>

08001a6c <HAL_SPI_TransmitReceive>:
{
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8001a70:	0003      	movs	r3, r0
 8001a72:	3350      	adds	r3, #80	; 0x50
{
 8001a74:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8001a76:	781a      	ldrb	r2, [r3, #0]
{
 8001a78:	0004      	movs	r4, r0
 8001a7a:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8001a7c:	2002      	movs	r0, #2
{
 8001a7e:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001a80:	2a01      	cmp	r2, #1
 8001a82:	d100      	bne.n	8001a86 <HAL_SPI_TransmitReceive+0x1a>
 8001a84:	e094      	b.n	8001bb0 <HAL_SPI_TransmitReceive+0x144>
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001a8a:	f7fe ffe7 	bl	8000a5c <HAL_GetTick>
  tmp_state           = hspi->State;
 8001a8e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001a90:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8001a92:	3351      	adds	r3, #81	; 0x51
 8001a94:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001a96:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001a98:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d00c      	beq.n	8001ab8 <HAL_SPI_TransmitReceive+0x4c>
 8001a9e:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8001aa0:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4299      	cmp	r1, r3
 8001aa6:	d000      	beq.n	8001aaa <HAL_SPI_TransmitReceive+0x3e>
 8001aa8:	e07f      	b.n	8001baa <HAL_SPI_TransmitReceive+0x13e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001aaa:	68a3      	ldr	r3, [r4, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d000      	beq.n	8001ab2 <HAL_SPI_TransmitReceive+0x46>
 8001ab0:	e07b      	b.n	8001baa <HAL_SPI_TransmitReceive+0x13e>
 8001ab2:	2a04      	cmp	r2, #4
 8001ab4:	d000      	beq.n	8001ab8 <HAL_SPI_TransmitReceive+0x4c>
 8001ab6:	e078      	b.n	8001baa <HAL_SPI_TransmitReceive+0x13e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ab8:	2d00      	cmp	r5, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8001abc:	2001      	movs	r0, #1
    goto error;
 8001abe:	e074      	b.n	8001baa <HAL_SPI_TransmitReceive+0x13e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ac0:	2f00      	cmp	r7, #0
 8001ac2:	d0fb      	beq.n	8001abc <HAL_SPI_TransmitReceive+0x50>
 8001ac4:	2e00      	cmp	r6, #0
 8001ac6:	d0f9      	beq.n	8001abc <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ac8:	0023      	movs	r3, r4
 8001aca:	3351      	adds	r3, #81	; 0x51
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	2a04      	cmp	r2, #4
 8001ad0:	d001      	beq.n	8001ad6 <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ad2:	2205      	movs	r2, #5
 8001ad4:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ad6:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ad8:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ada:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001adc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ade:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ae0:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001ae2:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001ae4:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ae6:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ae8:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001aea:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001aec:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001aee:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001af0:	4210      	tst	r0, r2
 8001af2:	d102      	bne.n	8001afa <HAL_SPI_TransmitReceive+0x8e>
    __HAL_SPI_ENABLE(hspi);
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	4302      	orrs	r2, r0
 8001af8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	68e0      	ldr	r0, [r4, #12]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	4290      	cmp	r0, r2
 8001b02:	d157      	bne.n	8001bb4 <HAL_SPI_TransmitReceive+0x148>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b04:	2900      	cmp	r1, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_SPI_TransmitReceive+0xa0>
 8001b08:	2e01      	cmp	r6, #1
 8001b0a:	d107      	bne.n	8001b1c <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b0c:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b0e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b10:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001b12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b14:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001b1c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b1e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b20:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <HAL_SPI_TransmitReceive+0xd8>
 8001b28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10a      	bne.n	8001b44 <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b2e:	0020      	movs	r0, r4
 8001b30:	9a01      	ldr	r2, [sp, #4]
 8001b32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b34:	f7ff fe4a 	bl	80017cc <SPI_EndRxTxTransaction>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d100      	bne.n	8001b3e <HAL_SPI_TransmitReceive+0xd2>
 8001b3c:	e082      	b.n	8001c44 <HAL_SPI_TransmitReceive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	6563      	str	r3, [r4, #84]	; 0x54
 8001b42:	e7bb      	b.n	8001abc <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b44:	6821      	ldr	r1, [r4, #0]
 8001b46:	688b      	ldr	r3, [r1, #8]
 8001b48:	423b      	tst	r3, r7
 8001b4a:	d00e      	beq.n	8001b6a <HAL_SPI_TransmitReceive+0xfe>
 8001b4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_SPI_TransmitReceive+0xfe>
 8001b52:	2d01      	cmp	r5, #1
 8001b54:	d109      	bne.n	8001b6a <HAL_SPI_TransmitReceive+0xfe>
        txallowed = 0U;
 8001b56:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b5a:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b5c:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b5e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b60:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001b62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b6a:	688b      	ldr	r3, [r1, #8]
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	4032      	ands	r2, r6
 8001b70:	4233      	tst	r3, r6
 8001b72:	d00c      	beq.n	8001b8e <HAL_SPI_TransmitReceive+0x122>
 8001b74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_SPI_TransmitReceive+0x122>
        txallowed = 1U;
 8001b7a:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b7c:	68c9      	ldr	r1, [r1, #12]
 8001b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b80:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b82:	3302      	adds	r3, #2
 8001b84:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001b86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b8e:	f7fe ff65 	bl	8000a5c <HAL_GetTick>
 8001b92:	9b01      	ldr	r3, [sp, #4]
 8001b94:	1ac0      	subs	r0, r0, r3
 8001b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b98:	4298      	cmp	r0, r3
 8001b9a:	d3c2      	bcc.n	8001b22 <HAL_SPI_TransmitReceive+0xb6>
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	d0c0      	beq.n	8001b22 <HAL_SPI_TransmitReceive+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	2201      	movs	r2, #1
        errorcode = HAL_TIMEOUT;
 8001ba4:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8001ba6:	3351      	adds	r3, #81	; 0x51
 8001ba8:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001baa:	2300      	movs	r3, #0
 8001bac:	3450      	adds	r4, #80	; 0x50
 8001bae:	7023      	strb	r3, [r4, #0]
}
 8001bb0:	b005      	add	sp, #20
 8001bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bb4:	2900      	cmp	r1, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_SPI_TransmitReceive+0x150>
 8001bb8:	2e01      	cmp	r6, #1
 8001bba:	d108      	bne.n	8001bce <HAL_SPI_TransmitReceive+0x162>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bbc:	782a      	ldrb	r2, [r5, #0]
 8001bbe:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001bc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001bce:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bd0:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bd2:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_SPI_TransmitReceive+0x174>
 8001bda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0a6      	beq.n	8001b2e <HAL_SPI_TransmitReceive+0xc2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	423a      	tst	r2, r7
 8001be6:	d00f      	beq.n	8001c08 <HAL_SPI_TransmitReceive+0x19c>
 8001be8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d00c      	beq.n	8001c08 <HAL_SPI_TransmitReceive+0x19c>
 8001bee:	2d01      	cmp	r5, #1
 8001bf0:	d10a      	bne.n	8001c08 <HAL_SPI_TransmitReceive+0x19c>
        txallowed = 0U;
 8001bf2:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001bf4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001bf6:	7812      	ldrb	r2, [r2, #0]
 8001bf8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001bfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001c00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	6899      	ldr	r1, [r3, #8]
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	4032      	ands	r2, r6
 8001c10:	4231      	tst	r1, r6
 8001c12:	d00d      	beq.n	8001c30 <HAL_SPI_TransmitReceive+0x1c4>
 8001c14:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001c16:	2900      	cmp	r1, #0
 8001c18:	d00a      	beq.n	8001c30 <HAL_SPI_TransmitReceive+0x1c4>
        txallowed = 1U;
 8001c1a:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c1c:	68d9      	ldr	r1, [r3, #12]
 8001c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c20:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c24:	3301      	adds	r3, #1
 8001c26:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001c28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c30:	f7fe ff14 	bl	8000a5c <HAL_GetTick>
 8001c34:	9b01      	ldr	r3, [sp, #4]
 8001c36:	1ac0      	subs	r0, r0, r3
 8001c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c3a:	4298      	cmp	r0, r3
 8001c3c:	d3ca      	bcc.n	8001bd4 <HAL_SPI_TransmitReceive+0x168>
 8001c3e:	3301      	adds	r3, #1
 8001c40:	d0c8      	beq.n	8001bd4 <HAL_SPI_TransmitReceive+0x168>
 8001c42:	e7ad      	b.n	8001ba0 <HAL_SPI_TransmitReceive+0x134>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c44:	68a3      	ldr	r3, [r4, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_SPI_TransmitReceive+0x1ec>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	9003      	str	r0, [sp, #12]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	9203      	str	r2, [sp, #12]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	9303      	str	r3, [sp, #12]
 8001c56:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d000      	beq.n	8001c60 <HAL_SPI_TransmitReceive+0x1f4>
 8001c5e:	e72d      	b.n	8001abc <HAL_SPI_TransmitReceive+0x50>
    hspi->State = HAL_SPI_STATE_READY;
 8001c60:	0023      	movs	r3, r4
 8001c62:	2201      	movs	r2, #1
 8001c64:	3351      	adds	r3, #81	; 0x51
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	e79f      	b.n	8001baa <HAL_SPI_TransmitReceive+0x13e>
	...

08001c6c <HAL_SPI_Receive>:
{
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c6e:	0007      	movs	r7, r0
{
 8001c70:	b087      	sub	sp, #28
 8001c72:	9103      	str	r1, [sp, #12]
 8001c74:	9204      	str	r2, [sp, #16]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c76:	3751      	adds	r7, #81	; 0x51
{
 8001c78:	001e      	movs	r6, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c7a:	783b      	ldrb	r3, [r7, #0]
{
 8001c7c:	0004      	movs	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c7e:	b2dd      	uxtb	r5, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d000      	beq.n	8001c86 <HAL_SPI_Receive+0x1a>
 8001c84:	e096      	b.n	8001db4 <HAL_SPI_Receive+0x148>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c86:	3304      	adds	r3, #4
 8001c88:	6842      	ldr	r2, [r0, #4]
 8001c8a:	33ff      	adds	r3, #255	; 0xff
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d10d      	bne.n	8001cac <HAL_SPI_Receive+0x40>
 8001c90:	6883      	ldr	r3, [r0, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_SPI_Receive+0x40>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c96:	3304      	adds	r3, #4
 8001c98:	703b      	strb	r3, [r7, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c9a:	000a      	movs	r2, r1
 8001c9c:	9b04      	ldr	r3, [sp, #16]
 8001c9e:	9600      	str	r6, [sp, #0]
 8001ca0:	f7ff fee4 	bl	8001a6c <HAL_SPI_TransmitReceive>
 8001ca4:	0005      	movs	r5, r0
}
 8001ca6:	0028      	movs	r0, r5
 8001ca8:	b007      	add	sp, #28
 8001caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8001cac:	0023      	movs	r3, r4
 8001cae:	3350      	adds	r3, #80	; 0x50
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	2a01      	cmp	r2, #1
 8001cb4:	d100      	bne.n	8001cb8 <HAL_SPI_Receive+0x4c>
 8001cb6:	e07f      	b.n	8001db8 <HAL_SPI_Receive+0x14c>
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001cbc:	f7fe fece 	bl	8000a5c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8001cc0:	9b03      	ldr	r3, [sp, #12]
  tickstart = HAL_GetTick();
 8001cc2:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d065      	beq.n	8001d94 <HAL_SPI_Receive+0x128>
 8001cc8:	9b04      	ldr	r3, [sp, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d062      	beq.n	8001d94 <HAL_SPI_Receive+0x128>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	703b      	strb	r3, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cd2:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001cd4:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cd6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001cd8:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001cda:	9a04      	ldr	r2, [sp, #16]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cdc:	68a1      	ldr	r1, [r4, #8]
  hspi->RxXferCount = Size;
 8001cde:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ce0:	87a2      	strh	r2, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ce2:	2280      	movs	r2, #128	; 0x80
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ce4:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001ce6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ce8:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001cea:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001cec:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cee:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8001cf0:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cf2:	4291      	cmp	r1, r2
 8001cf4:	d107      	bne.n	8001d06 <HAL_SPI_Receive+0x9a>
    __HAL_SPI_DISABLE(hspi);
 8001cf6:	2140      	movs	r1, #64	; 0x40
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	438a      	bics	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	492e      	ldr	r1, [pc, #184]	; (8001dbc <HAL_SPI_Receive+0x150>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	4211      	tst	r1, r2
 8001d0c:	d102      	bne.n	8001d14 <HAL_SPI_Receive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d14:	68e3      	ldr	r3, [r4, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d020      	beq.n	8001d5c <HAL_SPI_Receive+0xf0>
    while (hspi->RxXferCount > 0U)
 8001d1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_SPI_Receive+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d20:	2101      	movs	r1, #1
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	420a      	tst	r2, r1
 8001d28:	d038      	beq.n	8001d9c <HAL_SPI_Receive+0x130>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d30:	3302      	adds	r3, #2
 8001d32:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001d34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001d3c:	e7ed      	b.n	8001d1a <HAL_SPI_Receive+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d3e:	2101      	movs	r1, #1
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	420a      	tst	r2, r1
 8001d46:	d01a      	beq.n	8001d7e <HAL_SPI_Receive+0x112>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d48:	7b1b      	ldrb	r3, [r3, #12]
 8001d4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d4c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d50:	185b      	adds	r3, r3, r1
 8001d52:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001d54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001d5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ed      	bne.n	8001d3e <HAL_SPI_Receive+0xd2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d62:	0031      	movs	r1, r6
 8001d64:	0020      	movs	r0, r4
 8001d66:	9a05      	ldr	r2, [sp, #20]
 8001d68:	f7ff fd06 	bl	8001778 <SPI_EndRxTransaction>
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d11e      	bne.n	8001dae <HAL_SPI_Receive+0x142>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10e      	bne.n	8001d94 <HAL_SPI_Receive+0x128>
    hspi->State = HAL_SPI_STATE_READY;
 8001d76:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d78:	001d      	movs	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 8001d7a:	703a      	strb	r2, [r7, #0]
 8001d7c:	e00a      	b.n	8001d94 <HAL_SPI_Receive+0x128>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d7e:	f7fe fe6d 	bl	8000a5c <HAL_GetTick>
 8001d82:	9b05      	ldr	r3, [sp, #20]
 8001d84:	1ac0      	subs	r0, r0, r3
 8001d86:	42b0      	cmp	r0, r6
 8001d88:	d3e8      	bcc.n	8001d5c <HAL_SPI_Receive+0xf0>
 8001d8a:	1c73      	adds	r3, r6, #1
 8001d8c:	d0e6      	beq.n	8001d5c <HAL_SPI_Receive+0xf0>
          hspi->State = HAL_SPI_STATE_READY;
 8001d8e:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8001d90:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001d92:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 8001d94:	2300      	movs	r3, #0
 8001d96:	3450      	adds	r4, #80	; 0x50
 8001d98:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8001d9a:	e784      	b.n	8001ca6 <HAL_SPI_Receive+0x3a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d9c:	f7fe fe5e 	bl	8000a5c <HAL_GetTick>
 8001da0:	9b05      	ldr	r3, [sp, #20]
 8001da2:	1ac0      	subs	r0, r0, r3
 8001da4:	42b0      	cmp	r0, r6
 8001da6:	d3b8      	bcc.n	8001d1a <HAL_SPI_Receive+0xae>
 8001da8:	1c73      	adds	r3, r6, #1
 8001daa:	d0b6      	beq.n	8001d1a <HAL_SPI_Receive+0xae>
 8001dac:	e7ef      	b.n	8001d8e <HAL_SPI_Receive+0x122>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dae:	2320      	movs	r3, #32
 8001db0:	6563      	str	r3, [r4, #84]	; 0x54
 8001db2:	e7dd      	b.n	8001d70 <HAL_SPI_Receive+0x104>
    errorcode = HAL_BUSY;
 8001db4:	2502      	movs	r5, #2
 8001db6:	e7ed      	b.n	8001d94 <HAL_SPI_Receive+0x128>
  __HAL_LOCK(hspi);
 8001db8:	2502      	movs	r5, #2
 8001dba:	e774      	b.n	8001ca6 <HAL_SPI_Receive+0x3a>
 8001dbc:	ffffbfff 	.word	0xffffbfff

08001dc0 <HAL_SPI_ErrorCallback>:
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8001dc4:	6803      	ldr	r3, [r0, #0]
{
 8001dc6:	b530      	push	{r4, r5, lr}
 8001dc8:	0004      	movs	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001dca:	2041      	movs	r0, #65	; 0x41
  uint32_t itsource = hspi->Instance->CR2;
 8001dcc:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001dce:	689a      	ldr	r2, [r3, #8]
{
 8001dd0:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001dd2:	4010      	ands	r0, r2
 8001dd4:	2801      	cmp	r0, #1
 8001dd6:	d106      	bne.n	8001de6 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001dd8:	0648      	lsls	r0, r1, #25
 8001dda:	d504      	bpl.n	8001de6 <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 8001ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hspi->TxISR(hspi);
 8001dde:	0020      	movs	r0, r4
 8001de0:	4798      	blx	r3
}
 8001de2:	b005      	add	sp, #20
 8001de4:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001de6:	0790      	lsls	r0, r2, #30
 8001de8:	d503      	bpl.n	8001df2 <HAL_SPI_IRQHandler+0x2e>
 8001dea:	0608      	lsls	r0, r1, #24
 8001dec:	d501      	bpl.n	8001df2 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001dee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001df0:	e7f5      	b.n	8001dde <HAL_SPI_IRQHandler+0x1a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001df2:	20b0      	movs	r0, #176	; 0xb0
 8001df4:	0040      	lsls	r0, r0, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001df6:	4202      	tst	r2, r0
 8001df8:	d0f3      	beq.n	8001de2 <HAL_SPI_IRQHandler+0x1e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001dfa:	0688      	lsls	r0, r1, #26
 8001dfc:	d5f1      	bpl.n	8001de2 <HAL_SPI_IRQHandler+0x1e>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001dfe:	0650      	lsls	r0, r2, #25
 8001e00:	d50f      	bpl.n	8001e22 <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001e02:	0020      	movs	r0, r4
 8001e04:	3051      	adds	r0, #81	; 0x51
 8001e06:	7800      	ldrb	r0, [r0, #0]
 8001e08:	2803      	cmp	r0, #3
 8001e0a:	d050      	beq.n	8001eae <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e0c:	2004      	movs	r0, #4
 8001e0e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001e10:	4328      	orrs	r0, r5
 8001e12:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e14:	2000      	movs	r0, #0
 8001e16:	9000      	str	r0, [sp, #0]
 8001e18:	68d8      	ldr	r0, [r3, #12]
 8001e1a:	9000      	str	r0, [sp, #0]
 8001e1c:	6898      	ldr	r0, [r3, #8]
 8001e1e:	9000      	str	r0, [sp, #0]
 8001e20:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e22:	0690      	lsls	r0, r2, #26
 8001e24:	d50c      	bpl.n	8001e40 <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e26:	2001      	movs	r0, #1
 8001e28:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001e2a:	4328      	orrs	r0, r5
 8001e2c:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	2540      	movs	r5, #64	; 0x40
 8001e32:	9002      	str	r0, [sp, #8]
 8001e34:	6898      	ldr	r0, [r3, #8]
 8001e36:	9002      	str	r0, [sp, #8]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	43a8      	bics	r0, r5
 8001e3c:	6018      	str	r0, [r3, #0]
 8001e3e:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e40:	05d2      	lsls	r2, r2, #23
 8001e42:	d508      	bpl.n	8001e56 <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e44:	2208      	movs	r2, #8
 8001e46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e48:	4302      	orrs	r2, r0
 8001e4a:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	9203      	str	r2, [sp, #12]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	9203      	str	r2, [sp, #12]
 8001e54:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e56:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	d0c2      	beq.n	8001de2 <HAL_SPI_IRQHandler+0x1e>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e5c:	20e0      	movs	r0, #224	; 0xe0
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4382      	bics	r2, r0
 8001e62:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001e64:	0022      	movs	r2, r4
 8001e66:	38df      	subs	r0, #223	; 0xdf
 8001e68:	3251      	adds	r2, #81	; 0x51
 8001e6a:	7010      	strb	r0, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001e6c:	3002      	adds	r0, #2
 8001e6e:	4201      	tst	r1, r0
 8001e70:	d025      	beq.n	8001ebe <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4382      	bics	r2, r0
        if (hspi->hdmarx != NULL)
 8001e76:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e78:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_SPI_IRQHandler+0xce>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_SPI_IRQHandler+0x104>)
 8001e80:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001e82:	f7fe feb7 	bl	8000bf4 <HAL_DMA_Abort_IT>
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_SPI_IRQHandler+0xce>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001e8a:	2340      	movs	r3, #64	; 0x40
 8001e8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001e92:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d0a4      	beq.n	8001de2 <HAL_SPI_IRQHandler+0x1e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_SPI_IRQHandler+0x104>)
 8001e9a:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001e9c:	f7fe feaa 	bl	8000bf4 <HAL_DMA_Abort_IT>
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	d09e      	beq.n	8001de2 <HAL_SPI_IRQHandler+0x1e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ea4:	2340      	movs	r3, #64	; 0x40
 8001ea6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	6563      	str	r3, [r4, #84]	; 0x54
 8001eac:	e799      	b.n	8001de2 <HAL_SPI_IRQHandler+0x1e>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	9201      	str	r2, [sp, #4]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	9201      	str	r2, [sp, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	9b01      	ldr	r3, [sp, #4]
        return;
 8001ebc:	e791      	b.n	8001de2 <HAL_SPI_IRQHandler+0x1e>
        HAL_SPI_ErrorCallback(hspi);
 8001ebe:	0020      	movs	r0, r4
 8001ec0:	f7ff ff7e 	bl	8001dc0 <HAL_SPI_ErrorCallback>
 8001ec4:	e78d      	b.n	8001de2 <HAL_SPI_IRQHandler+0x1e>
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	08001ecd 	.word	0x08001ecd

08001ecc <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8001ecc:	2300      	movs	r3, #0
{
 8001ece:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001ed0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8001ed2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001ed4:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8001ed6:	f7ff ff73 	bl	8001dc0 <HAL_SPI_ErrorCallback>
}
 8001eda:	bd10      	pop	{r4, pc}

08001edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001edc:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ede:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ee8:	6801      	ldr	r1, [r0, #0]
 8001eea:	4d12      	ldr	r5, [pc, #72]	; (8001f34 <UART_EndRxTransfer+0x58>)
 8001eec:	680b      	ldr	r3, [r1, #0]
 8001eee:	402b      	ands	r3, r5
 8001ef0:	600b      	str	r3, [r1, #0]
 8001ef2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ef6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001efa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001efe:	6801      	ldr	r1, [r0, #0]
 8001f00:	688b      	ldr	r3, [r1, #8]
 8001f02:	4393      	bics	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
 8001f06:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f0a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d10a      	bne.n	8001f26 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f10:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f14:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f18:	2410      	movs	r4, #16
 8001f1a:	6802      	ldr	r2, [r0, #0]
 8001f1c:	6813      	ldr	r3, [r2, #0]
 8001f1e:	43a3      	bics	r3, r4
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f26:	2220      	movs	r2, #32
 8001f28:	1d03      	adds	r3, r0, #4
 8001f2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001f30:	6683      	str	r3, [r0, #104]	; 0x68
}
 8001f32:	bd30      	pop	{r4, r5, pc}
 8001f34:	fffffedf 	.word	0xfffffedf

08001f38 <HAL_UART_TxCpltCallback>:
 8001f38:	4770      	bx	lr

08001f3a <HAL_UART_ErrorCallback>:
 8001f3a:	4770      	bx	lr

08001f3c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	0002      	movs	r2, r0
{
 8001f42:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001f44:	325a      	adds	r2, #90	; 0x5a
 8001f46:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001f48:	3a08      	subs	r2, #8
 8001f4a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f4c:	f7ff fff5 	bl	8001f3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f50:	bd10      	pop	{r4, pc}

08001f52 <HAL_UARTEx_RxEventCallback>:
}
 8001f52:	4770      	bx	lr

08001f54 <HAL_UART_IRQHandler>:
{
 8001f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f56:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f58:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f5a:	4bab      	ldr	r3, [pc, #684]	; (8002208 <HAL_UART_IRQHandler+0x2b4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f5c:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f5e:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f60:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 8001f62:	4219      	tst	r1, r3
 8001f64:	d10b      	bne.n	8001f7e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f66:	2320      	movs	r3, #32
 8001f68:	4219      	tst	r1, r3
 8001f6a:	d100      	bne.n	8001f6e <HAL_UART_IRQHandler+0x1a>
 8001f6c:	e080      	b.n	8002070 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f6e:	421e      	tst	r6, r3
 8001f70:	d100      	bne.n	8001f74 <HAL_UART_IRQHandler+0x20>
 8001f72:	e07d      	b.n	8002070 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8001f74:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      huart->TxISR(huart);
 8001f76:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d16f      	bne.n	800205c <HAL_UART_IRQHandler+0x108>
 8001f7c:	e06f      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001f7e:	2301      	movs	r3, #1
 8001f80:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001f82:	4aa2      	ldr	r2, [pc, #648]	; (800220c <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001f84:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001f86:	4032      	ands	r2, r6
 8001f88:	433a      	orrs	r2, r7
 8001f8a:	d100      	bne.n	8001f8e <HAL_UART_IRQHandler+0x3a>
 8001f8c:	e070      	b.n	8002070 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001f8e:	0025      	movs	r5, r4
 8001f90:	3508      	adds	r5, #8
 8001f92:	4219      	tst	r1, r3
 8001f94:	d005      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x4e>
 8001f96:	05f2      	lsls	r2, r6, #23
 8001f98:	d503      	bpl.n	8001fa2 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f9a:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f9c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	4219      	tst	r1, r3
 8001fa6:	d006      	beq.n	8001fb6 <HAL_UART_IRQHandler+0x62>
 8001fa8:	2f00      	cmp	r7, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001fac:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fae:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001fb0:	18db      	adds	r3, r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	4219      	tst	r1, r3
 8001fba:	d006      	beq.n	8001fca <HAL_UART_IRQHandler+0x76>
 8001fbc:	2f00      	cmp	r7, #0
 8001fbe:	d004      	beq.n	8001fca <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001fc0:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fc2:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001fc4:	3b02      	subs	r3, #2
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001fca:	2308      	movs	r3, #8
 8001fcc:	4219      	tst	r1, r3
 8001fce:	d007      	beq.n	8001fe0 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	4032      	ands	r2, r6
 8001fd4:	433a      	orrs	r2, r7
 8001fd6:	d003      	beq.n	8001fe0 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001fd8:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fda:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4219      	tst	r1, r3
 8001fe6:	d006      	beq.n	8001ff6 <HAL_UART_IRQHandler+0xa2>
 8001fe8:	0172      	lsls	r2, r6, #5
 8001fea:	d504      	bpl.n	8001ff6 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fec:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ff6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d030      	beq.n	800205e <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	4219      	tst	r1, r3
 8002000:	d006      	beq.n	8002010 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002002:	421e      	tst	r6, r3
 8002004:	d004      	beq.n	8002010 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8002006:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 800200c:	0020      	movs	r0, r4
 800200e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002010:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002012:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002014:	2740      	movs	r7, #64	; 0x40
 8002016:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002018:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800201a:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800201c:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800201e:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002020:	431e      	orrs	r6, r3
 8002022:	d021      	beq.n	8002068 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8002024:	f7ff ff5a 	bl	8001edc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	423b      	tst	r3, r7
 800202e:	d017      	beq.n	8002060 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002030:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002034:	2301      	movs	r3, #1
 8002036:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800203a:	6822      	ldr	r2, [r4, #0]
 800203c:	6893      	ldr	r3, [r2, #8]
 800203e:	43bb      	bics	r3, r7
 8002040:	6093      	str	r3, [r2, #8]
 8002042:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002046:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002048:	2800      	cmp	r0, #0
 800204a:	d009      	beq.n	8002060 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800204c:	4b70      	ldr	r3, [pc, #448]	; (8002210 <HAL_UART_IRQHandler+0x2bc>)
 800204e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002050:	f7fe fdd0 	bl	8000bf4 <HAL_DMA_Abort_IT>
 8002054:	2800      	cmp	r0, #0
 8002056:	d002      	beq.n	800205e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002058:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800205a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800205c:	4798      	blx	r3
}
 800205e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002060:	0020      	movs	r0, r4
 8002062:	f7ff ff6a 	bl	8001f3a <HAL_UART_ErrorCallback>
 8002066:	e7fa      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002068:	f7ff ff67 	bl	8001f3a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800206e:	e7f6      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002070:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002072:	2b01      	cmp	r3, #1
 8002074:	d000      	beq.n	8002078 <HAL_UART_IRQHandler+0x124>
 8002076:	e09a      	b.n	80021ae <HAL_UART_IRQHandler+0x25a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002078:	2210      	movs	r2, #16
 800207a:	4211      	tst	r1, r2
 800207c:	d100      	bne.n	8002080 <HAL_UART_IRQHandler+0x12c>
 800207e:	e096      	b.n	80021ae <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002080:	4216      	tst	r6, r2
 8002082:	d100      	bne.n	8002086 <HAL_UART_IRQHandler+0x132>
 8002084:	e093      	b.n	80021ae <HAL_UART_IRQHandler+0x25a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002086:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002088:	6881      	ldr	r1, [r0, #8]
 800208a:	2640      	movs	r6, #64	; 0x40
 800208c:	000f      	movs	r7, r1
 800208e:	4037      	ands	r7, r6
 8002090:	4231      	tst	r1, r6
 8002092:	d053      	beq.n	800213c <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002094:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002096:	6808      	ldr	r0, [r1, #0]
 8002098:	6841      	ldr	r1, [r0, #4]
 800209a:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800209c:	2900      	cmp	r1, #0
 800209e:	d0de      	beq.n	800205e <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020a0:	0025      	movs	r5, r4
 80020a2:	3558      	adds	r5, #88	; 0x58
 80020a4:	882d      	ldrh	r5, [r5, #0]
 80020a6:	428d      	cmp	r5, r1
 80020a8:	d9d9      	bls.n	800205e <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 80020aa:	0025      	movs	r5, r4
 80020ac:	355a      	adds	r5, #90	; 0x5a
 80020ae:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80020b0:	6801      	ldr	r1, [r0, #0]
 80020b2:	2020      	movs	r0, #32
 80020b4:	000d      	movs	r5, r1
 80020b6:	4005      	ands	r5, r0
 80020b8:	9501      	str	r5, [sp, #4]
 80020ba:	4201      	tst	r1, r0
 80020bc:	d130      	bne.n	8002120 <HAL_UART_IRQHandler+0x1cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020be:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020c6:	6825      	ldr	r5, [r4, #0]
 80020c8:	4a52      	ldr	r2, [pc, #328]	; (8002214 <HAL_UART_IRQHandler+0x2c0>)
 80020ca:	6829      	ldr	r1, [r5, #0]
 80020cc:	4011      	ands	r1, r2
 80020ce:	6029      	str	r1, [r5, #0]
 80020d0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020dc:	6825      	ldr	r5, [r4, #0]
 80020de:	68a9      	ldr	r1, [r5, #8]
 80020e0:	4399      	bics	r1, r3
 80020e2:	60a9      	str	r1, [r5, #8]
 80020e4:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ec:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f0:	0021      	movs	r1, r4
 80020f2:	c980      	ldmia	r1!, {r7}
 80020f4:	68bd      	ldr	r5, [r7, #8]
 80020f6:	43b5      	bics	r5, r6
 80020f8:	60bd      	str	r5, [r7, #8]
 80020fa:	f38c 8810 	msr	PRIMASK, ip
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020fe:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8002100:	67c8      	str	r0, [r1, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002102:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002104:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002108:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800210c:	2210      	movs	r2, #16
 800210e:	6821      	ldr	r1, [r4, #0]
 8002110:	680b      	ldr	r3, [r1, #0]
 8002112:	4393      	bics	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
 8002116:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 800211a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800211c:	f7fe fd4a 	bl	8000bb4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002120:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002122:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002124:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002126:	0023      	movs	r3, r4
 8002128:	3258      	adds	r2, #88	; 0x58
 800212a:	335a      	adds	r3, #90	; 0x5a
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	8811      	ldrh	r1, [r2, #0]
 8002130:	1ac9      	subs	r1, r1, r3
 8002132:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002134:	0020      	movs	r0, r4
 8002136:	f7ff ff0c 	bl	8001f52 <HAL_UARTEx_RxEventCallback>
 800213a:	e790      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800213c:	0025      	movs	r5, r4
 800213e:	0021      	movs	r1, r4
 8002140:	355a      	adds	r5, #90	; 0x5a
 8002142:	8828      	ldrh	r0, [r5, #0]
      if ((huart->RxXferCount > 0U)
 8002144:	882d      	ldrh	r5, [r5, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002146:	3158      	adds	r1, #88	; 0x58
 8002148:	8809      	ldrh	r1, [r1, #0]
 800214a:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 800214c:	2d00      	cmp	r5, #0
 800214e:	d100      	bne.n	8002152 <HAL_UART_IRQHandler+0x1fe>
 8002150:	e785      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002152:	1a09      	subs	r1, r1, r0
 8002154:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002156:	2900      	cmp	r1, #0
 8002158:	d100      	bne.n	800215c <HAL_UART_IRQHandler+0x208>
 800215a:	e780      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800215c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002160:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002164:	6825      	ldr	r5, [r4, #0]
 8002166:	4a2c      	ldr	r2, [pc, #176]	; (8002218 <HAL_UART_IRQHandler+0x2c4>)
 8002168:	6828      	ldr	r0, [r5, #0]
 800216a:	4010      	ands	r0, r2
 800216c:	6028      	str	r0, [r5, #0]
 800216e:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002172:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002176:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217a:	0020      	movs	r0, r4
 800217c:	c840      	ldmia	r0!, {r6}
 800217e:	68b5      	ldr	r5, [r6, #8]
 8002180:	439d      	bics	r5, r3
 8002182:	60b5      	str	r5, [r6, #8]
 8002184:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8002188:	2520      	movs	r5, #32
 800218a:	67c5      	str	r5, [r0, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800218c:	6627      	str	r7, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 800218e:	66a7      	str	r7, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002190:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002194:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002198:	6820      	ldr	r0, [r4, #0]
 800219a:	3232      	adds	r2, #50	; 0x32
 800219c:	6803      	ldr	r3, [r0, #0]
 800219e:	32ff      	adds	r2, #255	; 0xff
 80021a0:	4393      	bics	r3, r2
 80021a2:	6003      	str	r3, [r0, #0]
 80021a4:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021a8:	2302      	movs	r3, #2
 80021aa:	6663      	str	r3, [r4, #100]	; 0x64
 80021ac:	e7c2      	b.n	8002134 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	035b      	lsls	r3, r3, #13
 80021b2:	4219      	tst	r1, r3
 80021b4:	d006      	beq.n	80021c4 <HAL_UART_IRQHandler+0x270>
 80021b6:	026d      	lsls	r5, r5, #9
 80021b8:	d504      	bpl.n	80021c4 <HAL_UART_IRQHandler+0x270>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80021ba:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80021bc:	0020      	movs	r0, r4
 80021be:	f000 fa63 	bl	8002688 <HAL_UARTEx_WakeupCallback>
    return;
 80021c2:	e74c      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	4219      	tst	r1, r3
 80021c8:	d003      	beq.n	80021d2 <HAL_UART_IRQHandler+0x27e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80021ca:	421e      	tst	r6, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_UART_IRQHandler+0x27e>
    if (huart->TxISR != NULL)
 80021ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80021d0:	e6d1      	b.n	8001f76 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80021d2:	2240      	movs	r2, #64	; 0x40
 80021d4:	4211      	tst	r1, r2
 80021d6:	d100      	bne.n	80021da <HAL_UART_IRQHandler+0x286>
 80021d8:	e741      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
 80021da:	4216      	tst	r6, r2
 80021dc:	d100      	bne.n	80021e0 <HAL_UART_IRQHandler+0x28c>
 80021de:	e73e      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e4:	2301      	movs	r3, #1
 80021e6:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021ea:	6821      	ldr	r1, [r4, #0]
 80021ec:	680b      	ldr	r3, [r1, #0]
 80021ee:	4393      	bics	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
 80021f2:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021f6:	2320      	movs	r3, #32
 80021f8:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80021fa:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80021fc:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80021fe:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8002200:	f7ff fe9a 	bl	8001f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002204:	e72b      	b.n	800205e <HAL_UART_IRQHandler+0x10a>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	0000080f 	.word	0x0000080f
 800220c:	04000120 	.word	0x04000120
 8002210:	08001f3d 	.word	0x08001f3d
 8002214:	fffffeff 	.word	0xfffffeff
 8002218:	fffffedf 	.word	0xfffffedf

0800221c <UART_SetConfig>:
{
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002220:	6925      	ldr	r5, [r4, #16]
 8002222:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002224:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002226:	4329      	orrs	r1, r5
 8002228:	6965      	ldr	r5, [r4, #20]
 800222a:	69c3      	ldr	r3, [r0, #28]
 800222c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800222e:	6810      	ldr	r0, [r2, #0]
 8002230:	4d69      	ldr	r5, [pc, #420]	; (80023d8 <UART_SetConfig+0x1bc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002232:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002234:	4028      	ands	r0, r5
 8002236:	4301      	orrs	r1, r0
 8002238:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800223a:	6851      	ldr	r1, [r2, #4]
 800223c:	4867      	ldr	r0, [pc, #412]	; (80023dc <UART_SetConfig+0x1c0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800223e:	4d68      	ldr	r5, [pc, #416]	; (80023e0 <UART_SetConfig+0x1c4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002240:	4001      	ands	r1, r0
 8002242:	68e0      	ldr	r0, [r4, #12]
 8002244:	4301      	orrs	r1, r0
 8002246:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002248:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800224a:	42aa      	cmp	r2, r5
 800224c:	d001      	beq.n	8002252 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800224e:	6a21      	ldr	r1, [r4, #32]
 8002250:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002252:	6891      	ldr	r1, [r2, #8]
 8002254:	4e63      	ldr	r6, [pc, #396]	; (80023e4 <UART_SetConfig+0x1c8>)
 8002256:	4031      	ands	r1, r6
 8002258:	4301      	orrs	r1, r0
 800225a:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800225c:	4962      	ldr	r1, [pc, #392]	; (80023e8 <UART_SetConfig+0x1cc>)
 800225e:	428a      	cmp	r2, r1
 8002260:	d113      	bne.n	800228a <UART_SetConfig+0x6e>
 8002262:	250c      	movs	r5, #12
 8002264:	4a61      	ldr	r2, [pc, #388]	; (80023ec <UART_SetConfig+0x1d0>)
 8002266:	4862      	ldr	r0, [pc, #392]	; (80023f0 <UART_SetConfig+0x1d4>)
 8002268:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800226a:	4029      	ands	r1, r5
 800226c:	5c40      	ldrb	r0, [r0, r1]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	0209      	lsls	r1, r1, #8
 8002272:	428b      	cmp	r3, r1
 8002274:	d000      	beq.n	8002278 <UART_SetConfig+0x5c>
 8002276:	e07e      	b.n	8002376 <UART_SetConfig+0x15a>
    switch (clocksource)
 8002278:	2808      	cmp	r0, #8
 800227a:	d819      	bhi.n	80022b0 <UART_SetConfig+0x94>
 800227c:	f7fd ff4e 	bl	800011c <__gnu_thumb1_case_uqi>
 8002280:	18595651 	.word	0x18595651
 8002284:	18181878 	.word	0x18181878
 8002288:	63          	.byte	0x63
 8002289:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800228a:	42aa      	cmp	r2, r5
 800228c:	d000      	beq.n	8002290 <UART_SetConfig+0x74>
 800228e:	e09c      	b.n	80023ca <UART_SetConfig+0x1ae>
 8002290:	21c0      	movs	r1, #192	; 0xc0
 8002292:	2080      	movs	r0, #128	; 0x80
 8002294:	4a55      	ldr	r2, [pc, #340]	; (80023ec <UART_SetConfig+0x1d0>)
 8002296:	0109      	lsls	r1, r1, #4
 8002298:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800229a:	0100      	lsls	r0, r0, #4
 800229c:	400b      	ands	r3, r1
 800229e:	4283      	cmp	r3, r0
 80022a0:	d016      	beq.n	80022d0 <UART_SetConfig+0xb4>
 80022a2:	d807      	bhi.n	80022b4 <UART_SetConfig+0x98>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <UART_SetConfig+0xa2>
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	00d2      	lsls	r2, r2, #3
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d035      	beq.n	800231c <UART_SetConfig+0x100>
    switch (clocksource)
 80022b0:	2001      	movs	r0, #1
 80022b2:	e009      	b.n	80022c8 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d1fb      	bne.n	80022b0 <UART_SetConfig+0x94>
 80022b8:	2080      	movs	r0, #128	; 0x80
 80022ba:	0200      	lsls	r0, r0, #8
 80022bc:	e012      	b.n	80022e4 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80022be:	f7ff f921 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d10e      	bne.n	80022e4 <UART_SetConfig+0xc8>
 80022c6:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80022cc:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80022ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022d0:	2310      	movs	r3, #16
 80022d2:	6810      	ldr	r0, [r2, #0]
 80022d4:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022d6:	4243      	negs	r3, r0
 80022d8:	4158      	adcs	r0, r3
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <UART_SetConfig+0x1d8>)
 80022dc:	4240      	negs	r0, r0
 80022de:	4018      	ands	r0, r3
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <UART_SetConfig+0x1dc>)
 80022e2:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022e4:	2203      	movs	r2, #3
 80022e6:	6863      	ldr	r3, [r4, #4]
 80022e8:	435a      	muls	r2, r3
 80022ea:	4282      	cmp	r2, r0
 80022ec:	d8e0      	bhi.n	80022b0 <UART_SetConfig+0x94>
          (pclk > (4096U * huart->Init.BaudRate)))
 80022ee:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022f0:	4282      	cmp	r2, r0
 80022f2:	d3dd      	bcc.n	80022b0 <UART_SetConfig+0x94>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80022f4:	2700      	movs	r7, #0
 80022f6:	0e02      	lsrs	r2, r0, #24
 80022f8:	0201      	lsls	r1, r0, #8
 80022fa:	085e      	lsrs	r6, r3, #1
 80022fc:	1989      	adds	r1, r1, r6
 80022fe:	417a      	adcs	r2, r7
 8002300:	0008      	movs	r0, r1
 8002302:	0011      	movs	r1, r2
 8002304:	001a      	movs	r2, r3
 8002306:	003b      	movs	r3, r7
 8002308:	f7fd ff9e 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800230c:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <UART_SetConfig+0x1e0>)
 800230e:	18c2      	adds	r2, r0, r3
 8002310:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <UART_SetConfig+0x1e4>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002312:	429a      	cmp	r2, r3
 8002314:	d8cc      	bhi.n	80022b0 <UART_SetConfig+0x94>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	60d8      	str	r0, [r3, #12]
 800231a:	e7d4      	b.n	80022c6 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 800231c:	f7fe fd8e 	bl	8000e3c <HAL_RCC_GetSysClockFreq>
        break;
 8002320:	e7cf      	b.n	80022c2 <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002322:	f7ff f8ef 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002326:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002328:	d0cd      	beq.n	80022c6 <UART_SetConfig+0xaa>
 800232a:	e00c      	b.n	8002346 <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800232c:	f7ff f8fa 	bl	8001524 <HAL_RCC_GetPCLK2Freq>
 8002330:	e7f9      	b.n	8002326 <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	2210      	movs	r2, #16
 8002336:	4013      	ands	r3, r2
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002338:	425a      	negs	r2, r3
 800233a:	4153      	adcs	r3, r2
 800233c:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <UART_SetConfig+0x1d8>)
 800233e:	425b      	negs	r3, r3
 8002340:	4013      	ands	r3, r2
 8002342:	4a2d      	ldr	r2, [pc, #180]	; (80023f8 <UART_SetConfig+0x1dc>)
 8002344:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002346:	6861      	ldr	r1, [r4, #4]
 8002348:	0058      	lsls	r0, r3, #1
 800234a:	084b      	lsrs	r3, r1, #1
 800234c:	18c0      	adds	r0, r0, r3
 800234e:	f7fd feef 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002352:	0002      	movs	r2, r0
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <UART_SetConfig+0x1e8>)
 8002356:	3a10      	subs	r2, #16
 8002358:	429a      	cmp	r2, r3
 800235a:	d8a9      	bhi.n	80022b0 <UART_SetConfig+0x94>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800235c:	230f      	movs	r3, #15
 800235e:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002360:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002362:	439a      	bics	r2, r3
 8002364:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002366:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	4303      	orrs	r3, r0
 800236c:	60d3      	str	r3, [r2, #12]
 800236e:	e7aa      	b.n	80022c6 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8002370:	f7fe fd64 	bl	8000e3c <HAL_RCC_GetSysClockFreq>
 8002374:	e7d7      	b.n	8002326 <UART_SetConfig+0x10a>
    switch (clocksource)
 8002376:	2808      	cmp	r0, #8
 8002378:	d89a      	bhi.n	80022b0 <UART_SetConfig+0x94>
 800237a:	f7fd fec5 	bl	8000108 <__gnu_thumb1_case_sqi>
 800237e:	0a05      	.short	0x0a05
 8002380:	9920990d 	.word	0x9920990d
 8002384:	9999      	.short	0x9999
 8002386:	23          	.byte	0x23
 8002387:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8002388:	f7ff f8bc 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800238c:	2800      	cmp	r0, #0
 800238e:	d09a      	beq.n	80022c6 <UART_SetConfig+0xaa>
 8002390:	e00c      	b.n	80023ac <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002392:	f7ff f8c7 	bl	8001524 <HAL_RCC_GetPCLK2Freq>
        break;
 8002396:	e7f9      	b.n	800238c <UART_SetConfig+0x170>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002398:	2310      	movs	r3, #16
 800239a:	6810      	ldr	r0, [r2, #0]
 800239c:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800239e:	4243      	negs	r3, r0
 80023a0:	4158      	adcs	r0, r3
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <UART_SetConfig+0x1d8>)
 80023a4:	4240      	negs	r0, r0
 80023a6:	4018      	ands	r0, r3
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <UART_SetConfig+0x1dc>)
 80023aa:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023ac:	6861      	ldr	r1, [r4, #4]
 80023ae:	084b      	lsrs	r3, r1, #1
 80023b0:	1818      	adds	r0, r3, r0
 80023b2:	f7fd febd 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023b6:	0002      	movs	r2, r0
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <UART_SetConfig+0x1e8>)
 80023ba:	3a10      	subs	r2, #16
 80023bc:	e7a9      	b.n	8002312 <UART_SetConfig+0xf6>
        pclk = HAL_RCC_GetSysClockFreq();
 80023be:	f7fe fd3d 	bl	8000e3c <HAL_RCC_GetSysClockFreq>
        break;
 80023c2:	e7e3      	b.n	800238c <UART_SetConfig+0x170>
    switch (clocksource)
 80023c4:	2080      	movs	r0, #128	; 0x80
 80023c6:	0200      	lsls	r0, r0, #8
 80023c8:	e7f0      	b.n	80023ac <UART_SetConfig+0x190>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	2001      	movs	r0, #1
 80023ce:	0212      	lsls	r2, r2, #8
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d100      	bne.n	80023d6 <UART_SetConfig+0x1ba>
 80023d4:	e778      	b.n	80022c8 <UART_SetConfig+0xac>
 80023d6:	e76b      	b.n	80022b0 <UART_SetConfig+0x94>
 80023d8:	efff69f3 	.word	0xefff69f3
 80023dc:	ffffcfff 	.word	0xffffcfff
 80023e0:	40004800 	.word	0x40004800
 80023e4:	fffff4ff 	.word	0xfffff4ff
 80023e8:	40004400 	.word	0x40004400
 80023ec:	40021000 	.word	0x40021000
 80023f0:	0800271d 	.word	0x0800271d
 80023f4:	00b71b00 	.word	0x00b71b00
 80023f8:	003d0900 	.word	0x003d0900
 80023fc:	fffffd00 	.word	0xfffffd00
 8002400:	000ffcff 	.word	0x000ffcff
 8002404:	0000ffef 	.word	0x0000ffef

08002408 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002408:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800240a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800240c:	07da      	lsls	r2, r3, #31
 800240e:	d506      	bpl.n	800241e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002410:	6801      	ldr	r1, [r0, #0]
 8002412:	4c28      	ldr	r4, [pc, #160]	; (80024b4 <UART_AdvFeatureConfig+0xac>)
 8002414:	684a      	ldr	r2, [r1, #4]
 8002416:	4022      	ands	r2, r4
 8002418:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800241a:	4322      	orrs	r2, r4
 800241c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800241e:	079a      	lsls	r2, r3, #30
 8002420:	d506      	bpl.n	8002430 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002422:	6801      	ldr	r1, [r0, #0]
 8002424:	4c24      	ldr	r4, [pc, #144]	; (80024b8 <UART_AdvFeatureConfig+0xb0>)
 8002426:	684a      	ldr	r2, [r1, #4]
 8002428:	4022      	ands	r2, r4
 800242a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800242c:	4322      	orrs	r2, r4
 800242e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002430:	075a      	lsls	r2, r3, #29
 8002432:	d506      	bpl.n	8002442 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002434:	6801      	ldr	r1, [r0, #0]
 8002436:	4c21      	ldr	r4, [pc, #132]	; (80024bc <UART_AdvFeatureConfig+0xb4>)
 8002438:	684a      	ldr	r2, [r1, #4]
 800243a:	4022      	ands	r2, r4
 800243c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800243e:	4322      	orrs	r2, r4
 8002440:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002442:	071a      	lsls	r2, r3, #28
 8002444:	d506      	bpl.n	8002454 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002446:	6801      	ldr	r1, [r0, #0]
 8002448:	4c1d      	ldr	r4, [pc, #116]	; (80024c0 <UART_AdvFeatureConfig+0xb8>)
 800244a:	684a      	ldr	r2, [r1, #4]
 800244c:	4022      	ands	r2, r4
 800244e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002450:	4322      	orrs	r2, r4
 8002452:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002454:	06da      	lsls	r2, r3, #27
 8002456:	d506      	bpl.n	8002466 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002458:	6801      	ldr	r1, [r0, #0]
 800245a:	4c1a      	ldr	r4, [pc, #104]	; (80024c4 <UART_AdvFeatureConfig+0xbc>)
 800245c:	688a      	ldr	r2, [r1, #8]
 800245e:	4022      	ands	r2, r4
 8002460:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002462:	4322      	orrs	r2, r4
 8002464:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002466:	069a      	lsls	r2, r3, #26
 8002468:	d506      	bpl.n	8002478 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800246a:	6801      	ldr	r1, [r0, #0]
 800246c:	4c16      	ldr	r4, [pc, #88]	; (80024c8 <UART_AdvFeatureConfig+0xc0>)
 800246e:	688a      	ldr	r2, [r1, #8]
 8002470:	4022      	ands	r2, r4
 8002472:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002474:	4322      	orrs	r2, r4
 8002476:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002478:	065a      	lsls	r2, r3, #25
 800247a:	d510      	bpl.n	800249e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800247c:	6801      	ldr	r1, [r0, #0]
 800247e:	4d13      	ldr	r5, [pc, #76]	; (80024cc <UART_AdvFeatureConfig+0xc4>)
 8002480:	684a      	ldr	r2, [r1, #4]
 8002482:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002484:	402a      	ands	r2, r5
 8002486:	4322      	orrs	r2, r4
 8002488:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	0352      	lsls	r2, r2, #13
 800248e:	4294      	cmp	r4, r2
 8002490:	d105      	bne.n	800249e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002492:	684a      	ldr	r2, [r1, #4]
 8002494:	4c0e      	ldr	r4, [pc, #56]	; (80024d0 <UART_AdvFeatureConfig+0xc8>)
 8002496:	4022      	ands	r2, r4
 8002498:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800249a:	4322      	orrs	r2, r4
 800249c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800249e:	061b      	lsls	r3, r3, #24
 80024a0:	d506      	bpl.n	80024b0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024a2:	6802      	ldr	r2, [r0, #0]
 80024a4:	490b      	ldr	r1, [pc, #44]	; (80024d4 <UART_AdvFeatureConfig+0xcc>)
 80024a6:	6853      	ldr	r3, [r2, #4]
 80024a8:	400b      	ands	r3, r1
 80024aa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80024ac:	430b      	orrs	r3, r1
 80024ae:	6053      	str	r3, [r2, #4]
}
 80024b0:	bd30      	pop	{r4, r5, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	fffdffff 	.word	0xfffdffff
 80024b8:	fffeffff 	.word	0xfffeffff
 80024bc:	fffbffff 	.word	0xfffbffff
 80024c0:	ffff7fff 	.word	0xffff7fff
 80024c4:	ffffefff 	.word	0xffffefff
 80024c8:	ffffdfff 	.word	0xffffdfff
 80024cc:	ffefffff 	.word	0xffefffff
 80024d0:	ff9fffff 	.word	0xff9fffff
 80024d4:	fff7ffff 	.word	0xfff7ffff

080024d8 <UART_WaitOnFlagUntilTimeout>:
{
 80024d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024da:	0004      	movs	r4, r0
 80024dc:	000d      	movs	r5, r1
 80024de:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024e0:	2608      	movs	r6, #8
{
 80024e2:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e4:	6822      	ldr	r2, [r4, #0]
 80024e6:	69d3      	ldr	r3, [r2, #28]
 80024e8:	402b      	ands	r3, r5
 80024ea:	1b5b      	subs	r3, r3, r5
 80024ec:	4259      	negs	r1, r3
 80024ee:	414b      	adcs	r3, r1
 80024f0:	42bb      	cmp	r3, r7
 80024f2:	d001      	beq.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 80024f4:	2000      	movs	r0, #0
 80024f6:	e021      	b.n	800253c <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80024f8:	9b08      	ldr	r3, [sp, #32]
 80024fa:	3301      	adds	r3, #1
 80024fc:	d0f3      	beq.n	80024e6 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7fe faad 	bl	8000a5c <HAL_GetTick>
 8002502:	9b00      	ldr	r3, [sp, #0]
 8002504:	1ac0      	subs	r0, r0, r3
 8002506:	9b08      	ldr	r3, [sp, #32]
 8002508:	4298      	cmp	r0, r3
 800250a:	d828      	bhi.n	800255e <UART_WaitOnFlagUntilTimeout+0x86>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d026      	beq.n	800255e <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002510:	2104      	movs	r1, #4
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	420a      	tst	r2, r1
 8002518:	d0e4      	beq.n	80024e4 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	0011      	movs	r1, r2
 800251e:	4031      	ands	r1, r6
 8002520:	9101      	str	r1, [sp, #4]
 8002522:	4232      	tst	r2, r6
 8002524:	d00b      	beq.n	800253e <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8002526:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002528:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 800252a:	f7ff fcd7 	bl	8001edc <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800252e:	0023      	movs	r3, r4
 8002530:	3308      	adds	r3, #8
 8002532:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8002534:	2300      	movs	r3, #0
           return HAL_ERROR;
 8002536:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8002538:	3478      	adds	r4, #120	; 0x78
 800253a:	7023      	strb	r3, [r4, #0]
}
 800253c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	69d9      	ldr	r1, [r3, #28]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	4211      	tst	r1, r2
 8002546:	d0cd      	beq.n	80024e4 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002548:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800254a:	0020      	movs	r0, r4
 800254c:	f7ff fcc6 	bl	8001edc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002550:	0023      	movs	r3, r4
 8002552:	2220      	movs	r2, #32
 8002554:	3308      	adds	r3, #8
 8002556:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002558:	9b01      	ldr	r3, [sp, #4]
 800255a:	3478      	adds	r4, #120	; 0x78
 800255c:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800255e:	2003      	movs	r0, #3
 8002560:	e7ec      	b.n	800253c <UART_WaitOnFlagUntilTimeout+0x64>
	...

08002564 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002564:	0003      	movs	r3, r0
{
 8002566:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002568:	2500      	movs	r5, #0
{
 800256a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256c:	3308      	adds	r3, #8
 800256e:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002570:	f7fe fa74 	bl	8000a5c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002574:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002576:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	071b      	lsls	r3, r3, #28
 800257c:	d51d      	bpl.n	80025ba <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <UART_CheckIdleState+0xb8>)
 8002582:	002a      	movs	r2, r5
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	0389      	lsls	r1, r1, #14
 8002588:	0003      	movs	r3, r0
 800258a:	0020      	movs	r0, r4
 800258c:	f7ff ffa4 	bl	80024d8 <UART_WaitOnFlagUntilTimeout>
 8002590:	42a8      	cmp	r0, r5
 8002592:	d012      	beq.n	80025ba <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002594:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002598:	2301      	movs	r3, #1
 800259a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800259e:	2080      	movs	r0, #128	; 0x80
 80025a0:	6822      	ldr	r2, [r4, #0]
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	4383      	bics	r3, r0
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80025ac:	2320      	movs	r3, #32
 80025ae:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80025b0:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80025b2:	2300      	movs	r3, #0
 80025b4:	3478      	adds	r4, #120	; 0x78
 80025b6:	7023      	strb	r3, [r4, #0]
}
 80025b8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025ba:	0025      	movs	r5, r4
 80025bc:	cd08      	ldmia	r5!, {r3}
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	075b      	lsls	r3, r3, #29
 80025c2:	d523      	bpl.n	800260c <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <UART_CheckIdleState+0xb8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	0020      	movs	r0, r4
 80025ce:	0033      	movs	r3, r6
 80025d0:	03c9      	lsls	r1, r1, #15
 80025d2:	f7ff ff81 	bl	80024d8 <UART_WaitOnFlagUntilTimeout>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d018      	beq.n	800260c <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025da:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025de:	2201      	movs	r2, #1
 80025e0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025e4:	6821      	ldr	r1, [r4, #0]
 80025e6:	4e0e      	ldr	r6, [pc, #56]	; (8002620 <UART_CheckIdleState+0xbc>)
 80025e8:	680b      	ldr	r3, [r1, #0]
 80025ea:	4033      	ands	r3, r6
 80025ec:	600b      	str	r3, [r1, #0]
 80025ee:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025fa:	6821      	ldr	r1, [r4, #0]
 80025fc:	688b      	ldr	r3, [r1, #8]
 80025fe:	4393      	bics	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
 8002602:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002606:	2320      	movs	r3, #32
 8002608:	67eb      	str	r3, [r5, #124]	; 0x7c
 800260a:	e7d1      	b.n	80025b0 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 800260c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002610:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002612:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002614:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002616:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8002618:	e7cb      	b.n	80025b2 <UART_CheckIdleState+0x4e>
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	01ffffff 	.word	0x01ffffff
 8002620:	fffffedf 	.word	0xfffffedf

08002624 <HAL_UART_Init>:
{
 8002624:	b510      	push	{r4, lr}
 8002626:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002628:	d101      	bne.n	800262e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800262a:	2001      	movs	r0, #1
}
 800262c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800262e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d104      	bne.n	800263e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002634:	0002      	movs	r2, r0
 8002636:	3278      	adds	r2, #120	; 0x78
 8002638:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800263a:	f7fe f915 	bl	8000868 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800263e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002640:	2101      	movs	r1, #1
 8002642:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002644:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002646:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002648:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800264a:	438b      	bics	r3, r1
 800264c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800264e:	f7ff fde5 	bl	800221c <UART_SetConfig>
 8002652:	2801      	cmp	r0, #1
 8002654:	d0e9      	beq.n	800262a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800265c:	0020      	movs	r0, r4
 800265e:	f7ff fed3 	bl	8002408 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	4907      	ldr	r1, [pc, #28]	; (8002684 <HAL_UART_Init+0x60>)
 8002666:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002668:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800266c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	438a      	bics	r2, r1
 8002674:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002676:	2201      	movs	r2, #1
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800267e:	f7ff ff71 	bl	8002564 <UART_CheckIdleState>
 8002682:	e7d3      	b.n	800262c <HAL_UART_Init+0x8>
 8002684:	ffffb7ff 	.word	0xffffb7ff

08002688 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002688:	4770      	bx	lr

0800268a <memset>:
 800268a:	0003      	movs	r3, r0
 800268c:	1882      	adds	r2, r0, r2
 800268e:	4293      	cmp	r3, r2
 8002690:	d100      	bne.n	8002694 <memset+0xa>
 8002692:	4770      	bx	lr
 8002694:	7019      	strb	r1, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	e7f9      	b.n	800268e <memset+0x4>
	...

0800269c <__libc_init_array>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	2600      	movs	r6, #0
 80026a0:	4c0c      	ldr	r4, [pc, #48]	; (80026d4 <__libc_init_array+0x38>)
 80026a2:	4d0d      	ldr	r5, [pc, #52]	; (80026d8 <__libc_init_array+0x3c>)
 80026a4:	1b64      	subs	r4, r4, r5
 80026a6:	10a4      	asrs	r4, r4, #2
 80026a8:	42a6      	cmp	r6, r4
 80026aa:	d109      	bne.n	80026c0 <__libc_init_array+0x24>
 80026ac:	2600      	movs	r6, #0
 80026ae:	f000 f819 	bl	80026e4 <_init>
 80026b2:	4c0a      	ldr	r4, [pc, #40]	; (80026dc <__libc_init_array+0x40>)
 80026b4:	4d0a      	ldr	r5, [pc, #40]	; (80026e0 <__libc_init_array+0x44>)
 80026b6:	1b64      	subs	r4, r4, r5
 80026b8:	10a4      	asrs	r4, r4, #2
 80026ba:	42a6      	cmp	r6, r4
 80026bc:	d105      	bne.n	80026ca <__libc_init_array+0x2e>
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	00b3      	lsls	r3, r6, #2
 80026c2:	58eb      	ldr	r3, [r5, r3]
 80026c4:	4798      	blx	r3
 80026c6:	3601      	adds	r6, #1
 80026c8:	e7ee      	b.n	80026a8 <__libc_init_array+0xc>
 80026ca:	00b3      	lsls	r3, r6, #2
 80026cc:	58eb      	ldr	r3, [r5, r3]
 80026ce:	4798      	blx	r3
 80026d0:	3601      	adds	r6, #1
 80026d2:	e7f2      	b.n	80026ba <__libc_init_array+0x1e>
 80026d4:	08002734 	.word	0x08002734
 80026d8:	08002734 	.word	0x08002734
 80026dc:	08002738 	.word	0x08002738
 80026e0:	08002734 	.word	0x08002734

080026e4 <_init>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr

080026f0 <_fini>:
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f6:	bc08      	pop	{r3}
 80026f8:	469e      	mov	lr, r3
 80026fa:	4770      	bx	lr
